{
    "model": "mainapp.article",
    "pk": 1637747481,
    "fields": {
        "hub": 4,
        "name": "Инструменты для Serverless: расширяем возможности работы с бессерверными платформами",
        "image": "https://habrastorage.org/getpro/habr/upload_files/3fb/3e4/b11/3fb3e4b11e737d5dc9910cbf459a9944.jpeg",
        "preview": "<figure class=\"full-width \"><img src=\"https://habr",
        "text": "<figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/3fb/3e4/b11/3fb3e4b11e737d5dc9910cbf459a9944.jpeg\" width=\"740\" height=\"478\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/3fb/3e4/b11/3fb3e4b11e737d5dc9910cbf459a9944.jpeg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>При работе с Serverless есть задачи, для которых базовой функциональности облачных платформ не хватает: использование бессерверных функций со сторонними API, локальная отладка приложения, объединение возможностей нескольких фреймворков. В ответ на эти вызовы появились специальные инструменты — бессерверные фреймворки. Они упрощают запуск проекта, повышают уровень защищённости приложения, а также позволяют быстро внести изменения в стек или архитектуру.</p> <p>Инструментов для работы с бессерверными технологиями — великое множество, и в некоторых подборках рассматривается аж <a href=\"https://thechief.io/c/editorial/the-50-most-preferred-open-source-serverless-tools/\" rel=\"noopener noreferrer nofollow\"><u>пятьдесят</u></a> различных наименований. Но я сосредоточусь именно на фреймворках и расскажу о тех, что показались мне наиболее интересными и актуальными.</p> <h3>Зачем нужны фреймворки для бессерверных функций</h3> <p>Основная задача таких фреймворков — сделать разработку быстрой и простой, поэтому они предоставляют следующие функции и возможности:</p> <ul><li><p>Быстрая настройка серверной части и запуск проекта. Многие фреймворки (например, <a href=\"https://apex.sh/up/\" rel=\"noopener noreferrer nofollow\"><u>Apex Up</u></a>) позволяют разворачивать приложения одной командой, а сам процесс занимает считанные секунды.</p></li><li><p>Короткие и простые команды для разворачивания приложения, обновления и управления. К примеру, чтобы развернуть проект, в большинстве случаев потребуются всего три команды: install, init и deploy.</p></li><li><p>Помощь в процессе масштабирования. Масштабирование является сильной стороной бессерверных технологий, и фреймворки помогают использовать это преимущество: улучшают производительность, осуществляют процесс автомасштабирования (да, у бессерверных платформ есть такая функциональность, но она может быть по тем или иным причинам неудобна или недостаточно функциональна) или процесс ручного масштабирования, когда может быть нужно менять код или конфигурацию.</p></li><li><p>Решение проблемы холодного запуска. Холодный старт — известная для бессерверных приложений проблема, которая решается <a href=\"https://habr.com/ru/post/574944/\" rel=\"noopener noreferrer nofollow\"><u>несколькими различными методами</u></a>, однако некоторые фреймворки освобождают пользователя от необходимости решать её самостоятельно.</p></li><li><p>Лёгкое управление содержимым и модерирование контента. Бессерверные системы привязаны к поставщику услуг, особенно если применять предлагаемые провайдером базы данных, шины обмена сообщениями, API-шлюзы и так далее. Фреймворки же становятся промежуточным звеном: обеспечивают взаимозаменяемость провайдеров и дают возможность использовать желаемый язык и подключать необходимые интеграции.</p></li><li><p>Интеграция с другими платформами и приложениями. Часто провайдеры облачных услуг ограничивают используемые языки программирования, а фреймворки позволяют использовать привычные инструменты там, где это не реализовано провайдером. </p></li></ul> <h3>Как подобрать инструмент под свой проект</h3> <p>Подходящих для работы с Serverless инструментов много, и классифицировать их можно по-разному: например, по функциональности. Так, одни фреймворки являются вспомогательными инструментами для каких-то определённых функций, а другие позволяют интегрировать собственный проект с другими платформами.</p> <p>Бессерверные инструменты используются для разработки приложений, управления инфраструктурой, оркестрации контейнеров и вспомогательных задач вроде тестирования. Эти инструменты развиваются в двух направлениях: одни стараются охватить большое количество функций, а другие сосредоточены на одной определённой функциональности.</p> <h4>Многофункциональные инструменты</h4> <p><a href=\"https://www.serverless.com/\" rel=\"noopener noreferrer nofollow\"><u>Serverless Framework</u></a></p> <p>Один из самых известных и популярных фреймворков для создания бессерверных приложений. Благодаря совместимости с несколькими вариантами бэкенда он часто используется совместно с другими фреймворками. Serverless Framework поддерживает как AWS, так и Google Cloud, Microsoft Azure Functions и Yandex.Cloud, так что можно выбрать платформу на свой вкус. Например, с его помощью можно постить <a href=\"https://medium.com/@sachinbee/building-a-serverless-joke-bot-for-twitter-999538fa6f72\" rel=\"noopener noreferrer nofollow\"><u>шутки в Твиттер</u></a> по таймеру или <a href=\"https://www.serverless.com/blog/how-to-create-landing-page-with-serverless-components\" rel=\"noopener noreferrer nofollow\"><u>написать лендинг</u></a>.</p> <p>Чем же он так хорош?</p> <ul><li><p>Открытый исходный код и 40 тысяч звёзд на GitHub.</p></li><li><p>Написан для JavaScript, но позволяет писать функции (можно и на Python, C#, F#, Go, Node.js, Ruby).</p></li><li><p>Расширяет собственные возможности с помощью плагинов.</p></li><li><p>Обновляет лямбда-функции AWS и их триггеры с помощью простого абстрактного синтаксиса на языке YAML.</p></li><li><p>Поддерживает несколько бэкендов, включая Kubernetes.</p></li><li><p>Обладает гибкой системой переменных.</p></li><li><p>Поддерживает сразу несколько облачных платформ, в том числе Yandex.Cloud.</p></li></ul> <p><a href=\"https://github.com/midwayjs/midway\" rel=\"noopener noreferrer nofollow\"><u>Midway</u></a></p> <p>Бессерверный фреймворк от китайских разработчиков для создания облачных функций Node.js: рассчитан в первую очередь на облака от Alibaba и Tencent, но совместим и с AWS. Он подходит для создания классических серверных и бессерверных приложений, небольших программ и микросервисов. Midway позволяет создавать приложения, которые работают как в контейнере, так и в виртуальных машинах, в экосистеме AWS и облаках от Alibaba и Tencent.</p> <p><a href=\"https://apex.sh/up/\" rel=\"noopener noreferrer nofollow\"><u>Apex Up</u></a></p> <p>Инструмент для развёртки масштабируемых бессерверных приложений, API и статических веб-сайтов. Apex Up фокусируется на развёртывании «ванильных» HTTP-серверов.</p> <p>Особенности:</p> <ul><li><p>интеграция с AWS;</p></li><li><p>инфраструктура как код;</p></li><li><p>поддержка Crystal, Node.js 10.x, Golang, Java и Python.</p></li></ul> <p><a href=\"https://www.webiny.com/serverless-application-framework/\" rel=\"noopener noreferrer nofollow\"><u>Webiny Serverless Application Framework</u></a></p> <p>Webiny — это open source фреймворк для бессерверных приложений на JavaScript со встроенной CMS. Он пока совместим только с AWS, но авторы планируют сделать его кроссплатформенным.</p> <p><a href=\"https://github.com/zappa/Zappa\" rel=\"noopener noreferrer nofollow\"><u>Zappa</u></a></p> <p>Многофункциональный фреймворк для написания приложений на Python, позволяющий свободно работать с AWS Lambda и API Gateway.</p> <p>Особенности:</p> <ul><li><p>открытый исходный код;</p></li><li><p>формирование политики управления идентификацией и доступом по умолчанию (IAM).</p></li></ul> <h4>Специализированные инструменты</h4> <p>Вторая часть бессерверных фреймворков имеет узкую направленность и разработана специально для интеграции с какой-либо платформой (например, Yandex.Cloud или AWS) либо для решения какой-либо задачи (например, локальной эмуляции работы облачного сервиса).</p> <p>Инструменты для работы с AWS</p> <p>У AWS много собственных инструментов, которые облегчают определённые задачи, и их число растёт день ото дня. Большинство инструментов от других разработчиков в той или иной степени совместимы с AWS: в том числе serverless-сервисы Yandex.Cloud.</p> <p><a href=\"https://aws.github.io/chalice/\" rel=\"noopener noreferrer nofollow\"><u>AWS Chalice</u></a></p> <p>Фреймворк для написания бессерверных приложений на Python.</p> <p><a href=\"https://github.com/alexcasalboni/aws-lambda-power-tuning\" rel=\"noopener noreferrer nofollow\"><u>AWS Lambda Power Tuning</u></a></p> <p>Инструмент работает на основе пошаговых функций AWS и помогает оптимизировать функции Lambda с точки зрения затрат и/или производительности на основе данных.</p> <p><a href=\"https://github.com/awslabs/serverless-application-model\" rel=\"noopener noreferrer nofollow\"><u>AWS Serverless Application Model (SAM)</u></a></p> <p>Фреймворк с открытым исходным кодом для создания бессерверных приложений.</p> <p>Инструменты для работы с Yandex.Cloud</p> <p><a href=\"https://github.com/turokg/yappa\" rel=\"noopener noreferrer nofollow\"><u>Yappa</u></a></p> <p>Инструмент для простого развёртывания веб-приложений на Python, вдохновлённый фреймворком Zappa. Некогда был заброшен, но в настоящий момент <a href=\"https://habr.com/ru/post/569674/\" rel=\"noopener noreferrer nofollow\"><u>поддерживается энтузиастами</u></a>.</p> <p>Особенности:</p> <ul><li><p>открытый исходный код;</p></li><li><p>поддержка API Gateway;</p></li><li><p>подключение к Yandex Database;</p></li><li><p>аутентификация через собственный CLI вместо Yandex CLI;</p></li><li><p>поддержка WSGI/ASGI приложений (Flask, Django, FastAPI).</p></li></ul> <p>Инструменты для работы с Ruby</p> <p><a href=\"http://rubyonjets.com/\" rel=\"noopener noreferrer nofollow\"><u>Ruby on Jets</u></a></p> <p>Пакет инструментов, необходимых для создания приложений с использованием AWS Lambda, SNS, SQS, DynamoDB и других сервисов. Идеально подходит для написания функций, объединяющих сервисы и ресурсы AWS.</p> <p>Мне нравится Ruby, потому и Ruby on Jets пришёлся по вкусу.</p> <p>Особенности:</p> <ul><li><p>активная служба поддержки;</p></li><li><p>обширная техническая документация с большим количеством <a href=\"https://rubyonjets.com/docs/articles/\" rel=\"noopener noreferrer nofollow\"><u>примеров</u></a>.</p></li></ul> <p>Управление инфраструктурой</p> <p><a href=\"https://arc.codes/intro/philosophy\" rel=\"noopener noreferrer nofollow\"><u>Architect</u></a></p> <p>В основе архитектуры фреймворка лежит принцип «инфраструктура как код». Это позволяет настраивать инфраструктуру аналогично процессу программирования ПО. Включает инструменты для локальной разработки и тестирования, создания, развёртывания и управления бессерверной инфраструктурой AWS.</p> <p><a href=\"https://pulumi.io/\" rel=\"noopener noreferrer nofollow\"><u>Pulumi</u></a></p> <p>Инструмент для упрощения управления облачной инфраструктуры, запуска и разработки проекта. Работает как с виртуальными машинами и базами данных, так и с контейнерами, кластерами Kubernetes и бессерверными функциями.</p> <p>Особенности:</p> <ul><li><p>открытый исходный код;</p></li><li><p>низкий порог вхождения;</p></li><li><p>Pulumi CrossGuard на страже вашей безопасности;</p></li><li><p>поддержка TypeScript, JavaScript, Python, Go и .NET;</p></li><li><p>поддержка нескольких облачных провайдеров и Kubernetes.</p></li></ul> <p>Оркестрация контейнеров</p> <p><a href=\"https://kubeless.io/\" rel=\"noopener noreferrer nofollow\"><u>Kubeless</u></a></p> <p>Фреймворк, позволяющий разворачивать небольшие фрагменты кода, не беспокоясь о базовой инфраструктуре. Ресурсы Kubernetes используют для автоматического масштабирования, маршрутизации API, мониторинга, устранения неполадок и многого другого. Интересующимся возможностями использования функций и вариантами бессерверных решений на bare metal Kubernetes советую заглянуть в отличную статью «<a href=\"https://habr.com/ru/post/556832/\" rel=\"noopener noreferrer nofollow\"><u>FaaS и serverless-решения на примере PoC kubeless-функции</u></a>».</p> <p><a href=\"https://firecracker-microvm.github.io/\" rel=\"noopener noreferrer nofollow\"><u>Firecracker</u></a></p> <p>Не фреймворк, но технология виртуализации с открытым исходным кодом. Предназначена для создания и управления безопасными мультитенантными контейнерными и функциональными службами.</p> <p>Эмуляция</p> <p><a href=\"https://localstack.cloud/\" rel=\"noopener noreferrer nofollow\"><u>LocalStack</u></a></p> <p>Полнофункциональный эмулятор облачного сервиса для локальной разработки и тестирования бессерверных приложений. Подключение к облачному провайдеру не требуется: LocalStack работает автономно и к тому же поддерживает огромное число сервисов AWS (AWS Lambda, S3, DynamoDB, Kinesis, SQS, SNS и так далее). Для ценителей есть <a href=\"https://localstack.cloud/pricing/\" rel=\"noopener noreferrer nofollow\"><u>PRO-версия</u></a>.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"200\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/7a2/379/986/7a237998617a4106ec8e05ebabf31cca.png\" data-width=\"780\"><figcaption></figcaption></figure> <p>Если вам интересна экосистема Serverless-сервисов и все, что с этим связано, заходите в наше <a href=\"https://t.me/YandexCloudFunctions\" rel=\"noopener noreferrer nofollow\">сообщество в Telegram</a>, где можно обсудить serverless в целом.</p>",
        "is_active": true,
        "author": 1,
        "tag": "yandex.cloud",
        "add_datetime": "2021-11-24T10:09:09Z",
        "article_status_new": 4
    }
},
{
    "model": "mainapp.article",
    "pk": 1637747482,
    "fields": {
        "hub": 5,
        "name": "Любопытный случай взаимной блокировки транзакций в базе данных при использовании TransactionScope",
        "image": "https://habrastorage.org/getpro/habr/upload_files/364/9c1/226/3649c12266714555acb46498978ae471.jpg",
        "preview": "<figure class=\"full-width \"><img src=\"https://habr",
        "text": "<figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/364/9c1/226/3649c12266714555acb46498978ae471.jpg\" width=\"1478\" height=\"936\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/364/9c1/226/3649c12266714555acb46498978ae471.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>Привет, Хабр! Тем временем у нас <a href=\"https://habr.com/ru/company/piter/news/t/590621/\">распродажа в честь черной пятницы</a>. Там найдется много интересных книг по базам данных, и именно о взаимных блокировках при транзакциях в базах данных - сегодняшний пост.</p> <p>Пару лет назад мы с командой построили событийно-ориентированную систему, работавшую с транзакциями и время от времени застывавшую в загадочных взаимных блокировках. Как-то раз я решил заглянуть в нее поглубже и посмотреть, что же на самом деле там происходит. Этот небольшой пост можно считать отчетом, документирующим мои изыскания.</p> <p>У сервиса одновременно работает 3 инстанса: по одному на хост EC2 в AWS. Сервис написан на C#/.NET Core 3.1 с использованием <code>BackgroundService</code>. Информация хранится в базе данных Aurora MySql. Сервис подхватывает события предметной области из множества очередей, обрабатывает их, меняя состояние локальных сущностей предметной области, после чего отправляя их обратно на долговременное хранение в базу данных MySql. Все это осуществляется конкурентно, иногда – прямо в транзакционных блоках базы данных, которые выглядят примерно так:</p> <pre><code class=\"cs\">static async Task Main(string[] args)\n{\n    using (var scope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))\n    {\n\tawait Save(product);\n\t// мы можем обновить и больше сущностей \n\tscope.Complete();\n    }\n}\n\npublic static async Task Save(Product product)\n{\n    using (var connection = new MySqlConnection(“...”))\n    {\n\tawait connection.OpenAsync();\n\t\n\t// выбрать count(1) из Products где Id = @id\n\tif (await Exists(product, connection))\n\t    // обновить Products set ... где Id = @id\n\t    await Update(product, connection);\n\telse\n\t    // вставить в Products values(...)\n\t    await Insert(product, connection);\n    }\n}</code></pre> <p>Мы используем <a href=\"https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-3.0/ms172152(v=vs.85)\">TransactionScope</a><code>,</code> так как операции в предметной области охватывают множество сущностей предметной области, и соответствующая логика доступа к данным для этих сущностей реализуется в отдельных классах. Единственный способ сложить их в единую транзакцию на уровне предметной области – использовать единицу выполнения работы, например, <code>TransactionScope</code>.</p> <p>Однако, запуская этот код в продакшене, мы регулярно утыкались во взаимные блокировки:</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"144\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/8dd/bb0/1f3/8ddbb01f3127b1ad77d8561f2b4dfa0c.png\" data-width=\"739\"><figcaption></figcaption></figure> <p>Поэтому я решил вычленить путь выполнения транзакционного кода и запустить его в цикле <code>Parallel.For</code>, нацелившись на локальную базу данных MySql – и посмотреть, смогу ли я воспроизвести эти взаимные блокировки: </p> <pre><code class=\"cs\">Parallel.For(0, 500,\n    async index =&gt;\n    {\n        var product = new Product\n        {\n            Id = id,\n            Stock = index+1\n        };\n        \n        using (var scope = new TransactionScope(\n            TransactionScopeAsyncFlowOption.Enabled))\n        {\n            await Save(product);\n            scope.Complete();\n        }        \n    });</code></pre> <p>Прошло не так много итераций, и ошибка воспроизвелась:</p> <blockquote><p>MySql.Data.MySqlClient.MySqlException (0x80004005): Взаимная блокировка обнаружена при попытке приобрести блокировку; попытка перезапуска транзакции …</p></blockquote> <p>Хммм! </p> <p>Обратите внимание: взаимная блокировка сама по себе – еще не конец света, так как можно повторно выполнить заблокированную транзакцию, ведь она откатывается обратно в MySql. Это превращается в проблему, если такие блокировки происходят с некоторой регулярностью и начинают тормозить прогресс в выполнении задач и/или приводить к потере данных тем или иным образом. В нашем случае потеря данных не представляла особой проблемы, но сами по себе многократные блокировки вызывали беспокойство. В будущем эта беда вполне могла усугубиться в случае, если бы увеличился объем потока сообщений. Поэтому я решил исследовать эту проблему и по возможности ее устранить.</p> <p>Сначала я заподозрил, что транзакция попросту протекает слишком долго из-за того, что мы применяем к ней операцию SELECT, а затем либо INSERT, либо UPDATE, именно поэтому возникает слишком продолжительный конфликт при блокировках. Но как рассмотреть, что <em>в действительности</em> здесь происходит? </p> <h2>Отладка блокировок в MySql </h2> <p>Есть как минимум два простейших способа посмотреть, что происходит с блокировками в MySql:</p> <p>a. Просмотреть самые свежие блокировки, направив к базе данных запрос <code>show engine innodb status</code>. Получим вот такой вывод:</p> <pre><code>a.\t=====================================\nb.\t2021-07-23 21:27:55 0x7f0fec4a3700 INNODB MONITOR OUTPUT\nc.\t=====================================\nd.\t...\ne.\t------------------------\nf.\tLATEST DETECTED DEADLOCK\ng.\t------------------------\nh.\t2021-07-23 21:26:29 0x7f0fd3558700\ni.\t*** (1) TRANSACTION:\nj.\tTRANSACTION 2631, ACTIVE 0 sec starting index read\nk.\tmysql tables in use 1, locked 1\nl.\tLOCK WAIT 4 lock struct(s), heap size 1136, 2 row lock(s)\nm.\tMySQL thread id 15, OS thread handle 139706363459328, query id 3531 172.20.0.1 root updating\nn.\tupdate TrxDb.Products set stock = 495 where Id = 1000 and Version = 1\no.\t\np.\t*** (1) HOLDS THE LOCK(S):\nq.\tRECORD LOCKS space id 2 page no 4 n bits 72 index PRIMARY of table `TrxDb`.`Products` trx id 2631 lock mode S locks rec but not gap\nr.\tRecord lock, heap no 2 PHYSICAL RECORD: n_fields 5; compact format; info bits 0\ns.\t...\nt.\t\nu.\t\nv.\t*** (1) WAITING FOR THIS LOCK TO BE GRANTED:\nw.\tRECORD LOCKS space id 2 page no 4 n bits 72 index PRIMARY of table `TrxDb`.`Products` trx id 2631 lock_mode X locks rec but not gap waiting\nx.\tRecord lock, heap no 2 PHYSICAL RECORD: n_fields 5; compact format; info bits 0\ny.\t ...\nz.\t\naa.\t\nbb.\t*** (2) TRANSACTION:\ncc.\tTRANSACTION 2632, ACTIVE 0 sec starting index read\ndd.\tmysql tables in use 1, locked 1\nee.\tLOCK WAIT 4 lock struct(s), heap size 1136, 2 row lock(s)\nff.\tMySQL thread id 9, OS thread handle 139706363754240, query id 3533 172.20.0.1 root updating\ngg.\tupdate TrxDb.Products set stock = 357 where Id = 1000 and Version = 1\nhh.\t\nii.\t*** (2) HOLDS THE LOCK(S):\njj.\tRECORD LOCKS space id 2 page no 4 n bits 72 index PRIMARY of table `TrxDb`.`Products` trx id 2632 lock mode S locks rec but not gap\nkk.\tRecord lock, heap no 2 PHYSICAL RECORD: n_fields 5; compact format; info bits 0\nll.\t...\nmm.\t\nnn.\t*** (2) WAITING FOR THIS LOCK TO BE GRANTED:\noo.\tRECORD LOCKS space id 2 page no 4 n bits 72 index PRIMARY of table `TrxDb`.`Products` trx id 2632 lock_mode X locks rec but not gap waiting\npp.\tRecord lock, heap no 2 PHYSICAL RECORD: n_fields 5; compact format; info bits 0\nqq.\t...\nrr.\t\nss.\t*** WE ROLL BACK TRANSACTION (2)\ntt.\t...\nuu.\t----------------------------\nvv.\tEND OF INNODB MONITOR OUTPUT\nww.\t============================</code></pre> <p>Так выводится список самых свежих блокировках, показывается, какие блокировки удерживались при транзакции, и какие блокировки находились в состоянии ожидания на момент взаимной блокировки.</p> <p>b. Вывести все взаимные блокировки в логи MySql, включив (<em>т.e. установив в “ON”, по умолчанию “OFF”</em>) настройку <a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks\">innodb_print_all_deadlocks</a> в системной переменной. Вывод обычно будет один и тот же, но в этом логе будут учтены все взаимные блокировки. В <a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-deadlocks-handling.html\">документации</a> по MySql рекомендуется включать эту настройку только на время отладки, а затем отключать, как только проблема будет решена – вероятно, потому, что логирование взаимных блокировок может негативно повлиять на нормальную производительность транзакций. Правда, я оставил эту настройку включенной в нашей базе данных, даже когда она пошла в продакшен – и не заметил никакого существенного влияния на обработку транзакций.</p> <p>Так или иначе, в данном случае я вижу, что обе транзакции 1 и 2 держат S (разделяемую) блокировку и ждут X (монопольную) блокировку, чтобы обновить строку. Таким образом, каждая из транзакций ждет блокировку, чтобы внести запись, но в то же время держит и другую блокировку. Эта другая блокировка должна быть высвобождена хотя бы одной из транзакций, прежде, чем они смогут получить монопольные блокировки. Вот вам и ВЗАИМНАЯ БЛОКИРОВКА!!! </p> <p>Принцип работы этих блокировок очень хорошо <a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html\">документирован в MySql,</a> поэтому, если хотите разобраться подробнее – почитайте там. Это очень глубокая тема, и сложно постоянно держать в голове все пограничные случаи.</p> <p>Но давайте разберемся, почему S вообще блокируется? Я заинтересовался, не приводит ли к этому ненароком простая операция SELECT, поэтому также направил к SQL транзакцию с единственной SELECT, не фиксируя транзакцию и не откатывая ее назад, чтобы можно было применить диагностические запросы к транзакции, по-прежнему находящейся в состоянии RUNNING:</p> <pre><code class=\"sql\">set autocommit = off;\nstart transaction;\nselect * from TrxDb.Products where Id = 1000;</code></pre> <p>Чтобы посмотреть, блокировки какого рода берутся, я выполнил следующий диагностический запрос:</p> <pre><code class=\"sql\">select * from performance_schema.data_locks;</code></pre> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"83\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/1ba/29a/f10/1ba29af104c8df1db40a2267a7832c2d.png\" data-width=\"1247\"><figcaption></figcaption></figure> <p>Хмм! Никаких блокировок! Что, если оно блокируется, если одновременно выполняется операция UPDATE в той же транзакции? </p> <pre><code class=\"sql\">set autocommit = off;\nStart transaction; \nselect count(1) from TrxDb.Products where Id = 1000; \nupdate TrxDb.Products set Stock = 8 where Id = 1000 and Version = 1;</code></pre> <p>Результат диагностического запроса:</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"81\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/14c/782/2b3/14c7822b3d7bc1d82b6a4f0c6df508f9.png\" data-width=\"1356\"><figcaption></figcaption></figure> <p>Oк! Операция UPDATE берет только блокировку X (как и должно быть), а блокировки S по-прежнему не происходит! Блокировку IX игнорируем, так как это плановая блокировка, которая, по-видимому, всегда предоставляется всем транзакциям, которые ее запрашивают. Кажется, она не сказывается ни на каких других блокировках или транзакциях! </p> <p>Если я запускаю 2 транзакции почти одновременно (<em>в двух отдельных вкладках/сеансах и со слегка отличающимися значениями данных</em>), то вывод диагностического запроса показывает: одна транзакция получает блокировку X, а другая ожидает ее, но по-прежнему не просматривается блокировка S<a href=\"#111\">*</a>:</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"126\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/c02/f4e/19e/c02f4e19e93656d9da1b536a2559ce82.png\" data-width=\"1369\"><figcaption></figcaption></figure> <p>Подождав еще немного, получаю ошибку LOCK WAIT TIMEOUT, а не DEADLOCK:</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"83\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/6dc/305/322/6dc3053221083a7e019193ca8ed31f54.png\" data-width=\"592\"><figcaption></figcaption></figure> <p>Интрига закручивается!!!</p> <h2>Влияет ли на блокировки уровень изоляции транзакций? </h2> <p>По умолчанию в MySql принят <a href=\"https://dev.mysql.com/doc/refman/5.6/en/innodb-transaction-isolation-levels.html\">уровень изоляции</a> REPEATABLE READ, поэтому я предположу, что в <code>TransactionScope</code> по умолчанию также действует уровень изоляции REPEATABLE READ, из-за чего взаимная блокировка становится еще более странной, ведь выполнение SQL-скрипта к взаимной блокировке не приводит. Поэтому я заглянул под капот <code>TransactionScope</code> и нашел вот что: </p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"404\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/102/83d/6ea/10283d6ea4297e76df24a27dab48570a.png\" data-width=\"1128\"><figcaption></figcaption></figure> <p>Здесь внутри создается экземпляр <code>CommittableTransaction</code></p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"84\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/55b/b12/938/55bb12938b7fd6d8967db523e7f979f8.png\" data-width=\"829\"><figcaption></figcaption></figure> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"239\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/0bd/76c/141/0bd76c14118337203c4049d65515fb89.png\" data-width=\"700\"><figcaption></figcaption></figure> <p>Использующий <strong>SERIALISABLE</strong> в качестве уровня изоляции, заданного по умолчанию (<em>это также </em><a href=\"https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-3.0/ms172152(v=vs.85)#setting-the-transactionscope-isolation-level\"><em>документировано</em></a><em>, но на тот момент я еще не удосужился закопаться в документацию так глубоко</em>)!…ну… oк! Значит, вот в чем причина взаимной блокировки?</p> <p>Я изменил мои SQL-скрипты так, чтобы установить уровень изоляции в значение SERIALISABLE, и снова запустил их одновременно (<em>причина, по которой нужны искусственные задержки – так я хочу повысить вероятность взаимной блокировки, чуть-чуть изменив порядок, в котором приобретаются блокировки. Вероятно, это же происходит и в коде из репозитория, и вот почему должно пройти несколько итераций, прежде, чем начнут всплывать взаимные блокировки. Без этого единственная ошибка, которую я получаю - LOCK WAIT TIMEOUT!</em> ) :</p> <pre><code class=\"sql\">#Транзакция 1\nset autocommit = off;\nset SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE ;\nstart transaction;\nselect * from TrxDb.Products where Id = 1000;\ndo sleep(8);\nupdate TrxDb.Products set stock = 8 where Id = 1000 and Version = 1;\n\n#Транзакция 2\nset autocommit = off;\nset SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE ;\nstart transaction;\ndo sleep(5);\nselect * from TrxDb.Products where Id = 1000;\nupdate TrxDb.Products set stock = 8 where Id = 1000 and Version = 1;</code></pre> <p>И…ВЗАИМНАЯ БЛОКИРОВКА!!!</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"144\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/447/886/81e/44788681ee26514848af771e786c2241.png\" data-width=\"739\"><figcaption></figcaption></figure> <p>В результатах диагностического запроса показаны блокировки:</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"151\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/995/7d7/686/9957d7686a8437ee889807e28fe0a01b.png\" data-width=\"1348\"><figcaption></figcaption></figure> <p>Обе транзакции приобрели S-блокировки, а потом остались дожидаться X-блокировки, поскольку, как только принята S-блокировка, никакие другие блокировки не предоставляются. Именно это я и видел в исходном выводе лога с взаимной блокировкой с самого начала.</p> <p>Но почему операция SELECT принимает S-блокировку при уровне изоляции serialisable<a href=\"#222\">**</a>?</p> <p>Оказывается, что ответ на первый вопрос совсем прост и даже как-то ломает интригу: </p> <blockquote><p><em>SERIALIZABLE</em><br> <em>Этот уровень подобен </em><a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html#isolevel_repeatable-read\"><em><u>REPEATABLE READ</u></em></a><em>, </em><strong><em>но InnoDB неявно преобразует все обычные операции </em></strong><a href=\"https://dev.mysql.com/doc/refman/8.0/en/select.html\"><strong><em><u>SELECT</u></em></strong></a><strong><em> в </em></strong><a href=\"https://dev.mysql.com/doc/refman/8.0/en/select.html\"><strong><em><u>SELECT … FOR SHARE</u></em></strong></a><strong><em><u>,</u> если отключена </em></strong><a href=\"https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_autocommit\"><strong><em><u>автофиксация</u></em></strong></a><em>. Если автофиксация включена, то </em><a href=\"https://dev.mysql.com/doc/refman/8.0/en/select.html\"><em><u>SELECT</u></em></a><em> – это самостоятельная транзакция. Соответственно, известно, что она предназначена только для чтения и поддается сериализации, если выполняется как согласованное (неблокирующее) чтение, и ее не нужно блокировать, чтобы могли пройти другие транзакции. (Чтобы принудительно заставить обычную </em><a href=\"https://dev.mysql.com/doc/refman/8.0/en/select.html\"><em><u>SELECT</u></em></a><em> блокироваться, если другие транзакции модифицировали выбранные ряды, отключите автофиксацию.)</em></p><p><a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html\">Документация</a> MySql</p></blockquote> <p>А SELECT…FOR SHARE так устроена, что принимает блокировку S – значит, это и есть первопричина блокировки S!</p> <h2>Как мы это исправили?</h2> <p>Часто взаимные блокировки могут свидетельствовать о том, что при проектировании приложения были допущены ошибки. Но я заметил, что нам, в самом деле, не требуется выполнять на уровне данных операции типа UPSERT. Вместо этого операцию такого типа можно разделить на две независимые операции INSERT и UPDATE, перенеся таким образом акт принятия решения на уровень предметной области.</p> <p>Разделяя UPSERT, мы, фактически, не просто укорачиваем отдельные транзакции, но и делаем их более явными и простыми. Затем код предметной области может определять, создавать ли новую запись, если записи для данного id пока не существует, либо обновить уже имеющуюся тем состоянием, которое было принесено в событии. С любой практической точки зрения это решение должно приниматься именно на уровне предметной области, а не на уровне данных, поскольку именно в предметной области найдется достаточный контекст и осведомленность о том, хватает ли у нас информации для продолжения работы. Проверка на “существование” не требует что-либо блокировать, поэтому при таком разделении уменьшиться и общее количество блокировок. Может начаться гонка, когда проверка на сервере A сообщает: «товар не существует, создать его», и одновременно на другом сервере B происходит та же проверка, но там этот товар создается раньше, и тогда на сервере A операция не удается из-за нарушения первичного ключа. Но, поскольку наша система основана на сообщениях, простая повторная попытка, сделанная чуть позже, позволит корректно обновить запись, и система снова станет согласованной. С небольшой отложенной обработкой мы справимся.</p> <p>Разумеется, все это будет варьироваться от системы к системе, поэтому предложенное решение может оказаться правильным и желательным не в любой ситуации. Но при извлечении данных для определения того, требуется ли нам вставка или обновление, <strong>все в одной транзакции</strong>, по определению приводит к более долгоиграющим транзакциям, поэтому <em>могут</em> создаться условия для конфликта при блокировках и, соответственно, могут случиться взаимные блокировки (<em>что и подчеркивается в этом посте</em>).</p> <p>Весь код к посту (плюс некоторые дополнительные сценарии) выложен на <a href=\"https://github.com/explorer14/TransactionsAndDeadlocks\">GitHub</a>!</p> <a class=\"anchor\" name=\"111\" id=\"111\"></a> <p><em>*</em>Разумеется, здесь я выполняю транзакции не так, как в коде, поскольку вообще не делаю фиксации транзакций (так как хочу отловить их, пока они работают), и у этого есть побочный эффект: транзакции удерживают блокировки дольше, чем требуется. Но тот факт, что код все равно приходит к взаимной блокировке, приводит меня к обоснованной догадке, что на данный момент сделанная мной конфигурация еще не совершенна, но не безнадежна! Если вы знаете лучший или более надежный способ поставить такой эксперимент – высказывайтесь в комментариях! </p> <a class=\"anchor\" name=\"222\" id=\"222\"></a> <p><em>** </em>Оказывается, что уровень изоляции serialisable весьма недопонимают (я точно недопонимал). Из-за этого можно подумать, что транзакции будут выполняться одна за другой детерминированным образом, поэтому и возникает вопрос: откуда взаимные блоуировки, если все блокировки приобретаются детерминированным образом. Но на самом деле <a href=\"https://sqlperformance.com/2014/04/t-sql-queries/the-serializable-isolation-level\">все</a> <a href=\"https://stackoverflow.com/questions/27347730/serializable-transaction-deadlock\">не совсем</a> <a href=\"https://dba.stackexchange.com/a/226179\">так</a>! Если у вас создается впечатление, как будто транзакции происходят одна за другой, это еще не значит, что они <strong>физически </strong>идут друг за другом. Блокировки, принимаемые в рамках сериализуемой транзакции, не мешают другим сериализуемым транзакциям <strong>начаться, </strong>они только предотвращают фантомные считывания и грязные считывания незафиксированных данных. Это означает, что транзакции все равно будут перекрываться, и порядок «одна за другой» достигается только ценой взаимных блокировок, ответственность за которые ложится на программиста, то есть, на вас! </p>",
        "is_active": true,
        "author": 1,
        "tag": "блокировки",
        "add_datetime": "2021-11-24T10:21:09Z",
        "article_status_new": 4
    }
},
{
    "model": "mainapp.article",
    "pk": 1637747485,
    "fields": {
        "hub": 2,
        "name": "Сингапур — техно-утопия или авторитарный контроль",
        "image": "https://habrastorage.org/getpro/habr/upload_files/f3d/611/847/f3d611847edc04dfd8e087c2c3016398.jpeg",
        "preview": "<figure class=\"full-width \"><img src=\"https://habr",
        "text": "<figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/f3d/611/847/f3d611847edc04dfd8e087c2c3016398.jpeg\" width=\"1082\" height=\"609\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/f3d/611/847/f3d611847edc04dfd8e087c2c3016398.jpeg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>«Сказочный город», «райский уголок Азии», «Центр Востока и Запада» - именно такими эпитетами награждают Сингапур. И действительно, для иностранцев этот город-государство покажется динамичным мегаполисом с яркими красками и без изъянов. Это один из крупных туристических и финансовых центров Азии, а также крупнейший порт юго-восточной части континента. </p> <p>Сингапур часто изображают как амбициозную техно-утопию. В<a href=\"https://www.weforum.org/videos/singapore-s-new-forest-town-could-change-urban-living-forever\"> <u>видеороликах Всемирного экономического форума</u></a> и собственных СМИ, финансируемых государством, страна представлена в научно-фантастическом фоне, в котором беспилотные автобусы курсируют между пляжными клубами и техническими центрами. </p> <p>Это место, где пилотные проекты обретают жизнь. Где трудноразрешимые проблемы сегодняшнего дня автоматически исчезают. Где<a href=\"https://ourworld.unu.edu/en/farming-in-the-sky-in-singapore\"><u> вертикальные фермы</u></a> и <a href=\"https://www.pub.gov.sg/watersupply/fournationaltaps/newater\"><u>вода из очищенных сточных вод </u></a>устраняют зависимость от продуктов соседних стран. Где роботы <a href=\"https://www.bbc.co.uk/news/av/world-asia-35149344\"><u>заботятся</u></a> о стариках, а дроны <a href=\"https://www.wilhelmsen.com/ships-agency/maritime-drone-delivery/\"><u>обслуживают</u></a> грузовые корабли. Где склады и строительные площадки <a href=\"https://www.straitstimes.com/business/construction-firms-to-get-help-in-adopting-robotics-and-automation-solutions-under-new\"><u>укомплектованы машинами</u></a>, что устраняет необходимость в рабочих-мигрантах. Здесь<a href=\"https://www.youtube.com/watch?v=2DJmIjKtVkA\"> <u>роботы-собаки следят за соблюдением социального дистанциирования</u></a>, а летающие такси уже не за горами. Выглядит заманчиво, но какова цена всего этого?</p> <h3>«Умная нация»</h3> <p>«Виртуальная реальность никогда не будет выглядеть настоящей, пока люди не научатся добавлять в неё немного грязи». Это цитата из статьи<a href=\"https://ru.wikipedia.org/wiki/%D0%93%D0%B8%D0%B1%D1%81%D0%BE%D0%BD,_%D0%A3%D0%B8%D0%BB%D1%8C%D1%8F%D0%BC\"> <u>Уильяма Гибсона</u></a> под названием «Диснейленд со смертной казнью», опубликованной в журнале «Wired» за сентябрь — октябрь 1993 года. </p> <p>Утверждение относилось к безупречной чистоте в аэропорту<a href=\"https://ru.wikipedia.org/wiki/%D0%A7%D0%B0%D0%BD%D0%B3%D0%B8_(%D0%B0%D1%8D%D1%80%D0%BE%D0%BF%D0%BE%D1%80%D1%82)\"> <u>Чанги</u></a>, которым автор отмечает, что природная среда Сингапура слишком окультурена. Сингапур произвёл на Гибсона впечатление чистого, скучного и конформистского города. Автор отмечает, что в обществе прочно укоренились конформизм и боязнь нарушить нормы поведения, не развиты чувство юмора и способность к творчеству.</p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/52d/9a1/36b/52d9a136bc5fbb0e52821165e448994b.jpeg\" width=\"600\" height=\"398\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/52d/9a1/36b/52d9a136bc5fbb0e52821165e448994b.jpeg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>«Витрина мирового капитализма», Сингапур, действительно часто оказывается на высоких местах в различных рейтингах, связанных с экономикой, условиями ведения бизнеса и инвестициями. Но не в рейтингах свободы слова и развития демократии.</p> <p>Например, в 2021 году страна заняла 4-место в рейтинге мировых финансовых центров от компании<a href=\"https://www.longfinance.net/programmes/financial-centre-futures/global-financial-centres-index/\"> <u>Z/Yen Group</u></a> и 6-место в рейтинге цифрового качества жизни. При этом в рейтинге демократии, подготовленном<a href=\"https://www.eiu.com/n/\"> <u>Economist Intelligence Unit</u></a>, Сингапур занял 74-е место из 167.</p> <p>Сингапур имеет мировую репутацию одного из самых безопасных городов в мире, но национальная история демонстрирует глубокую незащищённость. После отделения от Малайи в 1965 году, <em>«маленькая красная точка, свисающая с конца Малайского полуострова»</em>, позиционировала себя островом процветания, окруженный враждебными соседями, жаждущими её земли и денег.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"518\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/8f7/dd7/ce1/8f7dd7ce1c55390b527b5615b9ba1abd.png\" data-width=\"766\"><figcaption></figcaption></figure> <p>Инвестиции в новые технологии, помогли ускорить экономическое развитие Сингапура. Уже в 1970-х годах это был один из самых загруженных портов мира, и правительство всячески старалось привлечь производителей технологий. </p> <p>К 1980-м годам страна была крупнейшим производителем жёстких дисков в мире и вышла из рецессии в середине 80-х с новой философией: уникальное сочетание<a href=\"https://ru.wikipedia.org/wiki/%D0%A2%D1%8D%D1%82%D1%87%D0%B5%D1%80%D0%B8%D0%B7%D0%BC#:~:text=Thatcherism)%20%E2%80%94%20%D0%BF%D0%BE%D0%BB%D0%B8%D1%82%D0%B8%D0%BA%D0%B0%20%D0%BA%D0%BE%D0%BD%D1%81%D0%B5%D1%80%D0%B2%D0%B0%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D0%B3%D0%BE%20%D0%BF%D1%80%D0%B0%D0%B2%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D1%81%D1%82%D0%B2%D0%B0%20%D0%92%D0%B5%D0%BB%D0%B8%D0%BA%D0%BE%D0%B1%D1%80%D0%B8%D1%82%D0%B0%D0%BD%D0%B8%D0%B8,%D1%81%D0%BE%D1%86%D0%B8%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D1%85%20%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%2C%20%D0%BF%D1%80%D0%B8%D0%B2%D0%B0%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B5%D0%B9%20%D1%81%D0%BE%D1%86%D0%B8%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D1%85%20%D1%81%D1%84%D0%B5%D1%80\"> <u>тэтчеристского капитализма</u></a><u> </u>и государственного контроля.</p> <p>Первые коммерческие интернет-провайдеры были запущены в середине 1990-х годов, а в 1998 году правительство развернуло общенациональную широкополосную сеть. К 2013 году каждый дом имел доступ к высокоскоростному оптоволокну и мобильным данным 4G.</p> <p>Facebook, Twitter, ByteDance и Netflix вместе со многими небольшими технологическими компаниями создали региональные штаб-квартиры в Сингапуре. Чтобы попытаться привлечь новые развивающиеся секторы, такие как финтех, кибербезопасность и медицинские технологии, правительство напрямую инвестирует в стартапы, давая компаниям возможности создавать новые технологии, от беспилотных автомобилей до электронных платежей.</p> <p>По мере расширения возможностей подключения и распространения смартфонов правительство заговорило об использовании технологий как способе достижения социальных целей. В 2014 году премьер-министр <a href=\"https://ru.wikipedia.org/wiki/%D0%9B%D0%B8_%D0%A1%D1%8F%D0%BD%D1%8C%D0%BB%D1%83%D0%BD\"><strong><u>Ли Сяньлун</u></strong></a> выступил с<a href=\"https://www.pmo.gov.sg/Newsroom/transcript-prime-minister-lee-hsien-loongs-speech-smart-nation-launch-24-november\"> <u>инициативой «Умная нация»</u></a>, пообещав применить передовые технологии практически во всех аспектах жизни в городе-государстве, от транспортных систем, оптимизированных для искусственного интеллекта и до оцифровки государственных услуг:</p> <p><em>«Наше видение заключается в том, чтобы стать умной нацией: нацией, в которой люди живут осмысленной и полноценной жизнью, без проблем, благодаря технологиям, предлагающим захватывающие возможности для всех. Мы должны видеть это в нашей повседневной жизни, где сети датчиков и интеллектуальных устройств позволяют нам жить в безопасности и комфорте».</em></p> <p>С тех пор амбиции его правительства выросли. В соответствии с инициативой «30 к 2030»<a href=\"https://ourworld.unu.edu/en/farming-in-the-sky-in-singapore\"> <u>вертикальное и интеллектуальное сельское хозяйство</u></a> будет обеспечивать 30% потребностей страны в питании к концу десятилетия по сравнению с нынешними 10%. Более 100 000 «умных фонарных столбов» будут контролировать движение, условия окружающей среды и людей. </p> <p>В быстро стареющем населении роботы помогут пожилым людям оставаться в форме, здоровыми и вертикальными. Общенациональная биометрическая база данных должна ускорить обработку информации на пограничных пунктах и ​​повысит безопасность в банках и государственных службах.</p> <h3>Трудовые мигранты и пандемия</h3> <p>Создание централизованных цифровых платформ для данных о гражданах эффективно для правительства, но добавляет административные трения для граждан, не говоря уже о мигрантах. Наблюдатели, считают, что это создает системы, которые могут быть бесчеловечными.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"325\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/27a/adb/e17/27aadbe17681debe7ffd5e0c1bc3932f.png\" data-width=\"585\"><figcaption></figcaption></figure> <p>Сингапурские рабочие-мигранты существуют в параллельной реальности, отличном от основного общества. Их отношения с Сингапуром намеренно транзакционные. Они могут прибывать в страну, строить многоэтажные дома и туннели, подметать улицы и вырубать джунгли, которые постоянно посягают на дороги и дома. Они могут зарабатывать твердую валюту для отправки домой. Но они никогда не могут стать полноценными гражданами.</p> <p>Пандемия послужила причиной для усиления контроля. В Сингапуре был введён локдаун 7-апреля 2020 года. В связи с ростом числа случаев заболевания Covid-19, правительство ввело изоляцию по всей стране. Жителям было необходимо оставаться дома и выходить только для того, чтобы купить предметы первой необходимости или для занятий спортом. </p> <p>Вдали от города, в общежитиях для мигрантов - огромных казарменных комплексах, в которых проживает 300 000 рабочих, в основном из Южной Азии, - никто не мог уехать. Коронавирус поразил переполненные общежития мигрантов. К концу 2020 года более 150 000 трудящихся-мигрантов (47%) <a href=\"https://www.bbc.com/news/world-asia-55314862\"><u>были инфицированы</u></a>, по сравнению с 4 000 от гражданского населения.</p> <figure class=\"\"><img src=\"/img/image-loader.svg\" height=\"589\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/7a1/5d0/8e2/7a15d08e2d21dd5e55caa0f2bd17f52c.png\" data-width=\"390\"><figcaption></figcaption></figure> <p>Локдаун продлился два месяца, и, чтобы справиться с плавным переходом от режима изоляции, правительство обратилось к технологиям. Приложение<a href=\"https://en.wikipedia.org/wiki/TraceTogether\"> <u>TraceTogether</u></a>, требовало, чтобы пользователи регистрировались, используя номер своей национальной идентификационной карты. Приложение записывает всякий раз, когда пользователи проходят в непосредственной близости друг от друга. Чтобы войти в какое-либо здание, жители должны пройти регистрацию с помощью другого приложения<a href=\"https://en.wikipedia.org/wiki/SafeEntry\"> <u>SafeEntry</u></a> на основе QR-кода. Позже эти две системы были объединены. Оба приложения были связаны с учётными записями граждан <strong>Singpass</strong> и <strong>HealthHub</strong> - цифровыми шлюзами для государственных услуг - а это означает, что их статус вакцинации и недавние результаты тестов отображались на всех платформах.</p> <p>Помимо TraceTogether большинство мигрантов уже использовали приложение <strong>SGWorkPass</strong>, которое содержало основную информацию об их статусе занятости. Во время пандемии приложение было расширено, чтобы включить другие данные, в том числе статус Covid других людей в их общежитиях, прошли ли они или пропустили запланированный медосмотр, использовали ли они отведённое им время отдыха. Каждое утро рабочие проверяют приложение, чтобы узнать, можно ли им покидать общежитие.</p> <p>В августе 2020 года полиция добавила новый инструмент, который должен помочь им физически контролировать общежития. Они используют робота <a href=\"https://www.police.gov.sg/media-room/features/fighting-covid-19-with-police-patrol-robots-and-drones\"><u>M.A.T.A.R</u></a> (Multi-purpose All Terrain Autonomous Robot), а также дронов для патрулирования общежитий и обеспечения соблюдения правил «безопасного дистанцирования».</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"445\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/0d4/c99/75e/0d4c9975efd36e8ea410a7feeff444fa.png\" data-width=\"671\"><figcaption></figcaption></figure> <p>В июне 2020 года, когда правительство попыталось привлечь больше населения к подписке на TraceTogether, оно заверило людей, что их данные в безопасности и что они будут использоваться только для отслеживания контактов. Семь месяцев спустя <a href=\"https://www.straitstimes.com/singapore/politics/parliament-police-will-restrict-use-of-tracetogether-data-to-very-serious\"><u>выяснилось</u></a>, что полиция может получить доступ к любым данным и уже использует их  для слежки.</p> <p>В январе 2019 года правительство уже <a href=\"https://www.bbc.com/news/world-asia-47027867\"><u>признавало</u></a>, что имена и адреса 14000 граждан Сингапура и жителей с ВИЧ просочились в сеть. В стране, где гомосексуальные отношения запрещены, это воспринималось как чрезвычайное нарушение доверия. В другом случае<a href=\"https://www.straitstimes.com/singapore/courts-crime/13-prisoners-file-civil-case-against-ag-over-forwarded-personal-letters\"> <u>частная переписка между 13 заключенными</u></a>, приговоренными к смертной казни, и их адвокатами была передана в офис генерального прокурора. Верховный суд тогда постановил, что правительство не может нести ответственность за это нарушение.</p> <p>Иногда данные публикуются намеренно. В декабре 2019 года Совет Центрального фонда обеспечения персонала, который управляет государственной пенсионной системой,<a href=\"https://mothership.sg/2019/12/cpf-reveal-woman-identity/\"> <u>раскрыл имя женщины</u></a>, чьё заявление о том, что её подтолкнули к попытке самоубийства из-за финансовых затруднений, стало вирусным.</p> <p>Эти инциденты рассматриваются как необходимый сопутствующий ущерб в стремлении правительства к повышению эффективности и безопасности. Правительство смогло оправдать сбор и использование данных тем, что это дает им инструменты для улучшения управления. Но оно не установило для себя никаких сдерживающих факторов и противовесов.</p> <p>В сентябре 2021 года агентство <strong>Home Team Science and Technology Agency</strong>, которое разработало роботов M.A.T.A.R, используемых в общежитиях для мигрантов, начало тестирование другой, почти идентичной системы. Роботы под названием <strong>Xavier</strong>, которые выглядят как научно-фантастический реквизит 1970-х годов, квадратные и увенчанные набором камер и датчиков, патрулируют вокруг Тоа Пайо, жилого района в центре Сингапура.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"375\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/211/455/8d0/2114558d04bf82e22a22f7bdbc6c1630.png\" data-width=\"667\"><figcaption></figcaption></figure> <p>Xavier поручено не просто контролировать социальное дистанцирование. Его камеры могут автоматически обнаруживать антиобщественное поведение - как тюремная система <strong>Avatar</strong> - от курения до незаконных продуктовых ларьков и собраний, выкрикивания приказов из динамиков, записи видео и отчетов в штаб-квартиру.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"372\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/0e4/5a1/f18/0e45a1f188337180c426d214831b370d.png\" data-width=\"669\"><figcaption></figcaption></figure>",
        "is_active": true,
        "author": 1,
        "tag": "м.видео",
        "add_datetime": "2021-11-24T10:30:09Z",
        "article_status_new": 4
    }
},
{
    "model": "mainapp.article",
    "pk": 1637747488,
    "fields": {
        "hub": 5,
        "name": "Кардеры-каннибалы: Group-IB выявила крупнейшие сети фейкшопов. Часть 1",
        "image": "https://habrastorage.org/getpro/habr/upload_files/7ab/742/c43/7ab742c43dcb879b86892884392fd456.png",
        "preview": "<figure class=\"full-width \"><img src=\"/img/image-l",
        "text": "<figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"467\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/7ab/742/c43/7ab742c43dcb879b86892884392fd456.png\" data-width=\"1280\"><figcaption></figcaption></figure> <blockquote><p>В этом посте мы впервые исследуем такой пласт андеграунда, как фейковые маркетплейсы по торговле данными банковских карт. Кардинг — это преступление. Торговля данными банковских карт — это преступление. Создание фейковых магазинов, копирующих \"оригинальные\" кардшопы — это также преступление. Мы считаем, что чем глубже изучается индустрия андеграунда, тем больше возможностей для слежения, изучения и борьбы с киберпреступностью.</p><p>Именно поэтому мы впервые публикуем исследование фишинговых ресурсов, копирующих кардшопы. В данном случае под кардшопами мы будем понимать \"оригинальные\" ресурсы по торговле дампами и текстовыми данными банковских карт. Под \"фейкшопами\" — фишинговые ресурсы, копирующие кардшопы. Под пользователями — покупателей краденных данных банковских карт.</p><p>Как вы вероятно уже поняли в этом исследовании нет \"простых пользователей\", ставших \"жертвами\" мошенников. Оно описывает явление \"каннибализма\" в андеграундной среде, когда одни злоумышленники наживаются на других.</p></blockquote> <p>Каждый пользователь интернета регулярно сталкивается с фишинговыми сайтами. И киберпреступники — не исключение. Аналитикам Group-IB Threat Intelligence удалось выявить несколько крупных групп мошенников, которые зарабатывают деньги на начинающих неопытных кардерах, создавая и распространяя фишинговые сайты под кардшопы — подпольные магазины по продаже скомпрометированных платежных данных. Эти сайты аналитики Group-IB называют фейкшопами.</p> <p>Большое количество фейкшопов в сети вызывают проблемы не только у пользователей андеграундных форумов — киберпреступников, но и могут создавать сложности специалистам по киберразведке. Размещенные на них поддельные данные могут привести к появлению ложной статистики при мониторинге и описании кардшопов, а скопированные дизайны оригинальных ресурсов могу ввести в заблуждение даже опытного антифрод аналитика.</p> <p>Как правило, фейкшопы не создаются по одному. Для охвата большего количества пользователей (покупателей украденных данных банковских карт) создатели фейкшопов проводят рекламу на андеграундных форумах, чатах Telegram и обманом заставляют переходить пользователей по своим ссылкам, заставляя создателей оригинальных ресурсов, как не комично бы это звучало, нести репутационные потери, а также объединяют свои сайты в гигантские сети.</p> <p>Аналитики Group-IB Threat Intelligence обнаружили три крупнейшие сети фейкшопов, которые получили названия UniFake, JokerMantey, и SPAGETTI. Последняя — самая крупная из обнаруженных сетей — насчитывает более 3000 доменных имен, многие из которых являются копиями самых популярных кардерских сайтов в андеграунде, таких как: Joker's Stash, BriansClub, Uniсс, Ferum shop, ValidCC и других.</p> <p>Создателям этой сети за все время работы удалось получить не менее 9200 входящих транзакций на различные крипто кошельки, на общую сумму более $1,200,000 (большая часть которых была получена в Bitcoin – 23 BTC по курсу на 12 октября 2021).</p> <p>В отличии от других сетей SPAGETTI также распространяет через свои сайты вредоносное ПО. Создатели этой сети разместили на своих сайта стилер Taurus Project в виде скачиваемого файла, собирая таким образом данные пользователя из браузера, логины и пароли от банковских приложений, и даже крипто кошельков.</p> <p>Специалисты Group-IB изучили как создаются и поддерживаются фейкшоп-сети. В первой части этого материала <strong>Руслан Чебесов, руководитель группы исследования андеграундных маркетов Group-IB</strong>, и<strong> Сергей Кокурин, аналитик андеграундных маркетов Group-IB, </strong>рассказывают, как аналитикам отличить оригинальный кардшоп от фейкового и как провести правильную атрибуцию фейкового ресурса. А в следующем посте, используя систему <a href=\"https://www.group-ib.ru/intelligence-attribution.html\">Threat Intelligence &amp; Attribution</a>, они для примера проведут анализ самых крупных сетей фейкшопов.</p> <h2>Что такое фейкшопы?</h2> <p>В андеграундной сфере интернета существуют ресурсы для торговли скомпрометированной информацией, такой как данные кредитных или дебетовых карт, доступов к аккаунтам пользователей, доступов к компьютерам через порты RDP или SSH, паспортные или идентификационные данные граждан разных стран, доступов к серверам и панелям управления сайтов и т.д.</p> <p>Эти ресурсы называются \"андеграундные маркеты\".</p> <p>Основная особенность таких маркетов — большое количество продавцов на ресурсе. Сами площадки являются аналогами Amazon или Ebay только на теневой стороне интернета.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Скриншот главной страницы Amigos market\" title=\"Скриншот главной страницы Amigos market\" height=\"690\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/3ba/fbf/884/3bafbf884703b4a3c5de99ddca7ebf57.png\" data-width=\"1653\"><figcaption>Скриншот главной страницы Amigos market</figcaption></figure> <p>Кардшопы — это частные случаи маркетов. Здесь продаются похищенные данные банковских карт в виде текстовых данных с самой карты, либо в виде дампов — сохраненной копии информации с магнитной полосы. Обычно других видов продаваемых скомпроментированных данных на кардшопах не встречается.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Раздел поиска по картам кардшопа Bestvalid\" title=\"Раздел поиска по картам кардшопа Bestvalid\" height=\"870\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/651/fd4/2d5/651fd42d5fe7e55e5bc9e48c44905a21.png\" data-width=\"1755\"><figcaption>Раздел поиска по картам кардшопа Bestvalid</figcaption></figure> <p>Кардшопы и маркеты – основные ресурсы для мелких мошенников, занимающихся кардингом, скамом, спамом и другими подобными видами киберпреступлений.</p> <p>Кардинг — мошенничество с банковской картой — является одной из самых простых форм мошенничества, не требующей от преступника дополнительной подготовки, кроме базовых навыков работы с компьютером. Низкий порог входа в эту \"индустрию\" создает высокий спрос на услуги кардшопов и маркетов.</p> <p>Собственно, высокий спрос и низкий уровни грамотности начинающих кардеров создает идеальные условия для мошенников, зарабатывающих на создании фейкшопов — сайтов, которые выдают себя за работающие кардшопы или андерграундные маркеты. Самая главная задача – создать иллюзию настоящего ресурса, для того чтобы попавший на сайт пользователь захотел оставить на нём свои деньги. Дополнительно для этого могут использоваться названия существующих андеграундных ресурсов или даже полностью копироваться дизайн их страниц.</p> <p>В случае с настоящими кардшопами и маркетами, пользователю сначала необходимо внести деньги на свой аккаунт, чтобы потом использовать эти средства для покупки скомпрометированных данных. Распространенной практикой среди кардшопов также является платная активация аккаунта, для этого после регистрации пользователю необходимо заплатить от $20 до $200. Фейкшопы пользуются этими устоявшимися системами предварительной оплаты услуг, чтобы вводить в заблуждение кардеров.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Пример активации аккаунта на маркете Amigos\" title=\"Пример активации аккаунта на маркете Amigos\" height=\"342\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/62a/3fd/05c/62a3fd05cdfbd42fa0fcf9b47c21284c.png\" data-width=\"696\"><figcaption>Пример активации аккаунта на маркете Amigos</figcaption></figure> <h4>Все фейкшопы можно разделить на три вида:</h4> <ol><li><p><strong>Создает видимость нового кардшопа или маркета.</strong> Это самый простой способ обмана. В этом случае злоумышленник создает ресурс, который элементами дизайна на сайте создаёт впечатление кардшопа или маркета: списки баз с товаром, корзина, новости и обновления, система поддержки и т.д. Также для самого названия и доменного имени используются устоявшиеся слова и сокращения: \"cc\", \"dump\", \"cvv\", \"shop\", \"carding\", \"pin\", \"swipe\", \"sniff\", \"money\" и другие.</p><figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Скриншот фейкшопа cvvunion\" title=\"Скриншот фейкшопа cvvunion\" height=\"631\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/a65/0c0/649/a650c0649373878d02df3e343d30fda7.png\" data-width=\"1601\"><figcaption>Скриншот фейкшопа cvvunion</figcaption></figure></li><li><p><strong>Создание фишингового ресурса, имитирующего оригинальный кардшоп. </strong>Для этого злоумышленники создают сайты с доменным именем, напоминающим оригинал, изменяют расположение букв или слов в названии, добавляют сокращения, делают специальные ошибки или добавляют что-то из фраз из пункта выше. Для дальнейшего введения в заблуждение злоумышленники могут скопировать дизайн оригинального сайта: html код, css стили и картинки. Это несложная задача, однако она увеличивает доверие жертвы к правдоподобности такого ресурса для неопытного пользователя.</p><figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Скриншот главной страницы фейкшопа Unicc, полностью копирующий оригинал\" title=\"Скриншот главной страницы фейкшопа Unicc, полностью копирующий оригинал\" height=\"488\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/aa0/c82/c36/aa0c82c3639afbfe5d7d35f7459a040b.png\" data-width=\"1266\"><figcaption>Скриншот главной страницы фейкшопа Unicc, полностью копирующий оригинал</figcaption></figure></li><li><p><strong>\"Захват\" доменного имени настоящего кардшопа или маркета.</strong> Это один из самых сложных для реализации вариантов создания фейкшопа. Для этого злоумышленниками необходимо выкупить доменное имя, когда-то принадлежавшее кардшопу или маркету. Это вполне реально, если владельцы сайта не успели оплатить аренду доменного имени регистратору, либо их доменный адрес был разделегирован по какой-либо причине. В таком случае на фейкшоп попадают пользователи, ранее уже посещавшие ресурс по этой ссылке.</p><p>Такими примерами являются захват доменов unicc[.]cm и briansclub[.]ru. Как мы видим, заподозрив обман, возмущенные пользователи присылают сообщения администрации оригинальных кардшопов. Зачастую админам приходится дополнительно информировать своих пользователей о смене доменного имени.</p><figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Сообщение на форуме altenens[.]org. Источник: Group-IB Threat Intelligence &amp; Attribution\" title=\"Сообщение на форуме altenens[.]org. Источник: Group-IB Threat Intelligence &amp; Attribution\" height=\"463\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/5d2/584/165/5d258416588f120c97374928d0849c53.png\" data-width=\"1504\"><figcaption>Сообщение на форуме altenens[.]org. Источник: Group-IB Threat Intelligence &amp; Attribution</figcaption></figure><p>Как следует из сообщения администратора BriansClub, показанного на скриншоте ниже, домен briansclub[.]ru ранее принадлежал его кардшопу. Однако в данный момент там размещен фейкшоп</p><figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Сообщение на форуме omerta. Источник: Group-IB Threat Intelligence &amp; Attribution\" title=\"Сообщение на форуме omerta. Источник: Group-IB Threat Intelligence &amp; Attribution\" height=\"635\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/9f0/1e0/e17/9f01e0e17ccb02cb81296e3c741c0f5a.png\" data-width=\"1254\"><figcaption>Сообщение на форуме omerta. Источник: Group-IB Threat Intelligence &amp; Attribution</figcaption></figure></li></ol> <p>На андеграундных форумах можно часто заметить темы и сообщения со списком фейкшопов. Так посетители форумов пытаются бороться с рекламой фишинговых ресурсов.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Сообщение на форуме crdclub[.]ws. источник: Group-IB Threat Intelligence &amp; Attribution\" title=\"Сообщение на форуме crdclub[.]ws. источник: Group-IB Threat Intelligence &amp; Attribution\" height=\"685\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/b06/c65/421/b06c65421138b975a174d37b8911eedc.png\" data-width=\"1580\"><figcaption>Сообщение на форуме crdclub[.]ws. источник: Group-IB Threat Intelligence &amp; Attribution</figcaption></figure> <p>Нередко можно встретить сообщения от обманутых кардеров на разных форумах, как на скриншоте ниже, где пользователь внес деньги на счёт в маркете, но так и не дождался возможности приобрести желаемые \"услуги\".</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Скриншот с форума carder[.]uk\" title=\"Скриншот с форума carder[.]uk\" height=\"305\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/966/e31/f27/966e31f27f2de0bf61e619c6a1694649.png\" data-width=\"1118\"><figcaption>Скриншот с форума carder[.]uk</figcaption></figure> <p>А некоторые владельцы ресурсов, стремясь избежать потери аудитории и репутации, даже указывают список фейкшопов, маскирующихся под них, на своём ресурсе.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Скриншот страницы авторизации маркета Valcc\" title=\"Скриншот страницы авторизации маркета Valcc\" height=\"425\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/e2c/5e1/557/e2c5e15576f65f822c4943d932a4669f.png\" data-width=\"1095\"><figcaption>Скриншот страницы авторизации маркета Valcc</figcaption></figure> <p>Выявить настоящий это ресурс или фейковый зачастую не просто. Так же как и создатели обычных фишинговых веб-страниц, владельцы фейкшопов стараются как можно точнее копировать оригинал. Сравним страницу авторизации реального Ferum-shop и его фейка:</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"1113\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/382/7f9/e1c/3827f9e1c3f3d23aaef968362afe5b6e.png\" data-width=\"1022\"><figcaption></figcaption></figure> <p>Визуально отличия почти не заметны, например, рекламные баннеры скопированы полностью. Однако, можно обратить внимание на разные системы капчи на оригинале и фейке (выделены красным). Также неправильно перенесены дизайны панелей (выделено зеленым) и кнопок (выделено синим).</p> <p>Такие различия могут легко ввести в заблуждение неопытного пользователя, особенно, когда создатели фейкшопа Ferum-Shop активно рекламируют на форумах срочную \"смену\" доменного имени маркета.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Сообщение на форуме sky-fraud[.]ru. Источник: Group-IB Threat Intelligence &amp; Attribution\" title=\"Сообщение на форуме sky-fraud[.]ru. Источник: Group-IB Threat Intelligence &amp; Attribution\" height=\"436\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/eff/da1/404/effda14044859dfcd951e314a3dcebcf.png\" data-width=\"1573\"><figcaption>Сообщение на форуме sky-fraud[.]ru. Источник: Group-IB Threat Intelligence &amp; Attribution</figcaption></figure> <p><em>Продолжение следует. </em></p> <h2>Дисклеймер</h2> <ol><li><p><em>Целью настоящего исследования является предоставление сведений о способах совершения противоправных деяний для привлечения внимания государственных регуляторов, соответствующих уполномоченных органов, а также для минимизации риска дальнейшего совершения таких противоправных деяний, их своевременного пресечения и формирования у пользователей должного уровня правосознания.</em></p></li><li><p><em>Выводы, содержащиеся в настоящем исследовании, сделаны в результате анализа специалистами Group-IB информации, полученной из открытых источников, а также ни в какой ее части не являются официальной позицией компетентных органов, в том числе правоохранительных любой юрисдикции. Сведения, ставшие публично известными до выпуска настоящего исследования, указаны в первоначальном неизреченном виде. Исследование не содержит прямых обвинений в совершении преступлений и иных противоправных действий и носит аналитический характер.</em></p></li><li><p><em>Настоящее исследование подготовлено в информационных и ознакомительных целях и не может использоваться читателем в коммерческих и иных, не связанных с образованием или личным некоммерческим использованием целях.</em></p></li><li><p><em>Исследование является объектом авторского права и охраняется нормами права в области интеллектуальной собственности.</em></p></li></ol>",
        "is_active": true,
        "author": 1,
        "tag": "информационная безопасность",
        "add_datetime": "2021-11-24T10:39:09Z",
        "article_status_new": 4
    }
},
{
    "model": "mainapp.article",
    "pk": 1637747491,
    "fields": {
        "hub": 4,
        "name": "Арт из клавиш списанных клавиатур",
        "image": "https://habrastorage.org/getpro/habr/upload_files/c31/d78/4a0/c31d784a08837e89b4e42d2d839d136d.jpg",
        "preview": "<figure class=\"full-width \"><img src=\"https://habr",
        "text": "<figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/c31/d78/4a0/c31d784a08837e89b4e42d2d839d136d.jpg\" width=\"4032\" height=\"1960\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/c31/d78/4a0/c31d784a08837e89b4e42d2d839d136d.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>Насобирал много клавиатур, т.к. давно замыслил сделать панно из клавиш. Однако оказалось, что каждая клавиатура у меня - это целая история. С помощью этих клавиатур делались игры и софт, набирались статьи в газеты и журналы. Многим по 10, 20 и даже 30 лет. И решил я делать из клавиатур паттерны, которые связанны по духу с теми, кто их использовал.</p> <p>Отмываю, дезинфицирую и превращаю в картинку. Все клавиши будут участвовать в изображении. Ни одной лишней, но и ни одна не потеряется. Такой вот челлендж.</p> <p>Клавишный Pixel Art отличается от обычного из-за разных размеров и форм клавиш. Еще клавиши можно сдвигать, и смотрится это аутентично, т.к. на самих клавиатурах клавиши со сдвигом. А еще клавиши характерны не только формой, но и содержанием. И это отдельная тема - расположить их так, чтобы надписи на клавишах сочетались прикольно.</p> <h2>#0</h2> <p>Несколько лет назад подошел срок моей клавиатуре, на которой проработал более 10 лет. Чего только я не набирал на ней. Десятки тысяч строк кода на многих языках программирования. Свою книжку. Сообщения и письма людям. Некоторых уже нет в живых. Клавиатура принимала во всем этом механическое участие. Пусть она и не помнит этого, зато помню я. И пришло решение превратить клавиатуру в кота.</p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/2f0/3b5/c75/2f03b5c7513ea50dfa6fef84cd310ba2.jpg\" width=\"1436\" height=\"1284\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/2f0/3b5/c75/2f03b5c7513ea50dfa6fef84cd310ba2.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>Клавиши имеют разную высоту, что придает изображению определенный шарм, на мой взгляд. С технологией особо не заморачивался. Нашел кусок пластикового сайдинга, собрал и склеил. Процесс оказался кропотливый — на много часов.</p> <p>Теперь мой клавишный кот перемещается со мной из квартиры в квартиру, всегда занимая пусть и не самое, но видное место.</p> <h2>#1</h2> <p>Месяц назад неожиданно образовался отпуск. Посмотрел я тогда на запасы клавиатур на балконе и решил сделать серию работ. Прикинув время, запланировал пять штук.</p> <p>Первая: GEMBIRD KB-8352U. Очень приятный дизайн у клавиатуры. Выполнен голландской компанией Gembird. Светлые, тонкие клавиши. Есть клавиши, отличающиеся размером от основных на 25%, 50%, 100% и так далее до пробела. А еще есть Enter.</p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/9ae/df3/b9d/9aedf3b9ddbf03f3cef18ae3a154b492.jpg\" width=\"1614\" height=\"911\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/9ae/df3/b9d/9aedf3b9ddbf03f3cef18ae3a154b492.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/99a/8f7/d6f/99a8f7d6fb2fb41ed77556223aedf305.jpg\" width=\"1870\" height=\"980\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/99a/8f7/d6f/99a8f7d6fb2fb41ed77556223aedf305.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>Клавиатура из редакции газеты, которой уже нет. Клавиатура лежала несколько дней на видном месте. Ходил, смотрел, на что похожи её клавиши. На собачку. Собрал эскиз на подоконнике и еще несколько дней регулярно подходил и вносил правки. </p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/f28/73a/ef4/f2873aef4bda7ebbfd05e6edf47b0446.jpg\" width=\"1289\" height=\"825\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/f28/73a/ef4/f2873aef4bda7ebbfd05e6edf47b0446.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>В результате получилось суперски, на мой взгляд. Некоторые клавиши прям к месту расположились. У собаки есть кличка. Даже две. Причем, на английском и русском языках.</p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/76c/768/b75/76c768b75b06bb1c21e3387130762fc2.jpg\" width=\"782\" height=\"812\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/76c/768/b75/76c768b75b06bb1c21e3387130762fc2.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>Собранную картинку поставил к стене противоположной окну. Захожу как-то утром в гостиную, а на меня со стены кто-то смотрит. Оказалось, что такое прикольное отражение дает рамка с клавишами, т.к. они приклеены поверх стекла. Двойной арт получился.</p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/716/901/aef/716901aef71ae012bf809c7f8d314e4c.jpg\" width=\"1440\" height=\"1440\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/716/901/aef/716901aef71ae012bf809c7f8d314e4c.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <h2>#2</h2> <p>В отличие от прошлой клавиатуры, за которой работали хрупкие журналистки, на этой 20 лет назад работали хмурые сисадмины. Это клавиатура UNIKEY KWD-820. Надежная, удобная. Многие до сих пор на ней работают через переходник PS/2 - USB.</p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/eb8/f69/431/eb8f69431c568a4b0587536cfcab9b8d.jpg\" width=\"1440\" height=\"1113\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/eb8/f69/431/eb8f69431c568a4b0587536cfcab9b8d.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>Интересная особенность - тонкие функциональные клавиши. Поэкспериментировав, сделал из них позвоночник, пальцы левой руки и сочленение на правой. Существо у меня 10-ти позвоночное. Еще эта клавиатура поддерживала специальные клавиши Windows 98. Сделал из них лезвие топора. Неожиданно понравился цветастый фон. Как вам?</p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/051/9b5/ee1/0519b5ee10b98c7a4e2b98f8eb0dafae.jpg\" width=\"1440\" height=\"1113\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/051/9b5/ee1/0519b5ee10b98c7a4e2b98f8eb0dafae.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>Не смотря на то, что паттерн плоский, картинка получается объемная. Это особенно заметно на клавиатурах с высокими клавишами. Изображение не выглядит нарисованным. Оно будто из материального мира. Топор, например, создает ощущение, что его можно прямо взять в руку.</p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/644/57b/3cf/64457b3cf655d8064763e5113e6a39f8.jpg\" width=\"1440\" height=\"1112\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/644/57b/3cf/64457b3cf655d8064763e5113e6a39f8.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>Как обычно я «зашифровал» несколько слов в клавиши. Почему-то это доставляет отдельное удовольствие - оставлять скрытые послания.</p> <p>После нескольких облачных дней утром снова выглянуло солнце, и по стене за собачкой погнался странный чувак. Такое неожиданное шоу. </p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/ea3/75d/190/ea375d19082804e237dc2f7829495b85.jpg\" width=\"1440\" height=\"1243\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/ea3/75d/190/ea375d19082804e237dc2f7829495b85.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <h2>#3</h2> <p>Из клавиатуры SVEN Standart 301 собрал вот такой Micro QR-код. Использовалась в бухгалтерии одного ТЦ. Цифры на Numpad-е стерты почти полностью. Но сильнее всего - клавиша Backspace: видимо, много цифр исправляли бухгалтера.</p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/aab/065/820/aab06582081036cf7ba2104dad516d63.jpg\" width=\"1891\" height=\"1419\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/aab/065/820/aab06582081036cf7ba2104dad516d63.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/050/095/d22/050095d22085868a75be00e12c924ec0.jpg\" width=\"2105\" height=\"1419\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/050/095/d22/050095d22085868a75be00e12c924ec0.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>Сейчас, чтобы пройти в этот ТЦ и другие места, нужно предъявить QR-код, который добывается в том числе с помощью инъекции. Способ получения, сам QR-код и блеск бутиков, в которые можно попасть, я и попытался представить на этом паттерне.</p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/c9e/121/f2d/c9e121f2ded188136ff56b1139a12ff3.jpg\" width=\"1260\" height=\"980\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/c9e/121/f2d/c9e121f2ded188136ff56b1139a12ff3.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>Подложка из позолоченного кожзама под стеклом прикольно блестит на свету.</p> <h2>#4</h2> <p>Когда сдаешь игру издателю в срок, то, бывает, приходится допиливать код до утра. На улице уже начинает светать, и небо приобретает приятный синий оттенок. Фон сделал именно таким цветом.</p> <p>Усталость наваливается на программеров, однако баги должны быть зафиксины. Выйдя в коридор большого пустого офисного центра в этот предрассветный час, много чего можно увидеть. Например, такое привидение.</p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/5b5/cf6/d31/5b5cf6d31d01726f763d486fdb8a79bb.jpg\" width=\"1280\" height=\"978\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/5b5/cf6/d31/5b5cf6d31d01726f763d486fdb8a79bb.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>Для этого паттерна использовались две клавиатуры, за которыми когда-то давно работали программисты. В черной отвалилась и потерялась клавиша F10. Press F10 to pay respect. Все остальные клавиши были тут использованы.</p> <h2>Игра</h2> <p>Press any Key to Adventure - сделанная вручную игра в жанре Puzzle Adventure. Платформы: Desktop/Mobile/Watch. Такое могло бы быть описание.</p> <p>Представьте человека, который берет в руки клавиатуру, и у него возникают образы историй, написанных на ней. Такая сверхспособность. Если эта клавиатура была в редакции газеты, то человек видит репортажи. Если писатель набирал книгу, то человек видит ее сюжет. А может быть мужчина и женщина познакомились, переписываясь в мессенджерах. Возникли чувства. А потом женщина внезапно пропала, и мужчина не получал ответа, сколько бы ни писал.</p> <p>Человек (главный герой игры) может восстановить картину происходящего, если ему принести клавиатуры. Образы складываются в сцены-загадки, сделанные из клавиш. Разгадаешь последовательность загадок - решишь дело.</p> <p>Главный герой занимается только самыми таинственными и сложными делами. Mystery Keys Files.</p> <p>Все сцены в игре делаются вручную из клавиш. Сверху накладываются подписи и интерфейсные элементы. Анимация из клавиш хорошо смотрится при 10fps. Игру света/тени можно делать уже 60fps.</p> <div class=\"tm-iframe_temp\" data-src=\"https://embedd.srv.habr.com/iframe/619dee46abb378f6450d1ab8\" data-style=\"\" id=\"619dee46abb378f6450d1ab8\" width=\"\"></div> <p>Фон может быть из разных материалов разного цвета и текстуры. Прикольно будет смотреться толстое стекло поверх голубого картона. Как будто лед.</p> <p>Играя наклоном камеры, можно добиваться интересных эффектов ощущения масштаба.</p> <p>Свет - еще одно мощное выразительное средство. Если сцена в кабинете, то можно поставить свечу при записи анимации. Это даст атмосферную игру света/тени.</p> <p>Типы заданий в одной сцене могут быть, как минимум, двух типов. Наборы клавиш характеризуются не только формой, но и содержанием. Иногда нужно «набрать» слово на клавишах. Это может быть действие или предмет, который будет добавлен в инвентарь. А иногда можно выбрать саму форму, образованную из клавиш.</p> <p>Также можно делать прикольные мини-игры. Получается Puzzle Adventure игра. Ух, сколько я их сделал в свое время. Но тут уникальный арт-стиль, который своей спецификой определяет и геймплей.</p> <p>Интересная идея? Как разработчику игр (пусть и в отпуске) мне не могла не прийти идея сделать такую игру. Чтобы попробовать сделать анимацию, собрал на коленке такой стенд:</p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/a18/01d/31a/a1801d31ad09a04fc7eca5e2bbad8029.jpg\" width=\"1307\" height=\"980\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/a18/01d/31a/a1801d31ad09a04fc7eca5e2bbad8029.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>Пробовал разные варианты. Стало понятно, что интересную картинку сделать можно, однако надо потратить гораздо больше времени. Одному мне такой проект не потянуть. Перед тем как даже демку сделать, нужно провести RnD этап. Необходимо точно определить возможности стиля и технологий записи видео. Если бы вдруг нашелся заинтересованный ивестор/издатель, то можно было бы попробовать. Прессе наверняка зашел бы такой стиль, что дало бы некоторый первоначальный трафик.</p> <h2>Преформанс</h2> <p>Решил устроить NFT-перформанс - записать свои паттерны из ретро-клавиш прямо в блокчейн. Каждый паттерн у меня собран ровно из всех клавиш одной клавиатуры. Поэтому один паттерн - одна единица криптовалюты. Каждая клавиша - один криптоцент/криптокопейка.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"470\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/3ed/b6e/338/3edb6e33812caa198c97ed797c14a8e6.gif\" data-width=\"627\"><figcaption></figcaption></figure> <p>Такая репрезентация моего проекта на NFT-площадке. Вполне себе современное крипто-искусство, я считаю. Установил в настройках, чтобы у каждой клавиши/паттерна мог быть один и только один владелец. Можно копировать существ, однако исходный паттерн уникален. Вот он: висит у меня на стене. Ликвидность цифрового имущества (клавиш) на лицо.</p> <p>Мой перформанс - это лишь форма имплементационного выражения проекта в блокчейне. Если более кратко - просто шутка. Прошу так и относиться. Просто не мог не попробовать новую технологию. В данном случае почему-то захотелось потроллить NFT.</p> <h2>#5</h2> <p>В последней работе в серии я планировал попробовать выйти в 3d – превратить пиксели в воксели. Поэкспериментировать с многослойными структурами. Это оказалось непросто.</p> <p>Из двух клавиатур редакторов криминальной хроники можно сделать композицию \"Ожесточенные сердца\". Черное и белое переплетено в жизни.</p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/703/838/4c0/7038384c0f1df5b35e5bf10048127c53.jpg\" width=\"2048\" height=\"1371\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/703/838/4c0/7038384c0f1df5b35e5bf10048127c53.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>Объем вживую смотрится очень даже интересно. Однако сама композиция не складывается. Наклон клавиш смотрится, на мой взгляд, уже не так аутентично. Тем более, ночью кошка разломала композицию.</p> <p>Пробую другие варианты. Из медиа клавиш можно сделать кромку кинжала, например.</p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/416/8fe/01a/4168fe01ad509cef74bbc92d7e7cb4a3.jpg\" width=\"1098\" height=\"832\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/416/8fe/01a/4168fe01ad509cef74bbc92d7e7cb4a3.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <h2>Заключение</h2> <p>Отпуск подошел к концу. Забавное погружение в необычную тему я себе устроил. Столько мелкой моторики у меня не было, наверное, никогда. Да и цена ошибки высока. Заденешь пальцем случайно — и картинка поплыла. Клавиши не цепляются друг к другу как кусочки лего.</p> <p>Финальная склейка — это отдельная история. К примеру, Привидение (готовую картинку) я приклеивал на стекло 5 часов.</p> <p>Различные фото процесса и результаты выкладывал и буду выкладывать в инсту. Если вас заинтересовала тема, то напишу в комментариях или личном сообщении аккаунт (специально сделал под проект).</p> <p>В результате у меня появилось четыре новых работы, радующих глаз. Плюс одна недоделанная работа. Плюс идея игры. Вполне неплохо.</p> <p>Возможно некоторые работы понравятся и вам. Буду рад.</p> <p>Спасибо!</p>",
        "is_active": true,
        "author": 1,
        "tag": "клавиатуры",
        "add_datetime": "2021-11-24T11:18:09Z",
        "article_status_new": 4
    }
},
{
    "model": "mainapp.article",
    "pk": 1637747493,
    "fields": {
        "hub": 3,
        "name": "Однократные подписки",
        "image": "https://habrastorage.org/getpro/habr/upload_files/72e/09a/442/72e09a442d08110d5a2f116916f1b673.png",
        "preview": "<figure class=\"\"><img src=\"/img/image-loader.svg\" ",
        "text": "<figure class=\"\"><img src=\"/img/image-loader.svg\" height=\"480\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/72e/09a/442/72e09a442d08110d5a2f116916f1b673.png\" data-width=\"480\"><figcaption></figcaption></figure> <p>При создании разных сервисов очередей часто возникает вопрос: «А как лучше  реализовать систему уведомлений о событиях в очереди?» Она часто бывает сложнее в реализации, нежели сам сервис очереди. Система распространения уведомлений встречается во многих программных комплексах. Как правило, клиентов у таких систем немного: десятки, реже — сотни.</p> <p>Давайте обсудим способы построения таких систем в случаях, когда клиентов не сотни, а сотни тысяч.</p> <hr> <p>Предположим, что нам надо построить сервис, способный уведомить множество подписчиков. Причём это множество достаточно велико — десятки или сотни тысяч на экземпляр.</p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/4e7/745/b17/4e7745b17fec3cab8820871780351f6c.jpg\" width=\"878\" height=\"292\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/4e7/745/b17/4e7745b17fec3cab8820871780351f6c.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>Какие проблемы нас ожидают при решении этой задачи?</p> <p><strong>Клиентская сторона</strong>:</p> <ul><li><p>Клиент должен иметь информацию о том что происходит на сервере:</p><ul><li><p>консистентно;</p></li><li><p>с минимально возможной задержкой.</p></li></ul></li><li><p>Среди тысяч клиентов обязательно будут быстрые и медленные, работающие и зависающие.</p></li></ul> <p><strong>Серверная сторона</strong>:</p> <ul><li><p>Система уведомлений клиента X не должна зависеть от скорости канала у клиента Y.</p></li><li><p>Система уведомлений вообще не должна зависеть от скоростей клиентов (обобщение предыдущего пункта).</p></li></ul> <p>Если порефлексировать над этими проблемами, то можно понять, какие обязательные свойства будут у системы доставки событий от сервера к клиенту. А вариативность остальных свойств даст нам множество решений.</p> <h3>Требования к системе</h3> <p>Итак, обязательные свойства:</p> <ul><li><p>Система доставки событий должна записывать отправляемые события в буфер (а не сокет). Запись в память даст максимальную производительность и предотвратит блокировку записывающего.</p></li></ul> <p>Вариативные свойства:</p> <ul><li><p>Либо: Клиент должен получать <strong>все</strong> отправляемые ему сообщения вне зависимости от скорости канала.</p></li><li><p>Либо: Клиент должен уметь диагностировать разрыв соединения и восстанавливать консистентность своего состояния после сбоя.</p></li></ul> <h3>Поиск вариантов</h3> <h4>Резиновая очередь</h4> <p>Рассмотрим первый из вариантов. В общем случае, с учётом обязательных свойств это можно реализовать при помощи «резинового» буфера (или очереди неограниченных размеров). Недостатки этого подхода очевидны:</p> <ul><li><p>При наличии медленных клиентов растёт потребление памяти системой передачи сообщений.</p></li><li><p>При наличии хотя бы одного клиента, который всегда (на протяжении очень длительного времени) не справляется с передаваемым ему потоком сообщений, мы гарантированно придём к тому, что в гости к системе постучится ООМ-киллер.</p></li></ul> <h4>Очередь фиксированного размера</h4> <p>Первое, что приходит в голову, это ограничение размера очереди. Но если мы его вводим, то должны сразу предусматривать протокол действий при переполнении буфера (или очереди). Пример алгоритма работы сервера может быть приблизительно таким:</p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/c0d/966/af0/c0d966af057a368d3f0ce156deeaeee5.jpg\" width=\"860\" height=\"376\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/c0d/966/af0/c0d966af057a368d3f0ce156deeaeee5.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>Если обнаруживается переполнение буфера, то он очищается, при этом сохраняется пометка об этом событии. Клиент реализует примерно такой алгоритм:</p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/4d2/88a/4ef/4d288a4ef761d0dad3affffd9219bf56.jpg\" width=\"678\" height=\"583\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/4d2/88a/4ef/4d288a4ef761d0dad3affffd9219bf56.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>Этот алгоритм подписки требует устойчивости клиента к повторной обработке события (идемпотентность).</p> <h3>Реальные приложения</h3> <p>Если мы рассмотрим реальные приложения, то увидим такую ситуацию:</p> <blockquote><p>Крайне редко через канал связи pub/sub передаются сами данные. В основном передаётся самый минимум данных.</p></blockquote> <p>Если это чат, то через канал уведомлений передаётся информация о появлении новых сообщений в таком-то чате, об изменении пользователем своего статуса и т.д. Если это подписка-репликация, то по каналу уведомлений передаются номера последних изменённых сообщений и другая информация.</p> <p>В некоторых случаях по каналу уведомлений передаются <strong>все</strong> данные, но, как правило, это сделано потому, что данных очень мало. И даже тогда предусматривается режим восстановления состояния с нуля: канал может быть разорван, клиент или сервер быть перезапущен, и т.п.</p> <h4>Передача состояния</h4> <p>Множество приложений с архитектурой pub/sub передают через систему уведомлений не сообщения, а некое состояние. Вернее, при помощи сообщений передаётся информация о состоянии сервера. Например:</p> <ul><li><p>Сервер присылает сообщение «на сервере 40 заказов».</p></li><li><p>Клиент сверяет со своим «у меня 38 заказов, надо получить ещё два».</p></li></ul> <p>Или:</p> <ul><li><p>Сервер присылает сообщение «клиент отправил сообщение в чат XXX и в нём стало YYY сообщений».</p></li><li><p>Клиент сверяет со своим «мой клиент смотрит в чат XXX?». И если смотрит, то «сколько у моего клиента сообщений в чате XXX?».</p></li></ul> <p>Редко когда архитектуру передачи уведомлений нельзя свести к передаче состояния. Обычно, если это не сделано, то, во-первых, это можно сделать. А во-вторых, если это сделать, то, скорее всего, система станет лучше (повысится производительность, отзывчивость и т.д.).</p> <p>Однако мы отвлеклись. Итак, давайте выпишем проблемные вопросы системы передачи сообщений, когда через неё передаются именно уведомления. В частности, уведомления об изменении состояния.</p> <p><strong>Проблема 1</strong>: Батчинг сообщений.</p> <p>Часто встречается, особенно при интеграции разнородных систем. Сервер загружает CRON-скриптом с другого сервера 100500 данных, а в систему уведомлений приходит большой пакет событий, который переполняет рассмотренные выше буферы.</p> <p><strong>Проблема 2</strong>: Клиент медленнее сервера.</p> <p>Встречается не так редко. Клиент не успевает обрабатывать весь поток сообщений с сервера. В этом случае обычно стремятся к тому, чтобы клиент обрабатывал сообщения в режиме батчинга либо периодически полностью перевостанавливал своё состояние.</p> <p>Примечание: «медленный клиент» может означать как недостаток вычислительной мощности на клиенте, так и низкую пропускную способность канала к нему.</p> <p><strong>Проблема 3</strong>: Большой объём памяти, требуемый для буферов между клиентом и сервером (следствие проблемы 1 и иногда 2).</p> <p>Если мы будем рассматривать все эти проблемы, то увидим, что <strong>поскольку код восстановления после переполнения буфера всё равно необходим</strong>, и для медленных клиентов чем больше буфер, тем хуже, то неизбежно придём к выводу, что <strong>систему уведомлений можно редуцировать до буфера с размером 1</strong>. То есть вариант «Отписываемся при каждом отправлении сообщения в канал». Алгоритм работы сервера получается таким:</p> <figure class=\"\"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/a69/c41/186/a69c411868199eead7b61d439c493ff4.jpg\" width=\"266\" height=\"227\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/a69/c41/186/a69c411868199eead7b61d439c493ff4.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>Алгоритм работы клиента:</p> <figure class=\"\"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/70d/3ff/74f/70d3ff74f48696b67dbfcab0d838e916.jpg\" width=\"356\" height=\"229\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/70d/3ff/74f/70d3ff74f48696b67dbfcab0d838e916.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>Если протокол между клиентом и сервером асинхронный, то, памятуя о паттерне «передача состояния», можем написать такой алгоритм обработки запроса <code>subscribe</code> на сервере:</p> <figure class=\"\"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/556/c5a/c4a/556c5ac4a353062510dba243f2d3227a.jpg\" width=\"356\" height=\"290\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/556/c5a/c4a/556c5ac4a353062510dba243f2d3227a.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>А алгоритм обслуживания серверного <code>push</code> будет таким:</p> <figure class=\"\"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/bc1/557/80f/bc155780fa3a47b005774b4e5f809b6f.jpg\" width=\"326\" height=\"358\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/bc1/557/80f/bc155780fa3a47b005774b4e5f809b6f.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>То есть:</p> <ul><li><p>Клиент отправляет запрос «подписаться».</p></li><li><p>В ответ получает текущее состояние.</p></li><li><p>Получает информацию о произошедшем событии.</p></li><li><p>Переподписывается.</p></li></ul> <figure class=\"\"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/8b0/159/6c2/8b01596c271e3b60825e2f163a8e0013.jpg\" width=\"517\" height=\"779\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/8b0/159/6c2/8b01596c271e3b60825e2f163a8e0013.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>Данные, передаваемые при изменении состояния, не имеют большого значения, поскольку на момент их получения клиент де-факто отписан от наблюдения за состоянием.</p> <h3>Ещё оптимизируем</h3> <p>Если сервер между переподписками клиента будет хранить статус изменения состояния в период отключенности клиента, то можно сэкономить дополнительный запрос состояния. Но эта оптимизация доступна только в случае, когда мы можем контроллировать разницу между:</p> <ul><li><p>клиент не переподписывается, потому что обрабатывает состояние;</p></li><li><p>клиент не переподписывается, потому что отключился.</p></li></ul> <p>Если между клиентом и сервером установлено постоянное соединение (например, TCP), то эта разница легко диагностируется: TCP установлен, значит клиент в порядке.</p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/305/a93/dcd/305a93dcd53bea8564dfba43f3848d97.jpg\" width=\"671\" height=\"1142\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/305/a93/dcd/305a93dcd53bea8564dfba43f3848d97.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>Достоинства получившейся схемы доставки уведомлений:</p> <ul><li><p>Схема крайне хорошо переносит “батчинг”.</p></li><li><p>Схема максимально толерантна к медленным клиентам.</p></li></ul> <p>Недостатки:</p> <ul><li><p>Схема оптимизирована именно под передачу состояния. Передача просто потока уведомлений ложится в схему плохо.</p></li></ul> <h3>Request-Response?</h3> <p>Схема очень похожа на обычную пару запрос-ответ. Отличие в том, что сервер между запросами «помнит» о подписывавшихся клиентах, и на основании этого ответ может быть как выдан сразу, так и задержан.</p> <h3>Tarantool</h3> <p>Традиционно в Tarantool pub-sub подписки делались следующим образом: клиент выполнял запрос <code>subscribe</code>, который «задерживался» до появления события или до таймаута. Классический long-polling. На сервере при этом «ожидала» события хранимая процедура, со всеми связанными с её запуском накладными расходами. Какие недостатки у такого подхода?</p> <ul><li><p>На сервере есть поток, ожидающий событие.</p></li><li><p>На клиенте есть поток, ожидающий ответ на запрос.</p></li></ul> <p>Это приводило к тому, что одним Tarantool'ом было сложно обслужить больше нескольких тысяч клиентов (ограничения по числу файберов, по размеру потребляемой памяти LuaJIT и т.п.). Но начиная с версии 2.10 протокол и ядро Tarantool'а будет поддерживать систему однократных подписок, описанную выше. Ни серверу ни клиенту больше не требуется «содержать» поток, обслуживающий систему доставки событий. С помощью этой технологии теперь можно писать приложения, позволяющие одному Tarantool'у обслуживать десятки тысяч подключённых клиентов.</p> <p>Между Tarantool'ами этот механизм будет выглядеть примерно так:</p> <pre><code class=\"lua\">-- Клиент\nnet_box.watch(\n    key,\n    function(key, state)\n       -- Состояние, определяемое ключом `key`\n       -- поменялось на новое значение \n        ...\n        \n       -- Переподписка произойдёт после завершения\n       -- этой функции\n    end\n)\n\n-- Сервер\n\n-- уведомляем подписчиков о том, что состояние, определяемое\n-- ключом `key` теперь имеет новое значение - `new_state`\nbox.broadcast(key, new_state)\n</code></pre> <p>Старые решения pub/sub в Tarantool'е продолжат работать без изменений. Новые могут использовать этот механизм для того, чтобы поддерживать огромное количество клиентов или потреблять меньше ресурсов. Помимо того, что пользователи смогут строить свои приложения с использованием этого механизма, Tarantool будет распространять через него информацию о таких событиях:</p> <ul><li><p>смена мастера (лидера) в кластере;</p></li><li><p>предстоящее выключение узла;</p></li><li><p>некоторые статусы сервера.</p></li></ul> <p>Приложения смогут реагировать на подобные изменения и реже попадать в ситуации обработки ошибок, связанные с ними.</p> <h2>Применения</h2> <h3>Пример 1</h3> <p>Схема типового кластера Tarantool с шардингом будет выглядеть примерно так:</p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/b68/28e/275/b6828e27537e04d100cc76164ca42f4b.jpg\" width=\"564\" height=\"358\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/b68/28e/275/b6828e27537e04d100cc76164ca42f4b.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>Каждое хранилище — это маленький кластер (replica set) из Tarantool'ов. Роутер удерживает соединения с каждым хранилищем (с каждым его узлом), и благодаря этому:</p> <ul><li><p>обнаруживает лидеров replica set'ов;</p></li><li><p>мониторит работоспособность узлов;</p></li><li><p>перенаправляет пользовательские запросы к хранилищам.</p></li></ul> <p>Если в кластере, скажем, 50 хранилищ, каждое из которых представляет собой replica set из трёх нод, то только для обнаружения лидеров роутер вынужден «держать на балансе» 150 потоков (файберов). Это значительные накладные ресурсы как на память, так и на CPU. Но начиная с версии 2.10 требования роутеров к ресурсам значительно уменьшатся благодаря внедрению данного механизма.</p> <h3>Ещё пример</h3> <p>Несколько лет назад мы строили систему оповещения множества пользователей о происходящих на сервере событиях. Она использовалась для уведомления примерно 100 тыс. исполнителей (преимущественно водителей такси) о появляющихся заказах. Об этой системе <a href=\"http://unera.net/all/2017/11/02/event-lp.html\">даже написали статью</a>. В то время для масштабирования мы выделяли одно ядро CPU на 3-5 тыс. водителей. Система уведомления 100 тыс. исполнителей использовала два 16-ядерных сервера. И основным ограничителем была память LuaJIT. С использованием описанного механизма можно редуцировать сервис всего до одного ядра.</p> <h2>Заключение</h2> <p>Tarantool иногда называют базой данных, иногда сервером приложений. Но это нечто большее. Tarantool — это конструктор, с помощью которого вы можете построить что-то мощное и серьёзное, и при этом не требовательное к ресурсам. В статье описан один из новых «кубиков», позволяющий сделать недорогую систему уведомлений огромного числа подписчиков.</p> <p>Скачать Tarantool можно <a href=\"https://www.tarantool.io/ru/download?utm_source=habr&amp;utm_medium=articles&amp;utm_campaign=2021\">на официальном сайте</a>, а получить помощь — <a href=\"https://t.me/tarantoolru?utm_source=habr&amp;utm_medium=articles&amp;utm_campaign=2021\">в Telegram-чате</a>.</p>",
        "is_active": true,
        "author": 1,
        "tag": "tarantool",
        "add_datetime": "2021-11-24T11:22:09Z",
        "article_status_new": 4
    }
},
{
    "model": "mainapp.article",
    "pk": 1637747495,
    "fields": {
        "hub": 5,
        "name": "Как сегодня делают игры в браузере? Часть 1",
        "image": "https://habrastorage.org/getpro/habr/upload_files/c1d/1a4/c79/c1d1a4c792bfa2590d691be8d2ad30a6.jpg",
        "preview": "<em><s>Игра в браузере на React и Three.js!</s>",
        "text": "<p><em><s>Игра в браузере на React и Three.js!</s></em></p> <p>Я занимаюсь фронтендом уже очень давно, порядка 10 лет. И как любой уважающий себя фронтендер, я люблю тащить javascript туда, где обычно его не используют: на сервер, в мобильные приложения, в геймдев. С тех пор как я увидел первые WebGL демосцены в 2013-м, я мечтал сделать что-то похожее, скажем, на <a href=\"http://david.li/waves/\" rel=\"noopener noreferrer nofollow\">это</a>.</p> <p>Так что я провел немало времени экспериментируя и читая документацию, и вот что у меня получилось.</p> <p><em>Дисклеймер: я не претендую на абсолютные знания того, как делают игры, я всего лишь описываю свой наивный подход к поиску ответа на вопрос, который задает заголовок. Поэтому это будет не совсем игра, а скорее концепт, интерактивная демо-сцена.</em></p> <p><strong>Дизайн</strong></p> <p>В рамках эксперимента я создам игру с изометрическим видом, в которой герой будет убивать зомби. Каждый раз, когда герой кастует файрбол, на карте в случайном месте появляется новый враг. Цель игры - как можно дольше остаться в живых. Управление будет с помощью геймпада.</p> <p><strong>Шаг 1. Настройка проекта</strong></p> <p>Как и в любом другом JS-проекте, в первую очередь придется выполнить настройку. Я ненавижу долгие настройки, полные магических операций, поэтому буду пользоваться Parcel, так как он придерживается zero-config концепции. В качестве рендер-движка я буду использовать Three.js и react-three-fiber, который склеит React и Three.js и освободит от императивности последней.</p> <p>В первую очередь, я создам папку под проект и выполню следующее:</p> <pre><code>npm init -y\nnpm install parcel-bundler react react-dom three react-three-fiber\nnpm install -D @babel/core @babel/preset-react parcel-plugin-static-files-copy</code></pre> <p>Так же понадобится библиотека с крайне полезными утилитами для Three - drei.</p> <pre><code>npm install @react-three/drei</code></pre> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/c1d/1a4/c79/c1d1a4c792bfa2590d691be8d2ad30a6.jpg\" width=\"735\" height=\"400\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/c1d/1a4/c79/c1d1a4c792bfa2590d691be8d2ad30a6.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>А так же следующая строчка в разделе <em>scripts</em> package.json:</p> <pre><code>\"start\": \"parcel ./index.html\"</code></pre> <p>А еще <em>index.html</em> со следующим <a href=\"https://raw.githubusercontent.com/johnSamilin/gamedev-workshop/main/index.html\" rel=\"noopener noreferrer nofollow\">содержимым</a>.</p> <p>Теперь после выполнения команды <em>npm start </em>можно перейти по адресу http://localhost:1234 и приступить к делу.</p> <p><strong>Шаг 2. Базовые вещи</strong></p> <p>Позвольте мне пропустить подробности того, как сделан react-three-fiber и как он работает, в сети довольно много информации по этой теме. Например, в <a href=\"https://docs.pmnd.rs/react-three-fiber/getting-started/introduction\" rel=\"noopener noreferrer nofollow\">официальной документации</a>.</p> <p>Прежде всего, в игре должна быть земля, поверхность, чтобы все не выглядело так, словно персонажи висят в воздухе. В приведенном ниже примере я создал базовую сцену с компонентами:</p> <ul><li><p><strong>Canvas</strong>. Самый главный компонент, который делает за вас много работы: запускает игровой цикл, следит за всем, является контекстом. Большинство настроек сцены будут в нем.</p></li><li><p><strong>axesHelper</strong>.<strong> </strong>Компонент, который добавляет в сцену оси (хотя, конечно, не очень полезный, потому что ось Y направлена вверх, хотя я ожидал, что вверх будет направлена ось Z).</p></li><li><p><strong>mesh</strong>. Поверхность. В такой компонент нужно прокинуть два потомка: описание геометрии поверхности и ее материала.</p></li><li><p><strong>pointLight</strong>. Источник света. Без него вы не увидите ничего.</p></li></ul> <div class=\"tm-iframe_temp\" data-src=\"https://embedd.srv.habr.com/iframe/619dec69edd610f626b80d5d\" data-style=\"\" id=\"619dec69edd610f626b80d5d\" width=\"\"></div> <p><strong>Шаг 3. Движение камеры</strong></p> <p>Сейчас вся сцена статична и не очень впечатляюща, поэтому я воспользуюсь вспомогательной сущностью three.js - OrbitControls, которая даст возможность манипулировать камерой с помощью мыши. Если зажать левую клавишу, то камера будет вращаться вокруг фиксированной точки и всегда будет обращена к ней. Колесико будет регулировать степень приближения. Кроме того, компонент принимает свойства, которые определяют ограничения, то есть, например, не позволят камере быть выше или ниже определенных координат.</p> <p><a href=\"https://codesandbox.io/s/broken-tdd-1qipb?file=/src/index.js\" rel=\"noopener noreferrer nofollow\">Пример использования</a>.</p> <p><strong>Шаг 4. Файрбол</strong></p> <p>Ок, пришло время перейти к более интересным и сложным вещам. К созданию файрбола. К сожалению, я не умею писать шейдеры, поэтому взял и адаптировал уже готовый код из подходящей <a href=\"https://codepen.io/pizza3/pen/Rwoqemx?editors=0010\" rel=\"noopener noreferrer nofollow\">демки</a>.</p> <p>Идея проста как дважды два. Всего три компонента: сфера, цилиндр для огня и еще один, большего размера, для дыма. Все компоненты имеют прозрачный shaderMaterial, который обновляется в каждом новом кадре. В итоге все выглядит, как будто он состоит из пылающей лавы.</p> <figure class=\"\"><img src=\"/img/image-loader.svg\" height=\"432\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/302/280/530/302280530c595023e5ce28f0755bf928.png\" data-width=\"493\"><figcaption></figcaption></figure> <p>Вот тут лежит полный <a href=\"https://codesandbox.io/s/exciting-marco-iyy6h?file=/src/fireball/fireball.jsx:2582-2830\" rel=\"noopener noreferrer nofollow\">код файрбола</a>, а пока я расскажу о некоторых аспектах.</p> <p>Файл <code>/src/fireball/fireball.jsx</code> экспортирует единственный компонент, который, в свою очередь, состоит из трех других, завернутых в группу. Почему? Потому что это позволяет применять трансформации на всех потомках, сохраняя их относительное местоположение и соотношения.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"418\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/49f/b5b/3b0/49fb5b3b0ca35c9eac31726495b6818d.png\" data-width=\"768\"><figcaption></figcaption></figure> <p>В каждом подкомпоненте есть следующие строки:</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"318\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/4fc/464/69b/4fc46469b2abb0675bd5773d62c0d340.png\" data-width=\"768\"><figcaption></figcaption></figure> <p><code>useFrame</code> вызывается каждый раз, когда срабатывает <code>requestAnimationFrame</code> - в зависимости от вашего оборудования 60 или, например, 144 раза в секунду.</p> <p>Наконец, если поместить компонент в сцену и прокинуть в него свойства <em>position</em> и <em>scale</em>, то выглядеть это будет следующим образом:</p> <div class=\"tm-iframe_temp\" data-src=\"https://embedd.srv.habr.com/iframe/619df43ccd09f7f6552eb447\" data-style=\"\" id=\"619df43ccd09f7f6552eb447\" width=\"\"></div> <p><strong>Шаг 5. Персонажи</strong></p> <p>Где взять модели персонажей? Отличный вопрос. К примеру, в <a href=\"https://boytchev.github.io/mannequin.js/\" rel=\"noopener noreferrer nofollow\">mannequin.js</a> или <a href=\"https://www.mixamo.com/\" rel=\"noopener noreferrer nofollow\">mixamo</a>. Можно даже купить на <a href=\"https://sketchfab.com/feed\" rel=\"noopener noreferrer nofollow\">sketchfab</a> (и использовать mixamo для создания скелета в нем). В целях эксперимента я буду использовать mixamo, там есть подходящие модели и анимации.</p> <p>При скачивании модели стоит выбрать формат FBX.</p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/getpro/habr/upload_files/472/82e/a7e/47282ea7e9bd40cbd63b791919bfa7e7.PNG\" width=\"1195\" height=\"855\"><figcaption></figcaption></figure> <p>Файл .fbx может весить до 15 МБ (27 тысяч полигонов!), и не хочется, чтобы они были частью бандла. Так что будем грузить их через ajax тогда, когда они понадобятся.</p> <p>parcel-plugin-static-files-copy сделает все необходимое: возьмет статику из папки <code>/assets/models</code> в <code>/dist</code>. Для этого нужно добавить следующее в package.json:</p> <pre><code>\"staticFiles\": {  \"staticPath\": \"assets\"}</code></pre> <p>В целях отображения модели персонажа я создал два новых файла: <a href=\"https://codesandbox.io/s/exciting-marco-iyy6h?file=/src/helpers/getModel.js\" rel=\"noopener noreferrer nofollow\">getModel.js</a> и <a href=\"https://codesandbox.io/s/exciting-marco-iyy6h?file=/src/NPC.jsx\" rel=\"noopener noreferrer nofollow\">NPC.jsx</a>. Первый экспортирует хук, который ответственен за асинхронную загрузку файлов моделей и включение теней, второй использует этот хук и контролирует анимации. Все довольно просто. Кстати, анимации уже включены в состав FBX файла, но не будем же мы каждый раз из заново парсить. Проще сохранить их где-то в виде json-а и использовать на разных моделях (в этом универсальное преимущество mixamo: все модели имеют скелет с одинаково названными костями, так что можно взять описание анимации одного персонажа и сыграть на другом).</p> <div class=\"embed_link\"><div class=\"embed__thumb\" style='background-image: url(\"undefined\");'></div><div class=\"embed__caption\"><div class=\"embed__caption-title\"><span></span></div><a href=\"https://miro.medium.com/max/600/1*kUGb3iVby5xHKtwXj43q-w.gif\" target=\"_blank\" rel=\"noopener noreferrer nofollow\" class=\"embed__caption-link\">miro.medium.com</a></div></div> <p>Animation clip в three.js - это просто json файл с описанием того, как будет двигаться каждая кость в скелете. Так что их можно просто взять и добавить в специальный объект AnimationMixer. AnimationMixer, ну, смешивает анимации ¯\\_(ツ)_/¯. Но здесь я буду использовать его для переключения между различными состояниями.</p> <div class=\"embed_link\"><div class=\"embed__thumb\" style='background-image: url(\"undefined\");'></div><div class=\"embed__caption\"><div class=\"embed__caption-title\"><span></span></div><a href=\"https://miro.medium.com/max/600/1*msU3RwuZmlQwNJvWpBpxCA.gif\" target=\"_blank\" rel=\"noopener noreferrer nofollow\" class=\"embed__caption-link\">miro.medium.com</a></div></div> <p>Спасибо, что дочитали до конца! В следующей части я опишу, как использовать геймпад, заставить модели двигаться и как сюда вписывается state management.</p> <p><strong>Полезные ресурсы</strong></p> <ol><li><p><a href=\"https://codepen.io/pizza3/pen/Rwoqemx?editors=0010\" rel=\"noopener noreferrer nofollow\">https://codepen.io/pizza3/pen/Rwoqemx?editors=0010</a> — Демка файрбола</p></li><li><p><a href=\"https://ykob.github.io/sketch-threejs/sketch/fire_ball_2.html\" rel=\"noopener noreferrer nofollow\">https://ykob.github.io/sketch-threejs/sketch/fire_ball_2.html</a> — Еще одна</p></li><li><p><a href=\"https://docs.pmnd.rs/react-three-fiber/getting-started/introduction\" rel=\"noopener noreferrer nofollow\">https://docs.pmnd.rs/react-three-fiber/getting-started/introduction</a>— Документация по react-three-fiber</p></li><li><p><a href=\"https://www.mixamo.com/\" rel=\"noopener noreferrer nofollow\">https://www.mixamo.com/</a> — Каталог 3D-моделей и штука для авторига</p></li><li><p><a href=\"https://boytchev.github.io/mannequin.js/\" rel=\"noopener noreferrer nofollow\">https://boytchev.github.io/mannequin.js/</a> — Любопытная библиотека для генерации моделей персонажей</p></li></ol>",
        "is_active": true,
        "author": 1,
        "tag": "webgl",
        "add_datetime": "2021-11-24T11:42:09Z",
        "article_status_new": 4
    }
},
{
    "model": "mainapp.article",
    "pk": 1637747496,
    "fields": {
        "hub": 3,
        "name": "Как я проходил интервью на проектировщика FPGA для космических кораблей Blue Origin",
        "image": "https://habrastorage.org/getpro/habr/upload_files/efc/5f1/fc0/efc5f1fc07b017b59a1014187598715e.jpg",
        "preview": "<figure class=\"full-width \"><img src=\"https://habr",
        "text": "<figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/efc/5f1/fc0/efc5f1fc07b017b59a1014187598715e.jpg\" width=\"714\" height=\"504\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/efc/5f1/fc0/efc5f1fc07b017b59a1014187598715e.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>Однажды я решил ответить на сообщения в LinkedIn от рекрутерши безосовской компании Blue Origin, которая занимается разработкой и запуском космических аппаратов. Затем я прошел два раунда интервью: скрининг и 6-часовой марафон с дюжиной инженеров и менеджеров. Я не могу рассказать вопросы или описать диалоги с интервьирующими, потому что я подписал бумагу что не буду этого делать, но покажу пару вещей, о которых зашла речь еще до подписания бумаги, а также дам совет тем, кто хочет это повторить (совет кстати может быть применим не только при устройстве к Безосу, но и к Маску или Рогозину).</p> <p>Одновременно с Blue Origin я интервьировался в другую компанию, интервью в которую по времени было такое же - час скрининга с инжиниринг-менеджером и шесть часов детальное интервью - но содержание было соовсем другое. Вообще обычно в электронных компаниях такое интервью - это просто марафон задачек на микроархитектуру (всякие извращенные FIFO, арбитры, кэши, кредитные счетчики), каверзные вопросы про тайминг (доходит до time stealing/time borrowing), пересечение тактовых доменов, дюжина способов оптимизации динамического энергопотребления при проектирования на уровне регистровых передач итд.</p> <p>Но в компании Безоса все было по другому. Сначала нужно было написать эссе на тему \"Что я думаю о космических кораблях бороздящих просторы Вселенной\". Я написал следующее:</p> <blockquote><p>A written summary regarding my interests and thoughts regarding Human Access to Space and Space Flight in general</p><p>The solar system has a wide variety of worlds that are very different from our planet, Earth. Some of these worlds have liquid water and conditions suitable for forming complex molecules, possibly even life. These worlds include:</p><p>Jupiter’s moon Europa and Saturn’s moon Enceladus. Both have liquid water and internal heat. Saturn’s moon Titan has ammonia-rich liquid water, a nitrogen atmosphere, and seas of methane and ethane.</p><p>While Mars these days is more dead than the dry valleys of central Antarctica, it may have the conditions suitable for life in the past. Exploring these worlds will definitely add to the science. The pursuit of science is one of the essential activities of humankind since ever. We may even find something practically useful in unlikely places.</p><p>For example, the modern technology of PCR (Polymerase Chain Reaction) became a mainstream biotech tool only after scientists found the bacterium, Thermus aquaticus, living in the hot springs of Yellowstone. Before discovering this bacteria, scientists did not believe that life could survive at temperatures of 170 °F. They now use an enzyme from this bacteria, a heat-stable DNA polymerase, to multiply tiny amounts of DNA to test for viruses (including COVID-19) and create genetically engineered strains of bacteria to manufacture useful chemicals. Biotech is a multi-billion dollar industry, and PCR is a workhorse of it.</p><p>Who knows - maybe researchers can find non-DNA-RNA-protein-based life forms or some unusual molecules in Titan and use them for something we cannot even think about right now.</p><p>There is, of course, the argument that the planets can be surveyed by robots. Some people even talk about autonomous robots with artificial intelligence. I can see a problem with this argument: modern AI is just a combination of matrix multipliers and finite state machines. No amount of complicated software code, clock frequency, memory size, and creative digital hardware design based on gates and flip-flops can change it. Human intelligence, on the other hand, may work on different physical principles, not discovered at the moment. In particular, science has no idea about the nature of self-awareness, and so far, nobody has observed self-awareness of a CPU, ASIC, or FPGA.</p><p>This makes the case of human space exploration convincing. Humans can go to Titan, Europa, and Enceladus, get an idea of what is going on there, and find something robots can miss.</p><p>Yuri Panchul</p></blockquote> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/057/293/af0/057293af00110711c79641f3de46d8db.jpg\" alt=\"Картинка из https://scitechdaily.com/discovery-provides-more-evidence-that-saturns-moon-enceladus-could-support-life-in-its-subsurface-ocean/\" title=\"Картинка из https://scitechdaily.com/discovery-provides-more-evidence-that-saturns-moon-enceladus-could-support-life-in-its-subsurface-ocean/\" width=\"1932\" height=\"1932\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/057/293/af0/057293af00110711c79641f3de46d8db.jpg\" data-blurred=\"true\"><figcaption>Картинка из https://scitechdaily.com/discovery-provides-more-evidence-that-saturns-moon-enceladus-could-support-life-in-its-subsurface-ocean/</figcaption></figure> <p>В начале интервью нужно было сделать презентацию для их инженерной группы и потом отвечать на вопросы - технические и нетехнические. Меня удивило, что технические вопросы были довольно базовые: про последовательностную логику, протоколы шины - никаких микроархитектурных сложностей, как в компаниях, которые делают CPU, GPU и сетевые чипы.</p> <p>Конечно, в космических компаниях, как вы можете почитать у @amartology, есть масса интересной специфики. Специальные методы писания на верилоге конечных автоматов, чтобы испортившая один бит состояния космическая частица не абортировала всю миссию. Троирование блоков, невероятная смесь датчиков, микроконтроллерови и ПЛИС-ов - просто рай для проектировщиков систем.</p> <p>Но с точки зрения чисто ПЛИС-оводства вы могли бы ответить на половину вопросов на интервью в Blue Origin, если бы просто прошли Сколковскую Школу Синтеза Цифровых Схем, внимательно выполняя все задачки, а также получили бы у Александра Биленко бесплатную FPGA плату и поупражнялись бы с нею дома. </p> <p>Правда помимо ПЛИС-ов там было много вопросов про поведение / работу в команде и преданность идеям покорения космоса. По ним я их не впечатлил, они мне позвонили через неделю и сказали, что выбрали кандидата, который лучше align with the position. Я вздохнул с облегчением, так как все равно собирался идти в другую компанию (которая не задавала гуманитарных вопросов, а вместо этого спросила череду микроархитектурных ребусов). По крайней мере космические товарищи сами сняли с меня муки совести, что я потратил 7 часов времени важных людей.</p> <p>Теперь насчет <a href=\"http://www.chipexpo.ru/shkola-sinteza-cifrovyh-shem-na-verilog\" rel=\"noopener noreferrer nofollow\">Сколковской Школы Синтеза Цифровых Схем</a>. В прошлую субботу там прошло аккурат занятие по последовательностной логике, про которую будут вопросы в любой космической компании, в которую вы захотите пойти на FPGA (хоть к Маску, хоть к Безосу, хоть к Рогозину). Вот собственно полная запись:</p> <div class=\"tm-iframe_temp\" data-src=\"https://embedd.srv.habr.com/iframe/619df7cc4615593b75e24734\" data-style=\"\" id=\"619df7cc4615593b75e24734\" width=\"\"></div> <p>В эту субботу 27 ноября занятие будет не в Сколково, а в МИРЭА (это рядом с метро на Юго-Западной). Вот инструкция от Александра Биленко как в этом участвовать:</p> <blockquote><p>Следующее занятие состоится 27 ноября в Технопарке \"Альтаир\" МИРЭА   (пр-т Вернадского, 86, стр.2, Метро\"Юго-Западная)</p><p>Тема занятия: Разбор учебного проекта: распознавание и генерация звуков и мелодий. </p><p>Для занятия Вам понадобится плата FPGA, а также подключаемые к плате усилитель и микрофон компании Digilent и наушники с круглым разъемом 3,5 мм.</p><p>Все это мы выдадим Вам на занятии, если у Вас, например, нет платы.</p><p>Кстати, те из Вас, кто хочет продолжить освоение темы дома, на своем ноутбуке, могут получить на занятии плату и забрать ее с собой.</p><p>На занятии будет подготовлено порядка 15-20 компьютеров с установленным ПО и подключенными платами.</p><p>Но если у Вас есть ноутбук с установленным ПО для занятий, лучше взять его с собой, на тот случай, если рабочих мест с компьютерами на всех не хватит.</p><p>Так как в МИРЭА пропускной режим, мы должны подать список учащихся, для этого нам необходимо получить от тех, кто будет на занятии 27 ноября  ФАМИЛИЮ ИМЯ ОТЧЕСТВО.</p><p>Пришлите на почту <a href=\"mailto:info@chipexpo.ru\" rel=\"noopener noreferrer nofollow\">info@chipexpo.ru</a> эту информацию, если Вы намерены быть на занятии.</p><p>В конце занятия Вам будет предложено несколько заданий по теме и все, кто их успешно выполнит получить в подарок Блокфлейту Yamaha YES-23D, на которой вас научит играть простую мелодию преподавательница флейты Мария Беличенко. </p><p>Мы покажем вам, как спроектировать схему на плате, которая будет распознавать сыгранные вами мелодии и даже подпевать.</p><p>Итак, приступаем к формировании группы на 27 ноября !</p></blockquote> <p>Следующее занятие будет как на ChipEXPO, где схемы на FPGA платах распознавали мелодии, которые играла Мария Беличенко:</p> <div class=\"tm-iframe_temp\" data-src=\"https://embedd.srv.habr.com/iframe/619df9056ea11f3bbbaf2055\" data-style=\"\" id=\"619df9056ea11f3bbbaf2055\" width=\"\"></div> <p>Но вы этот раз все будет интереснее, так как в дополнение к FPGA платам вы получите персонально каждый по блокфлейте, и будете играть на них мелодии для FPGA плат, как индийские факиры играют мелодии для кобр. Не знаю, сколько там останется мест, но так как на Юго-Западную многим ехать лень, какие-то места должны остаться.</p> <p>Еще будут выездные сессии в ВШЭ МИЭМ и в МИЭТ в Зеленограде</p>",
        "is_active": true,
        "author": 1,
        "tag": "verilog",
        "add_datetime": "2021-11-24T11:53:09Z",
        "article_status_new": 4
    }
},
{
    "model": "mainapp.article",
    "pk": 1637747497,
    "fields": {
        "hub": 1,
        "name": "Как Grafana, Prometheus и Oracle ORDS помогли нам быстрее выявлять инциденты в биллинге",
        "image": "https://habrastorage.org/getpro/habr/upload_files/dd9/487/2ea/dd94872ea481bd8d0c5ed73a78776c70.png",
        "preview": "Привет! Я работаю в компании  <a href=\"http://w",
        "text": "<p>Привет! Я работаю в компании  <a href=\"http://www.bercut.com\">Bercut</a>, которая входит в группу компаний Ростелеком и более 20 лет занимается разработкой и поддержкой ПО для операторов сотовой и фиксированной связи. Прошел путь от инженера в отделе сопровождения до менеджера продукта. В последние годы работаю ведущим специалистом в отделе администрирования (Senior DBA) и знаю все про работу высоконагруженных биллинговых базах данных, обслуживающих от сотен тысяч до десятков миллионов абонентов. Сегодня я хочу рассказать про решение по комплексному мониторингу биллинговой системы у оператора связи на основе Grafana, Prometheus и Oracle ORDS.</p> <h3>Почему нам понадобилось новое решение</h3> <p>Сейчас биллинговая система на стороне оператора связи ― это мегасложный комплекс с огромным количеством разных модулей и подсистем. Появляются новые модули, добавляются взаимосвязи между ними. Еще быстрее растет число бизнес-критичных функций. Все это нужно контролировать и своевременно выявлять и устранять проблемы. Используются жесткие SLA, временные рамки на ликвидацию аварий очень узкие. Поэтому чем раньше сбой будет обнаружен, проведен первичный анализ и сама проблема локализована, тем быстрее удастся исправить ситуацию. </p> <p>Для настройки, управления и мониторинга всех продуктов в Bercut используется модуль Bercut ATOMS, с агентами на хостах и графической консолью MIB Explorer для администраторов ПО Bercut. В консоли специалисты операторов и Bercut выполняют все действия по настройке компонентов систем, трассировку, мониторинг производительности и т.д. Консоль имеет и встроенные средства для отображения графиков. С появлением Prometheus и Grafana, ставшими де-факто стандартами в ИТ, и возможности объединения мониторинга всех систем, системного и прикладного ПО, серверов, СХД, SAN, сетевой инфраструктуры в одном приложении мы также стали активно использовать Grafana. Ребята сделали MIB Exporter для экспорта метрик модулей систем в Prometheus. Коллега разработал <a href=\"https://github.com/n27051538/solaris_exporter\">Solaris Exporter</a> для мониторинга серверов Oracle SPARC. Сейчас Prometheus и Grafana установлены у большинства наших заказчиков, и все перечисленное доступно через несколько десятков дашбордов. </p> <p>Мониторинг метрик бизнес-логики биллинговой системы в БД Oracle, который я когда-то написал на PL/SQL, исторически был реализован обособленно. Он обладал необходимой функциональностью для формирования алертов и анализа инцидентов, но графического дашборда не имел. Конечно, мы делали попытки использовать Oracle Enterprise Manager, Zabbix и др., но это были скорее кастомные решения. Настройка отдельной метрики через User defined metrics/Metric extensions в OEM довольно трудоемка и посильна больше DBA, нежели администраторам комплекса.</p> <p>При этом вопрос функционирования и нагрузки на БД Oracle периодически возникал при проблемах и отбоях: \"Сережа, что с базой?\" Инженеры в большинстве случаев не имеют доступа в Oracle Enterprise Manager и самостоятельно оценить нагрузку, факт конкуренции или блокировок в БД не могут. Т.е. требовался еще и простой \"монитор\", посмотрев на который коллеги могли бы самостоятельно проверить, не отличается ли текущая активность БД и нагрузка от той, что была час, день или неделю назад.</p> <p>В общем, требовалось объединить моторинг работы БД и мониторинг бизнес-процессов внутри в БД в единое решение.</p> <h3>Почему мы выбрали Grafana, Prometheus и Oracle ORDS</h3> <p>Глядя на то, как Grafana отлично справляется с визуализацией метрик с оборудования, инфраструктуры и серверов приложений, я решил, что было бы неплохо сделать дашборд и для мониторинга компекса на уровне БД. И, по моим ощущениям и отзывам коллег, получилось неплохо. Grafana ― это opensource решение, позволяющее легко создать дашборд с отображением метрики из разных источников. В Grafana можно объединить информацию по активности БД, нагрузке на сервере БД с ключевыми показателями работы биллинговой системы на одном экране, при этом интервал окна или временной период меняется всего несколькими кликами. Но не буду забегать вперед, начнем по порядку.</p> <p>Grafana не умеет напрямую использовать БД Oracle как источник метрик, поэтому требовалась дополнительная прослойка. С учетом уже имеющегося у брата опыта, для сбора биллинговых метрик и хранилища истории был выбран Prometheus. В качестве экспортера из БД Oracle я исследовал возможности <a href=\"https://github.com/iamseth/oracledb_exporter\">OracleDB Exporter</a>. Oracledb_exporter представляет собой небольшой сервис, написанный на Ruby и имеющий конфигурационный файл на простейшем TOML языке. В конфигурационном файле содержатся SQL запросы, которые сервис будет запускать при поступлении запроса со стороны Prometheus. Однако я в нем быстро разочаровался по нескольким причинам:</p> <ul><li><p>Необходимость настройки отдельного экземпляра сервиса oracledb_exporter для каждой БД, если их несколько.</p></li><li><p>Необходимость настройки отдельного экземпляра сервиса oracledb_exporter для сбора метрик с разным интервалом опроса. Некоторые метрики нужно собирать очень часто, и они являются легкими с точки зрения выполнения запроса в БД; другие отрабатывают довольно долго, но нет необходимости в их частом запуске ― порой достаточно и раза в сутки.</p></li><li><p>Появление новой технологии (TOML) и точки настройки мониторинга для наших заказчиков и инженеров Bercut. Для кастомизации и добавления новых метрик коллегам придется изучать TOML.</p></li><li><p>И самое важное ― сложность в поддержке и обновлении метрик. C развитием продукта или по результатам каких-то инцидентов мы добавляем новые метрики; заказчики часто добавляют свои. Возникает проблема с применением изменений к конфигурационному TOML-файлу. </p></li></ul> <p>В то же время полностью от oracledb_exporter я не отказываюсь и продолжаю его использовать для получения некоторых метрик с экземпляра БД и Oracle ASM ― иметь статистику о топе ожиданий БД и % свободного пространства в ASM дисковых группах на дашборде биллинговой системы довольно важно.</p> <p>В результате поиска и исследований выбор пал на решение на базе <a href=\"https://www.oracle.com/database/technologies/appdev/rest.html\">Oracle Rest Data Services</a> и собственную разработку на PL/SQL. ORDS позволяет легко и непринужденно реализовать API в БД с взаимодействием по протоколу HTTP(s). Архитектура решения для мониторинга биллинговой системы представлена на рис. 1</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Рис.1 Архитектура решения для мониторинга биллинговой системы\" title=\"Рис.1 Архитектура решения для мониторинга биллинговой системы\" height=\"762\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/dd9/487/2ea/dd94872ea481bd8d0c5ed73a78776c70.png\" data-width=\"1632\"><figcaption>Рис.1 Архитектура решения для мониторинга биллинговой системы</figcaption></figure> <p>Prometheus, согласно настройкам, каждую минуту опрашивает ORDS сервис, который на каждый запрос запускает в БД PL/SQL процедуру, а она в свою очередь в HTML формате отдает текущие значения заранее рассчитанных метрик. Учитывая то, что часть метрик по большим или высоконагруженным таблицам могут рассчитываться минуты, а некоторые метрики не требует частого обновления, вариант заранее собрать и подготовить к публикации метрики оказался лучшим решением. Также это избавляет от необходимости иметь конфигурацию с несколькими экспортерами с различными интервалами опроса и таймаутами, что упрощает общую конфигурацию. </p> <p>Полученные значения метрик Prometheus сохраняет в свою БД и хранит данные 2 недели. Также значения метрик сохраняются в БД Victoria Metrics на значительно более длительный срок. </p> <p>Пользователь, открывая дашборд в Grafana, определяет период и интервал отображения информации. Данные выбираются из указанного хранилища метрик, и рисуются красивые и наглядные графики </p> <p>Далее я более детально опишу все элементы схемы: сверху вниз, слева направо.</p> <h3>Вычисление метрик на стороне БД</h3> <p>Вычисление и хранение метрик реализовано в виде набора таблиц и пакета на PL/SQL. </p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Рис. 2 Схема данных\" title=\"Рис. 2 Схема данных\" height=\"790\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/774/d68/07c/774d6807ca54e0d502bac591a97d2edb.png\" data-width=\"1155\"><figcaption>Рис. 2 Схема данных</figcaption></figure> <p>Основной таблицей схемы является METRIC_DICT, в которой хранятся список метрик, параметры расписания запуска и SQL запрос для сбора метрики. Ряд метрик могут иметь несколько значений, например, метрика для контроля свободного места в табличном пространстве, ГБ\" будет иметь несколько значений ― название табличного пространства в качестве метки и размер в качестве значения. Подобная реализация позволит в дальнейшем отображать все значения в Grafana на одном графике как одну метрику.<br>Справочник метрик выглядит так:</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Рис.3 Справочник метрик\" title=\"Рис.3 Справочник метрик\" height=\"247\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/d4c/1d3/9fe/d4c1d39fe02f6d79949c593e7b31f1f5.png\" data-width=\"1577\"><figcaption>Рис.3 Справочник метрик</figcaption></figure> <p>В PL/SQL пакете реализован ряд процедур. Две процедуры периодически запускаются при помощи Oracle Scheduler Jobs. Процедура вычисления метрик выбирает те метрики, у которых наступило время следующего запуска NEXT_RUN, и выполняет SQL оператор. Чтобы исключить или минимизировать влияние мониторинга на работу БД, запросы по большим и/или высоконагруженным таблицам выполняются с использованием dblink на резервном сервере БД ― Oracle Active Standby DB, открытой для чтения в режиме Real Time Apply. При этом отслеживается факт отставания Apply Lag, и, если он более заданной величины, запросы выполняются на Primary DB. Значение метрик сохраняется в таблицы *CURRENT*, а перед этим предыдущие значения переносятся в  таблицы *HIST*, для истории.  Метрики, по которым значение превышает установленный порог, также сохраняются в таблицу METRIC_ALERTS.  Второй worker предназначен для формирования email-уведомлений администраторам. При появлении алерта администраторы получат сообщение со списком проблемных метрик и значениями остальных метрик (справочно). Механизм оставлен для совместимости с предыдущим решением и, возможно, в будущем будет заменен на Prometheus Alertmanager.<br></p> <h3>Публикация метрик на стороне приложений и сервисов </h3> <p>На серверах приложений установлен Linux или Solaris node exporter, который собирает метрики ОС (cpu, memory, disk usage &amp; utilization), а также MIB Exporter, собирающий и публикующий параметры работы сервисов и модулей биллинговой системы.</p> <h3>Установка Oracle Rest Data Services</h3> <p>Oracle Rest Data Services ― это Java-EE приложение как развитие Oracle HTTP сервера и mod_plsql. Оно предоставляет широкие возможности по настройке, безопасности и кешированию для RESTful сервисов. Может работать в составе серверов приложений, например, Oracle Weblogic и Apache Tomcat, либо в standalone режиме.</p> <p>ORDS скачиваем тут <a href=\"https://www.oracle.com/database/technologies/appdev/rest-data-services-downloads.html\">https://www.oracle.com/database/technologies/appdev/rest-data-services-downloads.html</a> Описанные ниже настройки выполнялись для версии 20.4.3</p> <pre><code class=\"bash\">root@prometheus# mkdir /opt/oracle\nroot@prometheus# chown oracle:oinstall /opt/oracle\nroot@prometheus# su - oracle\noracle@prometheus$ mkdir /opt/oracle/ords\noracle@prometheus$ mkdir /opt/oracle/ords/params\noracle@prometheus$ unzip ords-20.4.3.050.1904.zip -d /opt/oracle/ords\noracle@prometheus$ cd /opt/oracle/ords</code></pre> <p>Для установки и настройки ORDS нужен JDK. Если его нет, его нужно установить.</p> <pre><code class=\"bash\">oracle@prometheus$ which java\n/usr/bin/which: no java in (/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin)\noracle@prometheus$\n \nroot@prometheus# yum install java\n...\nInstalled:\n  java-1.8.0-openjdk.x86_64 1:1.8.0.292.b10-1.el7_9\nroot@prometheus# exit\n \noracle@prometheus$ java -version\nopenjdk version \"1.8.0_292\"\nOpenJDK Runtime Environment (build 1.8.0_292-b10)\nOpenJDK 64-Bit Server VM (build 25.292-b10, mixed mode)</code></pre> <p>Установка выполняется в интерактивном режиме, либо в silent, с использованием parameter file  /opt/ords-20.4.3/params/ords_params.properties</p> <p>Я планирую сделать Ansible playbook для автоматического развертывания, поэтому использовал второй вариант. Файл параметров для установки в минимальном варианте:</p> <pre><code class=\"bash\">oracle@prometheus$ cat /opt/oracle/ords/params/ords_params.properties\n \ndb.connectionType=customurl\ndb.customURL=jdbc:oracle:thin:@(DESCRIPTION=(FAILOVER=on)(LOAD_BALANCE=off)(CONNECT_TIMEOUT=5)(TRANSPORT_CONNECT_TIMEOUT=3)(RETRY_COUNT=3)(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)HOST=192.168.17.172)PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.17.173)(PORT=1521)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=monitor)))\nstandalone.mode=true\nstandalone.http.port=7778\nstandalone.use.https=false\nstandalone.context.path=/ords\nstandalone.scheme.do.not.prompt=true\nrest.services.ords.add=false\nplsql.gateway.add=true\nmigrate.apex.rest=false\nrest.services.apex.add=false\ndb.password=prometheus\ndb.username=prometheus\nresource.templates.enabled=false</code></pre> <p>Все параметры с комментариями (справочно):</p> <pre><code class=\"bash\">#### Connection type: basic,tns or customurl\ndb.connectionType=customurl\n \n### Parameters for \"basic\" connection type\n \n#db.hostname=localhost\n#db.port=1521\n#db.servicename=myservice\n#db.sid=\n \n### Parameters for \"tns\" connection type\n \n#db.tnsDirectory=/path/to/tnsfolder\n#db.tnsAliasName=\n \n### Parameters for \"customurl\" connection type\n \ndb.customURL=jdbc:oracle:thin:@(DESCRIPTION=(FAILOVER=on)(LOAD_BALANCE=off)(CONNECT_TIMEOUT=5)(TRANSPORT_CONNECT_TIMEOUT=3)(RETRY_COUNT=3)(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.17.172)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.17.173)(PORT=1521)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=monitor)))\n \n### Parameters for Installing Oracle REST Data Services in Standalone Mode\n \nstandalone.mode=true\nstandalone.http.port=7778\n## Specifies the location of Application Express images.\n##  If you are using Application Express, specify the location of Application Express images.\n#standalone.static.images=/path/to/images\nstandalone.use.https=false\n#standalone.https.port=8443\n## Specifies the Secure Socket Layer (SSL) certificate hostname.\n#standalone.ssl.host=mysecurehost\n#standalone.use.ssl.cert=true\n#standalone.ssl.cert.path=\n#standalone.ssl.key.path=\nstandalone.context.path=/ords\nstandalone.scheme.do.not.prompt=true\n \n \n### Parameters for Installing Oracle REST Data Services\n \n## Specifies whether to install the Oracle REST Data Services schema.\nrest.services.ords.add=false\n## Specifies the ORDS_METADATA default tablespace\n#schema.tablespace.default=USERS\n## Specifies the ORDS_METADATA temporary tablespace\n#schema.tablespace.temp=TEMP\n## Specifies the password for ORDS_PUBLIC_USER.\n#user.public.password=\n## Specifies the ORDS_PUBLIC_USER default tablespace\n#user.tablespace.default=USERS\n## Specifies the ORDS_PUBLIC_USER temporary tablespace.\n#user.tablespace.temp=TEMP\n \n### Parameters for Configuring Application Express\n## Specifies whether to configure Oracle REST Data Services for Application Express.\nplsql.gateway.add=false\n## Specifies the PL/SQL gateway username. For Application Express, you must specify APEX_PUBLIC_USER\n#db.username=APEX_PUBLIC_USER\n#db.password=\nmigrate.apex.rest=false\n## Specifies whether to configure Oracle REST Data Services for Application Express RESTful Services.\n## Set this value to true if you want to use APEX RESTful Services. Default - false\nrest.services.apex.add=false\n## Specifies the password for APEX_LISTENER.\n##  If rest.services.apex.add is set to true, you must provide a password for APEX_LISTENER\n#user.apex.listener.password=\n## Specifies the password for APEX_REST_PUBLIC_USER.\n##  If rest.services.apex.add is set to true, you must provide a password for APEX_REST_PUBLIC_USER.\n#user.apex.restpublic.password=</code></pre> <p>Установка в silent режиме:</p> <pre><code class=\"bash\">oracle@prometheus$ java -jar ords.war configdir /opt/oracle/ords\n2021-06-03T09:07:01.282Z INFO        Set config.dir to /opt/oracle/ords in: /opt/oracle/ords/ords.war\n \noracle@prometheus$ java -jar ords.war install --silent --parameterFile /opt/oracle/ords/params/ords_params.properties\n2021-06-03T10:11:16.537Z INFO        HTTP and HTTP/2 cleartext listening on host: localhost port: 7778\n2021-06-03T10:11:16.568Z INFO        Disabling document root because the specified folder does not exist: /opt/oracle/ords/ords/standalone/doc_root\n2021-06-24T14:21:33.956Z INFO        Configuration properties for: |apex||\ncache.caching=false\ncache.directory=/tmp/apex/cache\ncache.duration=days\ncache.expiration=7\ncache.maxEntries=500\ncache.monitorInterval=60\ncache.procedureNameList=\ncache.type=lru\ndb.connectionType=customurl\ndb.customURL=jdbc:oracle:thin:@(DESCRIPTION=(FAILOVER=on)(LOAD_BALANCE=off)(CONNECT_TIMEOUT=5)(TRANSPORT_CONNECT_TIMEOUT=3)(RETRY_COUNT=3)(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.17.172)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.17.173)(PORT=1521)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=monitor)))\ndebug.debugger=false\ndebug.printDebugToScreen=false\nerror.keepErrorMessages=true\nerror.maxEntries=50\njdbc.DriverType=thin\njdbc.InactivityTimeout=1800\njdbc.InitialLimit=3\njdbc.MaxConnectionReuseCount=1000\njdbc.MaxLimit=10\njdbc.MaxStatementsLimit=10\njdbc.MinLimit=1\njdbc.statementTimeout=900\nlog.logging=false\nlog.maxEntries=50\nmisc.compress=\nmisc.defaultPage=apex\nsecurity.disableDefaultExclusionList=false\nsecurity.maxEntries=2000\ndb.password=******\ndb.username=prometheus\nresource.templates.enabled=true\n2021-06-24T14:21:33.958Z WARNING     *** jdbc.MaxLimit in configuration |apex|| is using a value of 10, this setting may not be sized adequately for a production environment ***\n2021-06-24T14:21:33.959Z WARNING     *** jdbc.InitialLimit in configuration |apex|| is using a value of 3, this setting may not be sized adequately for a production environment ***\n2021-06-03T10:11:18.909Z INFO        Oracle REST Data Services initialized\nOracle REST Data Services version : 20.4.3.r0501904\nOracle REST Data Services server info: jetty/9.4.35.v20201120\n \n^C\noracle@prometheus$</code></pre> <p>Сервис стартует в режиме standalone, для его остановки и дальнейшей настройки используется Ctrl-C.</p> <p>В БД создается пользователь с минимальными привилегиями:</p> <pre><code class=\"sql\">SQL&gt; create user prometheus identified by prometheus default tablespace users temporary tablespace temp;\n \nSQL&gt; grant connect to prometheus;</code></pre> <p>Настройка соединения с БД. Используется файл параметров /opt/oracle/ords/params/db_params.properties</p> <pre><code class=\"bash\">db.connectionType=customurl\ndb.customURL=jdbc:oracle:thin:@(DESCRIPTION=(FAILOVER=on)(LOAD_BALANCE=off)(CONNECT_TIMEOUT=5)(TRANSPORT_CONNECT_TIMEOUT=3)(RETRY_COUNT=3)(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.17.172)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.17.173)(PORT=1521)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=monitor)))\nerror.keepErrorMessages=true\nerror.maxEntries=50\njdbc.DriverType=thin\n# Session timeout\njdbc.InactivityTimeout=1800\n# Number of connections to create\njdbc.InitialLimit=3\n# Max number of times to reuse a connection before create new\njdbc.MaxConnectionReuseCount=1000\n# Max number of connections\njdbc.MaxLimit=10\n# Max statement to cache in connection\njdbc.MaxStatementsLimit=10\n# Min number of connections\njdbc.MinLimit=1\njdbc.statementTimeout=900\ndb.password=prometheus\ndb.username=prometheus\nresource.templates.enabled=false\nrest.services.ords.add=false\nplsql.gateway.add=true</code></pre> <p>Создание подключения к БД:</p> <pre><code class=\"bash\">oracle@prometheus$ java -jar ords.war setup --database db2104 --silent -parameterFile /opt/oracle/ords/params/db_params.properties\n2021-06-03T11:16:32.532Z INFO        reloaded pools: [|apex||, |db2104||]</code></pre> <p>Создание маппинга URL к созданной конфигурации БД:</p> <pre><code class=\"bash\">oracle@prometheus$ java -jar ords.war map-url --type base-path /db2104 db2104\n2021-06-03T11:16:50.151Z INFO        Creating new mapping from: [base-path,/db2104] to map to: [db2104, null, null]</code></pre> <p>Запуск сервиса:</p> <pre><code class=\"bash\">oracle@prometheus$ java -jar ords.war standalone\n2021-06-03T11:17:18.238Z INFO        HTTP and HTTP/2 cleartext listening on host: localhost port: 7778\n2021-06-03T11:17:18.274Z INFO        Disabling document root because the specified folder does not exist: /opt/oracle/ords/ords/standalone/doc_root\n2021-06-03T11:17:20.875Z INFO        Configuration properties for: |db2104||\ndb.connectionType=customurl\ndb.customURL=jdbc:oracle:thin:@(DESCRIPTION=(FAILOVER=on)(LOAD_BALANCE=off)(CONNECT_TIMEOUT=5)(TRANSPORT_CONNECT_TIMEOUT=3)(RETRY_COUNT=3)(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.17.172)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.17.173)(PORT=1521)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=monitor)))\ndb.password=******\ndb.username=prometheus\nresource.templates.enabled=true\n \n2021-06-03T11:17:20.877Z WARNING     *** jdbc.MaxLimit in configuration |db2104|| is using a value of 10, this setting may not be sized adequately for a production environment ***\n2021-06-03T11:17:20.877Z WARNING     *** jdbc.InitialLimit in configuration |db2104|| is using a value of 3, this setting may not be sized adequately for a production environment ***\n2021-06-03T11:17:23.884Z INFO        Oracle REST Data Services initialized\nOracle REST Data Services version : 20.4.3.r0501904\nOracle REST Data Services server info: jetty/9.4.35.v20201120</code></pre> <p>Для удобства в ОС создан сервис, который будет автоматом подниматься при старте сервера. Создан конфигурационный файл:</p> <pre><code class=\"bash\">root@prometheus# cd /etc/systemd/system\nroot@prometheus# vi billing_monitoring.service\n \n[Unit]\nDescription=Bercut Billing Monitoring (ORDS)\nWants=network-online.target\nAfter=network-online.target\n \n[Service]\nUser=oracle\nGroup=bercut\nType=simple\nExecStart=/bin/java -jar /opt/oracle/ords/ords.war standalone\n \n#systemd-escape\n \nKillMode=process\nRemainAfterExit=no\nRestart=on-failure\nRestartSec=5s\n \n[Install]\nWantedBy=multi-user.target</code></pre> <pre><code class=\"bash\">root@prometheus# systemctl daemon-reload\nroot@prometheus#\nroot@prometheus#\nroot@prometheus# systemctl start billing_monitoring.service\nroot@prometheus#\nroot@prometheus#\nroot@prometheus# systemctl -l status billing_monitoring.service\n● billing_monitoring.service - Bercut Billing Monitoring (ORDS)\n   Loaded: loaded (/etc/systemd/system/billing_monitoring.service; disabled; vendor preset: disabled)\n   Active: active (running) since Thu 2021-06-03 14:46:08 MSK; 18s ago\n Main PID: 26605 (java)\n   CGroup: /system.slice/billing_monitoring.service\n           └─26605 /bin/java -jar /opt/oracle/ords/ords.war standalone\n \nJun 03 14:46:13 prometheus java[26605]: db.connectionType=customurl\nJun 03 14:46:13 prometheus java[26605]: db.customURL=jdbc:oracle:thin:@(DESCRIPTION=(FAILOVER=on)(LOAD_BALANCE=off)(CONNECT_TIMEOUT=5)(TRANSPORT_CONNECT_TIMEOUT=3)(RETRY_COUNT=3)(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.17.172)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.17.173)(PORT=1521)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=monitor)))\nJun 03 14:46:13 prometheus java[26605]: db.password=******\nJun 03 14:46:13 prometheus java[26605]: db.username=prometheus\nJun 03 14:46:13 prometheus java[26605]: resource.templates.enabled=true\nJun 03 14:46:13 prometheus java[26605]: 2021-06-03T11:46:13.419Z WARNING     *** jdbc.MaxLimit in configuration |db2104|| is using a value of 10, this setting may not be sized adequately for a production environment ***\nJun 03 14:46:13 prometheus java[26605]: 2021-06-03T11:46:13.420Z WARNING     *** jdbc.InitialLimit in configuration |db2104|| is using a value of 3, this setting may not be sized adequately for a production environment ***\nJun 03 14:46:16 prometheus java[26605]: 2021-06-03T11:46:16.164Z INFO        Oracle REST Data Services initialized\nJun 03 14:46:16 prometheus java[26605]: Oracle REST Data Services version : 20.4.3.r0501904\nJun 03 14:46:16 prometheus java[26605]: Oracle REST Data Services server info: jetty/9.4.35.v20201120\nroot@prometheus# ^C</code></pre> <h3>Публикация метрик через HTTP средствами ORDS</h3> <p>Для публикации метрик и их значений по HTTP на стороне БД реализована PL/SQL процедура. Она публикует метрики с одним и несколькими значениями (метками), публикует список текущих алертов ― метрик, у которых значение превышает установленный порог; и значения установленных порогов в виде метрик с тем же названием и префиксом '<code>th_</code>', для возможности настройки Alertmanager в последующем. </p> <pre><code class=\"sql\">CREATE OR REPLACE PROCEDURE SMASTER.get_prometheus_metrics (i_debug NUMBER DEFAULT 0)\nIS\n    /******************************************************************************\n       NAME:       get_prometheus_metrics\n       PURPOSE:    Generating Prometheus formatted metrics from the Invoice DB\n\n       REVISIONS:\n       Ver        Date        Author           Description\n       ---------  ----------  ---------------  ------------------------------------\n       1.7        20/07/2021  SGolikov         1. Добавлены метрики со значениями порогов\n       1.6        15/07/2021  SGolikov         1. Исправена ошибка - в списке открытых алертов отсуствовали labeled алерты\n       1.5        09/07/2021  SGolikov         1. Добавлен параметр i_debug, с которым формируется только 1, 2, 3 или 4 части или все (0)\n                                               2. Добавлено удаление \" из имени метки\n       1.4        30/06/2021  SGolikov         1. Метка host заменена на hostname\n       1.3        29/06/2021  SGolikov         1. Вызов вокрера для сбора метрик realtime=1\n       1.2        25/06/2021  SGolikov         1. Добавлена метрика с числом метрик с ошибками расчета\n       1.1        25/06/2021  SGolikov         1. Добавлен вывод текущих активных метрик\n       1.0        28/04/2021  SGolikov         1. Created this procedure.\n    ******************************************************************************/\n    v_db_name        VARCHAR2 (100);\n    v_db_host        VARCHAR2 (100);\n    v_failed_count   NUMBER;\n\n    CURSOR c_single_metrics IS\n        SELECT LOWER (c.metric_name)     metric_name,\n               c.VALUE,\n               metric_type,\n               d.metric_desc\n          FROM metric_current c, metric_dict d\n         WHERE c.metric_name = d.metric_name AND enabled = 1 AND VALUE != -1;\n\n    --\n    CURSOR c_multi_metrics IS\n        SELECT LOWER (c.metric_name)                                                                     metric_name,\n               LOWER (c.label_name)                                                                      label_name,\n               TRIM (REGEXP_REPLACE (REGEXP_REPLACE (LOWER (c.label_value), '(\\\")'), '\\s{2,}', ' '))     label_value,\n               c.VALUE,\n               metric_type,\n               d.metric_desc\n          FROM metric_current_labeled c, metric_dict d\n         WHERE c.metric_name = d.metric_name AND enabled = 1;\n\n    CURSOR c_open_alerts IS\n        SELECT LOWER (c.metric_name)     metric_name,\n               c.VALUE,\n               c.threshold,\n               metric_type,\n               d.metric_desc\n          FROM metric_alerts c, metric_dict d\n         WHERE REGEXP_REPLACE (c.metric_name, '#.*') = d.metric_name AND enabled = 1 AND VALUE != -1;\n\n    CURSOR c_metric_thresholds IS\n        SELECT LOWER (c.metric_name)     metric_name,\n               c.threshold,\n               metric_type,\n               d.metric_desc\n          FROM metric_current c, metric_dict d\n         WHERE c.metric_name = d.metric_name AND enabled = 1 AND metric_type = 'gauge' AND c.threshold IS NOT NULL;\n--\n\n--\nBEGIN\n    -- Сбор метрик с realtime=1\n    inv_mon.worker (i_realtime =&gt; 1);\n    --\n    OWA.num_cgi_vars := 0;\n    HTP.init ();\n    OWA_UTIL.mime_header ('text/plain', TRUE, 'utf-8');\n\n    SELECT SYS_CONTEXT ('USERENV', 'DB_NAME') db_name, SYS_CONTEXT ('USERENV', 'SERVER_HOST') HOST\n      INTO v_db_name, v_db_host\n      FROM DUAL;\n\n    IF i_debug IN (0, 1)\n    THEN\n        --\n        -- Invoice single value metrics\n        --\n        FOR rec_single_metrics IN c_single_metrics\n        LOOP\n            HTP.PRINT ('# HELP ' || rec_single_metrics.metric_name || ' ' || rec_single_metrics.metric_desc);\n            HTP.PRINT ('# HELP ' || rec_single_metrics.metric_name || ' ' || rec_single_metrics.metric_type);\n            HTP.PRINT (rec_single_metrics.metric_name || '{db_name=\"' || v_db_name || '\",hostname=\"' || v_db_host || '\"} ' || rec_single_metrics.VALUE);\n        END LOOP;\n    END IF;\n\n    IF i_debug IN (0, 2)\n    THEN\n        --\n        --\n        -- Invoice multiple value metrics\n        --\n        FOR rec_multi_metrics IN c_multi_metrics\n        LOOP\n            HTP.PRINT ('# HELP ' || rec_multi_metrics.metric_name || ' ' || rec_multi_metrics.metric_desc);\n            HTP.PRINT ('# HELP ' || rec_multi_metrics.metric_name || ' ' || rec_multi_metrics.metric_type);\n            HTP.PRINT (\n                   rec_multi_metrics.metric_name\n                || '{db_name=\"'\n                || v_db_name\n                || '\",hostname=\"'\n                || v_db_host\n                || '\",'\n                || rec_multi_metrics.label_name\n                || '=\"'\n                || rec_multi_metrics.label_value\n                || '\"} '\n                || rec_multi_metrics.VALUE);\n        END LOOP;\n    END IF;\n\n    IF i_debug IN (0, 3)\n    THEN\n        --\n        --\n        -- Invoice open alerts\n        --\n        FOR rec_open_alerts IN c_open_alerts\n        LOOP\n            HTP.PRINT ('# HELP open_alert Metrics with a value greater than the threshold');\n            HTP.PRINT ('# HELP open_alert gauge');\n            HTP.PRINT (\n                   'open_alert{db_name=\"'\n                || v_db_name\n                || '\",hostname=\"'\n                || v_db_host\n                || '\",metric_name=\"'\n                || rec_open_alerts.metric_name\n                || '\",threshold=\"'\n                || rec_open_alerts.threshold\n                || '\"} '\n                || rec_open_alerts.VALUE);\n        END LOOP;\n    END IF;\n\n    IF i_debug IN (0, 4)\n    THEN\n        --\n        -- Invoice metric thresholds\n        --\n        FOR rec_threshold IN c_metric_thresholds\n        LOOP\n            HTP.PRINT ('# HELP threshold for ' || rec_threshold.metric_name || ' ' || rec_threshold.metric_desc);\n            HTP.PRINT ('# HELP ' || rec_threshold.metric_name || ' ' || rec_threshold.metric_type);\n            HTP.PRINT ('th_' || rec_threshold.metric_name || '{db_name=\"' || v_db_name || '\",hostname=\"' || v_db_host || '\"} ' || rec_threshold.threshold);\n        END LOOP;\n    END IF;\n\n\n    --\n    --\n    -- Invoice open alerts\n    --\n    SELECT COUNT (*)\n      INTO v_failed_count\n      FROM metric_current\n     WHERE err_msg IS NOT NULL;\n\n    HTP.PRINT ('# HELP failed_metrics_count Number of metrics with error');\n    HTP.PRINT ('# HELP failed_metrics_count counter');\n    HTP.PRINT ('failed_metrics_count{db_name=\"' || v_db_name || '\",hostname=\"' || v_db_host || '\"} ' || v_failed_count);\nEND get_prometheus_metrics;\n/</code></pre> <p>Созданному пользователю выдаются права на вызов процедуры и создается синоним</p> <pre><code class=\"sql\">SQL&gt; grant execute on smaster.GET_PROMETHEUS_METRICS to prometheus;\n \nSQL&gt; create synonym prometheus.GET_PROMETHEUS_METRICS for smaster.GET_PROMETHEUS_METRICS;</code></pre> <p>В результате сервис работает, процедура создана. Открываем в браузере URL в формате: </p> <pre><code>https://&lt;hostname&gt;:&lt;port&gt;/ords/&lt;db name&gt;/get_prometheus_metrics</code></pre> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Рис.4 Пример работы ORDS сервиса\" title=\"Рис.4 Пример работы ORDS сервиса\" height=\"740\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/e6a/14b/b7b/e6a14bb7b7f0ca32226ee1aa38118095.png\" data-width=\"925\"><figcaption>Рис.4 Пример работы ORDS сервиса</figcaption></figure> <h3>Сбор и накопление метрик в Prometheus</h3> <p>В конфигурационный файл Prometheus добавлен следующий блок:</p> <pre><code class=\"yaml\">- job_name: billing_monitor\n  metrics_path: /ords/db2104/get_prometheus_metrics\n  params:\n    i_debug: ['0']\n  scrape_interval: 60s\n  scrape_timeout: 50s\n  static_configs:\n    - targets:\n      - 192.168.хх.хх:7778\n      labels:\n        module: \"billingdb\"</code></pre> <p>Параметр i_debug я добавил для разделения списка всех метрик на 4 группы. Бывает, при наличии синтаксической ошибки, Prometheus не может распарсить вывод сервиса ORDS, и определить конкретную строку с ошибкой трудно. Мне не удалось найти средство, которое позволяет распарсить вывод и указать, на какой конкретно строке Prometheus спотыкается. Если вам известно решение, напишите в комментариях.</p> <p>Проверяем статус джоба в прометее:</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Рис.5 Статус джоба сбора метрик с биллинга в Prometheus\" title=\"Рис.5 Статус джоба сбора метрик с биллинга в Prometheus\" height=\"374\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/b37/014/7c5/b370147c55ac6b9ff0c4cf6739864939.png\" data-width=\"1891\"><figcaption>Рис.5 Статус джоба сбора метрик с биллинга в Prometheus</figcaption></figure> <p>И доступность метрик:</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Рис. 6 Просмотр метрики в Prometheus\" title=\"Рис. 6 Просмотр метрики в Prometheus\" height=\"526\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/a49/a8d/01e/a49a8d01ec5b10e4a4a8cfe9d4996767.png\" data-width=\"1914\"><figcaption>Рис. 6 Просмотр метрики в Prometheus</figcaption></figure> <h3>Визуализация метрик в Grafana</h3> <p>Для качественноого выполнения задачи нужны реальные данные. С одним из наших заказчиков была согласована разработка пилотной версии мониторинга, и уже на реальных данных с небольшого, но боевого комплекса я создал дашборд в Grafana. Источником выступают данные Prometheus. </p> <p>В верхней левой части скриншота присутствует информация о текущей и исторической утилизации CPU, количество выполняющихся сессий в БД и график событий ожидания активных сессий БД. Зеленый означает выполнение на CPU, синий ― ожидание чтения с диска. В итоге ― полет нормальный. Правее ― таблица текущих открытых алертов. Метрик гораздо больше, чем графиков, и не всегда по каждой метрике требуется график. Метрика попадает на экран, если ее текущее значение превысило установленный порог. Рядом правее ― два счетчика, количество метрик с ошибками расчета и время отставания репликации данных на резервную БД, с которой снимается большинство метрик. Ниже ― метрики самой биллинговой системы.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Рис.7 Дашборд, часть 1\" title=\"Рис.7 Дашборд, часть 1\" height=\"899\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/00a/26a/b3f/00a26ab3f4e073338fd94bd7eece3330.png\" data-width=\"1815\"><figcaption>Рис.7 Дашборд, часть 1</figcaption></figure> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Рис. 8 Дашборд, часть 2\" title=\"Рис. 8 Дашборд, часть 2\" height=\"846\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/590/e6a/dc9/590e6adc9ee11949655d3e52201b3116.png\" data-width=\"1816\"><figcaption>Рис. 8 Дашборд, часть 2</figcaption></figure> <p>Для удобства фильтрации по выбранной БД и хосту я создал переменные hostname и db_name:</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Рис. 9 Переменные для фильтров\" title=\"Рис. 9 Переменные для фильтров\" height=\"248\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/f0f/d32/386/f0fd323866afecd64697df622e06949c.png\" data-width=\"1067\"><figcaption>Рис. 9 Переменные для фильтров</figcaption></figure> <p>Для большинства метрик используется просто публикация метрики, с фильтром по имени хоста:</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Рис. 10  График активности сессий в БД\" title=\"Рис. 10  График активности сессий в БД\" height=\"815\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/315/d1e/ee9/315d1eee95f1719a13a36ab63e71bd84.png\" data-width=\"1270\"><figcaption>Рис. 10  График активности сессий в БД</figcaption></figure> <p>На указанном выше графике отображается статистика ASH по активным сессиям в Oracle с группировкой по классам ожидания ― требуется лицензия Oracle Diagnostic and Tuning Pack.</p> <p>В ходе разработки дашборда с метриками типа Counter я стокнулся с проблемой. Т.к. метрики собирались асинхронно с опросом источника со стороны Prometheus, т.е. метрика вычислялась джобом и сохранялась в таблицу, а Prometheus с равным интервалом считывал значение метрик через сервис ORDS, то периодически возникала ситуация, когда Prometheus считывал то же значение, что было в предыдущий раз. В какой-то момент дельта изменений счетчика была равна 0, а при следующем опросе получался двойной прирост счетчика. В итоге на графике была гребенка, не соответствующая действительности:</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt='Рис.11 Некорректный график по метрике \"Скорость тарификации\" ' title='Рис.11 Некорректный график по метрике \"Скорость тарификации\" ' height=\"736\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/cc3/d02/667/cc3d02667cc74e8a04d1ea35ad86129c.png\" data-width=\"1413\"><figcaption>Рис.11 Некорректный график по метрике \"Скорость тарификации\" </figcaption></figure> <p>Я сделал доработку и добавил признак realtime для метрик. Метрики с установленным флагом realtime теперь вычисляются не джобом, а в режиме реального времени, в момент запроса со стороны Prometheus. Все стало правдиво и красиво:</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt='Рис.12 Правильный график по метрике \"Скорость тарификации\"' title='Рис.12 Правильный график по метрике \"Скорость тарификации\"' height=\"624\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/6b2/862/f03/6b2862f037040eff1a96bbde9f20a4bc.png\" data-width=\"1273\"><figcaption>Рис.12 Правильный график по метрике \"Скорость тарификации\"</figcaption></figure> <p>Еще одна отличная функция, которую позволяет реализовать Prometheus, ― выявление аномалий. На основе <a href=\"https://about.gitlab.com/blog/2019/07/23/anomaly-detection-using-prometheus/\">статьи </a>и ее <a href=\"https://habr.com/ru/company/mailru/blog/499032/\">перевода я</a> написал формулы и сделал график, которые позволяют отслеживать факт нахождения текущих показателей метрики в границах, полученных на основе наблюдений за предыдущие 3 недели, с учетом отбрасывания нетипичных (праздничных) дней. И хотя визуальное отслеживание графика в масштабе нескольких часов или даже дней и так позволяет понять, находится ли показатель в норме, функция будет очень полезна именно для формирования алертов в автоматическом режиме. Конкретно эта метрика, по числу тарифицируемых звонков, показала себя не очень хорошо. Случаются \"ложные\" срабатывания в сторону увеличения числа тарифицируемых событий в момент массовых рассылок. Но такова действительность: запуск рассылки от МЧС или маркетологов трудно предсказать и учесть. В перспективе планирую допилить формулу так, чтобы она не реагировала на резкое увеличение значения метрики.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Рис.13 Выявление аномалий в скорости тарификации\" title=\"Рис.13 Выявление аномалий в скорости тарификации\" height=\"320\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/6ab/99d/3cf/6ab99d3cf1f4a6a00a211f6255504fa7.png\" data-width=\"890\"><figcaption>Рис.13 Выявление аномалий в скорости тарификации</figcaption></figure> <p>Формулы графика:</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Рис.14 Формула текущего значения скорости тарификации\" title=\"Рис.14 Формула текущего значения скорости тарификации\" height=\"223\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/fa0/99b/91a/fa099b91ab4463cbc7b5ddcf978888e5.png\" data-width=\"1265\"><figcaption>Рис.14 Формула текущего значения скорости тарификации</figcaption></figure> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Рис.15 Формула верхней границы типичной скорости тарификации\" title=\"Рис.15 Формула верхней границы типичной скорости тарификации\" height=\"384\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/2d1/368/67f/2d136867fc8cff5d0eb66c6fd3225009.png\" data-width=\"1266\"><figcaption>Рис.15 Формула верхней границы типичной скорости тарификации</figcaption></figure> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Рис.16 Формула нижней границы типичной скорости тарификации\" title=\"Рис.16 Формула нижней границы типичной скорости тарификации\" height=\"388\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/6d4/b49/aae/6d4b49aae24ebd05333b08eb97e6b9b7.png\" data-width=\"1266\"><figcaption>Рис.16 Формула нижней границы типичной скорости тарификации</figcaption></figure> <p>Дополнительно привожу настройки графика Series overrides, т.к. из оригинальной статьи не совсем очевидно следовало, как отображать именно границу допустимых значений. Я взял коэффициент 1,5:</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Рис. 17 Настройки графика\" title=\"Рис. 17 Настройки графика\" height=\"559\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/feb/41d/269/feb41d26962898e1de38b930bcd790d4.png\" data-width=\"531\"><figcaption>Рис. 17 Настройки графика</figcaption></figure> <p>Формула алерта:</p> <pre><code class=\"yaml\">root# vi alerts.billing.yml\ngroups:\n \n- name: 'Invoice Alerts'\n  rules:\n  - alert: 'calls_ratings_speed_outside_range'\n    expr: &gt;\n      abs(\n        (\n         job:inv_rating_calls_speed:rate5m -job:inv_rating_calls_speed:rate5m_prediction\n        ) / job:inv_rating_calls_speed:rate5m:stddev_over_time_1w\n      ) &gt; 1.5\n    for: 15m\n    labels:\n      severity: 'warning'\n    annotations:\n      title: \"Deviation for inv_rating_calls_speed &gt; 1.5x\"\n      description: 'Invoice calls rating speed {{ $labels.db_name }} is outside of expected operating parameters based observations over the past 3 weeks'</code></pre> <p>Скриншот сформированного алерта:</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Рис.18 Пример алерта\" title=\"Рис.18 Пример алерта\" height=\"445\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/ce5/98e/8b9/ce598e8b92d277090f9185f734dd1efa.png\" data-width=\"1140\"><figcaption>Рис.18 Пример алерта</figcaption></figure> <p>Чтобы визуализация отслеживания аномалий заработала, пришлось подождать несколько недель, пока накопилась история наблюдений и формулы стали выдавать результат. </p> <h3>Рассылка уведомлений</h3> <p>Помимо отправки уведомлений, реализованной в PL/SQL пакете, имеется возможность настроить Prometheus Alertmanager, который может отправлять алерты Slack, Teams, Telegram, Teams через специальные адаптеры, либо настроить Karma dashboard для удобного отображения алертов из Prometheus Alertmanager. </p> <p>Пример сформированного алерта в Karma dashboard:</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Рис.19 Пример алерта в Karma Alerts dashboard\" title=\"Рис.19 Пример алерта в Karma Alerts dashboard\" height=\"325\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/964/949/ac4/964949ac447bb51cbbfcee3731de9eff.png\" data-width=\"916\"><figcaption>Рис.19 Пример алерта в Karma Alerts dashboard</figcaption></figure> <p>На данный момент alertmanager планируется использовать как дополнительную опцию, только в случае явной потребности заказчика в уведомлениях по каналам, отличным от email.</p> <h3>Выводы</h3> <p>Решение с использованием Oracle REST Data Services, Prometheus, Grafana и с небольшой разработкой на PL/SQL позволило мне быстро и без закупки дополнительных лицензий реализовать мониторинг комплекса биллинговой системы. В едином графическом интерфейсе Grafana я объединил метрики приложения из БД, некоторые статистики работы самой БД Oracle и статистики сервера БД. Теперь в Grafana инженерам Bercut и заказчика доступен мониторинг всего работающего оборудования и ПО с использованием прочих экспортеров для OS Solaris, СХД, SAN и пр. С помощью единой платформы мониторинга время на выявление и локализацию проблемы, по моей оценке, сокращается на 15-60 минут. Используемое ПО позволяет легко добавить в комплекс мониторинга допы в виде отправки уведомлений по различным каналам; быстро адаптировать визуальное отображение данных и комбинировать разные источники метрик в одном дашборде. Grafana + Prometheus + ORDS ― это круто и современно!</p>",
        "is_active": true,
        "author": 1,
        "tag": "grafana",
        "add_datetime": "2021-11-24T11:58:09Z",
        "article_status_new": 4
    }
},
{
    "model": "mainapp.article",
    "pk": 1637747499,
    "fields": {
        "hub": 4,
        "name": "Дайджест событий для эйчаров и рекрутеров в IT на декабрь 2021",
        "image": "https://habrastorage.org/getpro/habr/upload_files/86f/90d/4ce/86f90d4ce73741af476afd6e14153891.png",
        "preview": "<figure class=\"full-width \"><img src=\"/img/image-l",
        "text": "<figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"600\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/86f/90d/4ce/86f90d4ce73741af476afd6e14153891.png\" data-width=\"1200\"><figcaption></figcaption></figure> <p>Когда, если не в декабре, подводить итоги года, анализировать пройденный путь и задумываться о планах на будущее? Вот и мы считаем, что лучшего времени не придумать. Если мысль стать ИТ-рекрутером не выходит у вас из головы, эта подборка мероприятий поможет сделать первый шаг в направлении смены карьеры. </p> <p>Традиционно новые анонсы будут появляться по мере выхода, так что не забывайте следить за обновлениями поста и комментариями.</p> <hr> <h3>HR-Менеджмент в IT (онлайн-курс)</h3> <p><strong>Когда:</strong> начало 2 декабря<br><strong>Стоимость:</strong> 4 440 ₽ (Отдельный урок), 9 620 ₽ (Оплата частями), 35 520 ₽ (Обычный)<br><strong>Организатор: </strong>Mike Pritula Academy</p> <p>Курс из 14 занятий поможет разобраться в специфике индустрии и освоить зарекомендовавшие себя практики управления HR в IT.</p> <ul><li><p>Типы и структуры IT-компании: стартап, продуктовая, аутсорс.</p></li><li><p>Кто такие айтишники, основные роли и чего они хотят.</p></li><li><p>Подбор, рекрутинг и сорсинг в IT.</p></li><li><p>Построение бренда работодателя и работа с Facebook.</p></li><li><p>Адаптация и корпоративная культура.</p></li><li><p>Мотивация сотрудников.</p></li><li><p>Зарплаты, премии и бонусы.</p></li><li><p>Бенефиты и опционы в IT.</p></li><li><p>Управление эффективностью и OKR.</p></li><li><p>Встречи 1:1 и командные встречи.</p></li><li><p>Системы автоматизации HR, ATS.</p></li><li><p>Развитие сотрудников в IT.</p></li><li><p>Обучение руководителей основам People Management.</p></li><li><p>Тимбилдинги и построение командной работы в IT.</p></li></ul> <p>→ <a href=\"https://pritula.academy/hrit\"><u>Подробности и регистрация</u></a></p> <h3>Битва за IT (конференция)</h3> <p><strong>Когда:</strong> 2 декабря <br><strong>Где:</strong> Москва, Проектируемый пр. № 4062, 6, стр. 16<br><strong>Стоимость:</strong> 10 000 ₽ (Онлайн), 26 000 ₽ (Оффлайн)<br><strong>Организатор:  </strong>Your Formula</p> <p>Российские и международные эксперты-практики соберутся, чтобы поделиться своим опытом привлечения, удержания и развития ИТ-специалистов, а также расскажут о тенденциях индустрии и подискутируют о перегретости рынка.</p> <p>1 трек. Подбор ИТ. Тактика и контрразведка в подборе ИТ:</p> <ul><li><p>Стратегия борьбы за ИТ-таланты. Аналитика.</p></li><li><p>Как и чем заинтересовать самые востребованные ИТ-кадры на перегретом рынке. Характерные особенности ИТ-специалистов и модели взаимодействия с ними на рынке труда.</p></li><li><p>Нужно ли обучение soft skills в ИТ? Почему да или почему нет?</p></li></ul> <p>2 трек. Обучение и развитие. Адаптация — огонь:</p> <ul><li><p>Особенности адаптации смешанных и дистанционных ИТ-команд.</p></li><li><p>Чему учить и как развивать: про скиллы и траектории развития.</p></li><li><p>Дискуссия на тему: Баллада о войне в ИТ. HR-инструменты: как применять, чтобы выигрывать?</p></li><li><p>Что я хотел бы знать, когда меня назначили тим-лидом.</p></li></ul> <p>3 трек. Мотивация. Энергия бойцов:</p> <ul><li><p>Как удержать ИТ-экспертов в небольшой компании и не отдать команду крупнякам.</p></li><li><p>Атмосфера в команде. Как мотивировать в ИТ работать на долгосрочную перспективу.</p></li><li><p>Развитие команды, осечки и попадание в цели.</p></li><li><p>Как собрать качественных ИТ-специалистов в стартап и удержать их на конкурентных рынках в России и США. Бренд продукта как инструмент отбора людей.</p></li><li><p>Как вдвое сократить процент отказов от офферов в компании, оперирующей в отрасли со сложной репутацией. Как найти и исправить ошибки в процессе найма. Как развитие мидл-менеджмента влияет на воронку. Как создать бренд работодателя в отрасли со сложным восприятием и привлекать таланты.</p></li></ul> <p>→ <a href=\"https://it-forums.ru/\"><u>Подробности и регистрация</u></a></p> <h3>HR PROFIT — полное погружение в сферу HR (онлайн-курс)</h3> <p><strong>Когда:</strong> начало 10 декабря<br><strong>Стоимость:</strong> 39 400 ₽<br><strong>Организатор: </strong>Digital Unicorn</p> <p>Подойдет для тех, кто хочет освоить профессию IT-рекрутера с нуля. Программа рассчитана на 2,5 месяца и включает, помимо лекций, HR-проекты и стажировку на реальных вакансиях.</p> <ul><li><p>Роль HR в IT-компании. Функции, уровни, полномочия, точки влияния.</p></li><li><p>HR в интересах бизнеса.</p></li><li><p>Рынок IT: технологии, терминология, роли и уровни специалистов.</p></li><li><p>Формирование профиля должности. Сорсинг.</p></li><li><p>Онбординг и адаптация сотрудника.</p></li><li><p>Корпоративная культура и HR-бренд компании.</p></li><li><p>Мотивация сотрудников: виды и способы.</p></li><li><p>Развитие и обучение сотрудников в компании.</p></li><li><p>Методы оценки эффективности сотрудников.</p></li><li><p>Управление текучестью персонала.</p></li><li><p>HR-аналитика.</p></li><li><p>Управление распределенной командой.</p></li><li><p>Управление собой и своей карьерой.</p></li><li><p>Профессиональный рекрутинг.</p></li></ul> <p>→ <a href=\"https://it-college.by/hrprofit\"><u>Подробности и регистрация</u></a></p> <h3>Хочу стать ИТ-рекрутером, с чего начать? (открытый урок)</h3> <p><strong>Когда:</strong> 11 декабря<br><strong>Стоимость:</strong> бесплатно<br><strong>Организатор: </strong>Topcareer</p> <p>Спикер расскажет, как изменилась профессия ИТ-рекрутера за последние 5 лет, какими компетенциями должен обладать ИТ-рекрутер, где найти своего первого заказчика и сколько можно зарабатывать на старте карьеры.</p> <p>→ <a href=\"https://top-career.ru/promo/it_recruitment\"><u>Подробности и регистрация</u></a></p> <h3>IT-Recruiter. Интенсив (онлайн-курс)</h3> <p><strong>Когда:</strong> начало 15 декабря<br><strong>Стоимость:</strong> 28 990 ₽<br><strong>Организатор: </strong>Level Up</p> <p>Курс для эйчаров и рекрутеров из любой сферы с опытом от одного года, на котором помимо освоения основных этапов найма научат разбираться в технологиях, языках программирования и фреймворках. Программа поделена на два модуля: технический и рекрутинговый. </p> <p>Технический модуль:</p> <ul><li><p>Введение в процессы разработки ПО. Цикл разработки ПО. Методологии разработки ПО.</p></li><li><p>Виды приложений. Виды архитектур. Архитектура клиент-сервер / Фронтенд, Бэкенд.</p></li><li><p>Языки программирования: Java, C++, C#, Python, Ruby, Javascript.</p></li><li><p>Парадигмы (виды) в программировании: ООП / процедурное / функциональное.</p></li><li><p>IDE. Устройство и основы работы в IDE. Обзор популярных и не очень.</p></li><li><p>Основы БД.</p></li><li><p>Основы архитектуры различных платформ / ОС. Работа с терминалом и командной строкой.</p></li><li><p>Фреймворки, платформы, библиотеки, CMS.</p></li><li><p>Разработка на разных языках с примерами резюме.</p></li><li><p>Тренды в разработке ПО. Обзор развивающихся технологий с большим потенциалом.</p></li><li><p>Профессии и специальности, роли в команде.</p></li></ul> <p>Рекрутинговый модуль:</p> <ul><li><p>Разновидности IT-компаний и особенности найма персонала в них. Проектная / функциональная / матричная структура управления.</p></li><li><p>Состав команд. Кто чем занимается, задачи и функции.</p></li><li><p>Работа с заявкой и нанимающим менеджером.</p></li><li><p>Работа с откликами.</p></li><li><p>Head-hunting.</p></li><li><p>Первый контакт с кандидатом. Методики проведения структурированных интервью (STAR, PAELA и др.).</p></li><li><p>Подготовка предложения о работе. Работа с возражениями (контр-оффер, решил остаться на текущем месте, далеко от дома и т.д.). Отказы.</p></li><li><p>Основы HR-аналитики.</p></li><li><p>Основы HR-брендинга.</p></li><li><p>Нетворкинг: правила ведения личных аккаунтов в социальных сетях, участе в конференциях и тематических митапах.</p></li></ul> <p>→ <a href=\"https://levelp.ru/courses/recruiting-hr/course-it-recruiter/\"><u>Подробности и регистрация</u></a></p> <h3>IT-рекрутер (онлайн-курс)</h3> <p><strong>Когда:</strong> начало 22 декабря<br><strong>Стоимость:</strong> 57 000 ₽ <br><strong>Организатор: </strong>Topcareer</p> <p>На курсе научат закрывать ИТ-вакансии, разбираться в специфике рынка, и использовать новые каналы поиска кандидатов. А еще можно будет попрактиковаться на реальных вакансиях и пройти бесплатную стажировку. </p> <ul><li><p>Роли в ИТ-рекрутменте — разбираем, какую карьеру вам строить и как быстро стартовать.</p></li><li><p>Изучаем ландшафт ИТ-профессий — погружение в специфику.</p></li><li><p>Топ-каналы для поиска кандидатов — где искать ИТ-персонал.</p></li><li><p>Ищем кандидатов на специфических ИТ-ресурсах. ИТ-ресурсы для сорсинга.</p></li><li><p>Онлайн хакатон по сорсингу от AmazingHiring.</p></li><li><p>Коммуникации с заказчиком — алгоритм эффективной работы.</p></li><li><p>Коммуникации с кандидатами — фишки и факапы, как выстраивать долгосрочные отношения.</p></li><li><p>Работа с коммьюнити. Рекрутмент на перспективу. Нетворкинг в ИТ.</p></li><li><p>Построение IT HR-бренда.</p></li></ul> <p>→ <a href=\"https://top-career.ru/courses/it_recruitment\"><u>Подробности и регистрация</u></a></p> <h3>Рекрутер в IT (онлайн-курс)</h3> <p><strong>Когда:</strong> начало 23 декабря<br><strong>Стоимость:</strong> 31 500 ₽ <br><strong>Организатор: </strong>TeachMeSkills</p> <p>Онлайн-курс с упором на практические занятия поможет разобраться в профессии ИТ-рекрутера за 1,5 месяца. Уроки будут проходить в Zoom и доступны в записи, а по домашним заданиям обратную связь будут давать преподаватели. </p> <ul><li><p>Портрет IT-рекрутера.</p></li><li><p>Об IT в целом и в частности.</p></li><li><p>Вакансия и резюме.</p></li><li><p>Технология поиска (сорсинг).</p></li><li><p>Коммуникация с кандидатами.</p></li><li><p>Интервью.</p></li><li><p>Помимо рекрутинга.</p></li><li><p>Итоги курса.</p></li><li><p>Онлайн-тренинг «Трудоустройство в IT».</p></li><li><p>Защита проектов.</p></li></ul> <p>→ <a href=\"https://teachmeskills.by/kursy-programmirovaniya/it-recruiter-online\"><u>Подробности и регистрация</u></a></p> <details class=\"spoiler\"><summary>Полезные эйчар-мероприятия</summary><div class=\"spoiler__content\"><ul><li><p>HR Кухня организует онлайн-конференцию <a href=\"https://hrkitchen.ru/graduaterecruitment\"><u>о построении HR-бренда для поколения Z</u></a> (2 декабря).</p></li><li><p>Friendwork подготовил двухдневное онлайн-событие <a href=\"https://friend.work/hrbmb\"><u>о трендах в HR</u></a> (2-3 декабря).</p></li><li><p>Еще одна онлайн-конференция, <a href=\"https://hraward.club/\"><u>посвященная новым практикам HR</u></a> (2 декабря), пройдет под эгидой эйчар-клуба «Как делать?».</p></li><li><p>От Хантфлоу выходит вебинар о том, <a href=\"https://huntflow.ru/events/recruitment-agency-webinar\"><u>как кадровому агентству выстроить репутацию на рынке</u></a> (2 декабря).</p></li><li><p>В Topcareer запланированы открытые уроки <a href=\"https://top-career.ru/courses/hr_tech\"><u>о цифровых технологиях в эйчар</u></a> (4 декабря) и <a href=\"https://top-career.ru/promo/grade\"><u>грейдировании</u></a> (5 декабря).</p></li><li><p>У LABA в декабре три курса: <a href=\"https://l-a-b-a.com/lecture/1672-hr-director\"><u>HR-директор</u></a> (7 декабря), <a href=\"https://l-a-b-a.com/lecture/1604-hr-marketing\"><u>HR-маркетинг</u></a> (8 декабря), <a href=\"https://l-a-b-a.com/lecture/583-upravlenie-komandoj\"><u>Управление командой</u></a> (20 декабря).</p></li><li><p>Event Today проводит конференцию <a href=\"https://eventtoday.biz/trudovoe-pravo-2021\"><u>о трендах трудового права в 2021 году</u></a> (9 декабря).</p></li><li><p>IMC запускает трехдневное мероприятие, <a href=\"https://i-m-c.ru/hr-digital-2021/\"><u>посвященное цифровизации в HR</u></a> (15-17 декабря).</p></li></ul></div></details> <h3>Об организаторах мероприятий</h3> <ol><li><p><a href=\"https://pritula.academy/\"><u>Mike Pritula Academy</u></a> — эйчар-академия Михаила Притулы.</p></li><li><p><a href=\"https://yourformula.ru/\"><u>Your Formula</u></a> — организатор тренингов и курсов.</p></li><li><p><a href=\"https://it-college.by/\"><u>Digital Unicorn</u></a> — белорусский центр дополнительного образования.</p></li><li><p><a href=\"https://top-career.ru/\"><u>Topcareer</u></a> — обучение специалистов по развитию карьеры.</p></li><li><p><a href=\"https://levelp.ru/\"><u>Level Up</u></a> — петербургский образовательный центр.</p></li><li><p><a href=\"https://teachmeskills.by/\"><u>TeachMeSkills</u></a> — белорусская школа программирования.</p></li></ol> <p>Если вы организатор мероприятий для эйчаров и рекрутеров в ИТ и хотите, чтобы они появлялись в наших дайджестах, пишите нам на ящик <a href=\"http://entries@habr.team/\"><u>entries@habr.team</u></a>.</p>",
        "is_active": true,
        "author": 1,
        "tag": "дайджест it hr событий",
        "add_datetime": "2021-11-24T12:15:09Z",
        "article_status_new": 4
    }
},
{
    "model": "mainapp.article",
    "pk": 1637747501,
    "fields": {
        "hub": 2,
        "name": "QR-коды были обнаружены ещё в средневековье",
        "image": "https://habrastorage.org/getpro/habr/upload_files/e36/360/1ab/e363601ab60574239b80d328acfb3910.png",
        "preview": "Сегодня редкий гражданин не знает, что такое \"Q",
        "text": "<p>Сегодня редкий гражданин не знает, что такое \"QR-код\" и как он выглядит. Достоверно неизвестно, является ли ввод и последующее их использование следствием пандемии (о них лучше рассказать в отдельной статье), однако черно-белые квадратики примелькались абсолютно всем. </p> <p>На фоне этого совсем недавно завирусилось изображение печати Крымского Хана Менгли Гирея I, жившего с 1445 по 1515 годы. Один из наиболее прославленных крымских ханов, взошедший на престол и правивший в общей сложности 45 лет: в 1466, 1468-1475 и 1478-1515 гг. Не буду вдаваться в подробности его жизни, отмечу лишь то, что его печать уж больно напоминает современные QR-коды. Только тут нет ссылки на наши Госуслуги, да и с этой фотографией в торговый центр не пустят.</p> <figure class=\"\"><img src=\"/img/image-loader.svg\" alt=\"Архивное фото документа\" title=\"Архивное фото документа\" height=\"340\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/e36/360/1ab/e363601ab60574239b80d328acfb3910.png\" data-width=\"340\"><figcaption>Архивное фото документа</figcaption></figure> <p>В сети пользователи предложили вот такой вариант считывания зашифрованной информации. К сожалению метод «Лабиринта», или в простонародье «змейки» не позволяет в полной мере расшифровать тайные значения всех узоров печати.</p> <figure class=\"\"><img src=\"/img/image-loader.svg\" alt=\"Фото взято из открытых источников\" title=\"Фото взято из открытых источников\" height=\"342\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/8f5/10c/07b/8f510c07b50f8f97bab9449419489b06.png\" data-width=\"329\"><figcaption>Фото взято из открытых источников</figcaption></figure> <p>Но это не единственный зарегистрированный случай в истории. Из солнечного Крыма переместимся в Запорожье. Перед вами представлена Ярлык (тюрк. - приказ) - тарханная грамота от имени хана Токтамыша (1380-1395). Документ состоит из объявления о пожаловании некоего Бек-хаджи землями и людьми в районе лимана Молочного на территории нынешней Запорожской области Украины) и условиях пожалования.</p> <p>Правда этот документ больше похож на брата QR-кода, а именно на Aztec Code из-за ровной квадратной части по центру. Подробнее об этом штрих-коде я писала <a href=\"https://habr.com/ru/post/578392/\" rel=\"noopener noreferrer nofollow\">в другой статье</a>.</p> <figure class=\"\"><img src=\"/img/image-loader.svg\" alt=\"Ярлык хана Токтамыша с двумя оттисками алой тамги. 1381 год \" title=\"Ярлык хана Токтамыша с двумя оттисками алой тамги. 1381 год \" height=\"336\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/251/0ad/f2e/2510adf2e81904e84367a7a4204b2779.png\" data-width=\"361\"><figcaption>Ярлык хана Токтамыша с двумя оттисками алой тамги. 1381 год </figcaption></figure> <p>Теперь же переместимся на Тибет. Miwang Polhanai Soinam Dobgyai широко известный как Фолхане, практически правил как „царь Тибета“ между 1728 и 1747 годами. Фолхейн был искусным политиком, испытанным в бою воином и гениальным полководцем. Времена идут, уже и новое столетие, а наброски QR-кода встречаются в нескольких уголках света. Совпадение? Не думаю.</p> <figure class=\"\"><img src=\"/img/image-loader.svg\" alt=\"Гербовая печать Pholhane\" title=\"Гербовая печать Pholhane\" height=\"355\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/a43/462/5f8/a434625f849eccbb8e5310604e063416.png\" data-width=\"347\"><figcaption>Гербовая печать Pholhane</figcaption></figure> <p>Все эти печати ничто иное, как копии более древней реализации идеи. Какое место сразу вспоминается при словах «древнее» и «продвинутые технологии»? Конечно же Египет. Считается, что самый древний египетский лабиринт, построенный в 2300 году до н. э., располагался у озера Биркет-Карун в окрестностях Каира. Это было огромное здание площадью 70 тысяч квадратных метров, обнесенное стеной.</p> <p>Опять же отсылка к <a href=\"https://www.fastreport.ru/ru/blog/show/barcode-aztec-net/\" rel=\"noopener noreferrer nofollow\">Aztec Code</a>. Вот только разобраться в том, кто у кого сплагиатил идею сложно. Достоверной даты сооружения ацтекских пирамид нет. Некоторые ученые относят их основание к 100 году до н.э., другие – к периоду между 1000 и 1500 годами до н.э. Третьи, опираясь на данные геологических исследований, говорят о времени около 4000 года до н.э.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Египетский Лабиринт. Реконструкция Афанасия Кирхера\" title=\"Египетский Лабиринт. Реконструкция Афанасия Кирхера\" height=\"323\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/af3/c7b/796/af3c7b796439f0eaa86444526ffe5a22.png\" data-width=\"552\"><figcaption>Египетский Лабиринт. Реконструкция Афанасия Кирхера</figcaption></figure> <p>Из прошлого, пожалуй, всё-таки вернёмся в будущее. Согласно данным “экспертов”, найденные на территории Мексики артефакты Майя являются предметами, сделанными когда-либо инопланетянами. Последняя находка, как заверяют сторонники паранормального, 100% была сотворена внеземными цивилизациями. Речь идет о статуе, на голове которой имеется загадочный Qr-код. В древности люди, понятное дело, не могли использовать подобные технологии. Впервые шифровать информацию штрих-кодами начали только в 1994 году.</p> <figure class=\"\"><img src=\"/img/image-loader.svg\" alt=\"Фото взято из открытых источников\" title=\"Фото взято из открытых источников\" height=\"336\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/b7c/f70/f13/b7cf70f130691ad123f2a85769522f82.png\" data-width=\"381\"><figcaption>Фото взято из открытых источников</figcaption></figure> <p>Разгадка этого необычного явления заключается в том, что просканировав код, ученые получили ссылку на интернет-магазин. Вероятнее всего, статуя была сделана скульптором, который выбрал код случайным образом. Признаю, что этот объект выглядит весьма мистически, хоть и сотворен человеком ради шутки.</p> <figure class=\"\"><img src=\"/img/image-loader.svg\" height=\"484\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/8a8/5eb/a33/8a85eba332baeaf083efda66474a957e.png\" data-width=\"444\"><figcaption></figcaption></figure> <p>Конечно же все вышеперечисленные факты из истории не связаны с современными QR-кодами. Данное сравнение выполнено в шуточной форме и носит лишь познавательный характер.</p> <p>Думаю, причина популярности образа QR-кода (как \"настоящего\", современного, так и доисторического прототипа) заключается в привлекательности строгих форм и лаконичности цветов. Согласитесь, красивые! </p>",
        "is_active": true,
        "author": 1,
        "tag": "qr-коды",
        "add_datetime": "2021-11-24T12:15:09Z",
        "article_status_new": 4
    }
},
{
    "model": "mainapp.article",
    "pk": 1637747501,
    "fields": {
        "hub": 5,
        "name": "Oracle Database Summit Russia: время поговорить о базах данных за чашечкой кофе",
        "image": "https://habrastorage.org/getpro/habr/upload_files/006/74d/cca/00674dccac8172c11b2d38ee13fd586a.png",
        "preview": "Привет, Хабр! Завтра и послезавтра у нас состои",
        "text": "<p>Привет, Хабр! Завтра и послезавтра у нас состоится крупное мероприятие, посвященное базам данных, причем не только флагманской СУБД Oracle, но также MySQL и TimesTen. А поскольку я принимаю непосредственное участие в организации этого ивента, то сегодня хочу пригласить присоединиться к сессиям или просто послушать пару докладов тех, кто работает с базами данных и интересуется тенденциями и направлениями развития. Это и IT-руководители, и DBA, и разработчики, создающие приложения для СУБД. Под катом — подробнее о мероприятии и ссылка на регистрацию.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"993\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/006/74d/cca/00674dccac8172c11b2d38ee13fd586a.png\" data-width=\"905\"><figcaption></figcaption></figure> <p>Итак, речь идет об Oracle Database Summit Russia. В этом году виртуальное мероприятие будет состоять из визионерских докладов ведущих спикеров, технологических докладов, ориентированных на DBA и разработчиков, а также практической части с демонстрацией возможностей управления и работы с данными и создания приложений с конвергентной СУБД в собственном дата-центре и в облаке. Мы хотим обсудить (и показать) последние технологии для <strong>Oracle 21c, Автономных Базах Данных, MySQL и TimesTen</strong>, а также поговорим о контейнерах, разработке ПО (в том числе с помощью APEX), гипермасштабировании СУБД, новых подходах к безопасности и о многом другом. </p> <p>Для тех, кто ищет способ создать высокопроизводительную среду для СУБД, несколько докладов будут посвящены программно-аппаратным комплексам Exadata и программе Cloud@Customer. Это решение позволяет получать облачные сервисы по подписке, размещая Exadata в своем (или партнерском) ЦОД. Надо сказать, что такая концепция становится все популярнее в связи с растущими нагрузками и ужесточением требований закона к хранению данных.</p> <figure class=\"\"><img src=\"/img/image-loader.svg\" height=\"200\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/f78/822/a85/f78822a85a2eb0f74757062e3a465873.png\" data-width=\"200\"><figcaption></figcaption></figure> <figure class=\"\"><img src=\"/img/image-loader.svg\" height=\"196\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/948/651/743/948651743b394e8dfdc5d7ea44f519e2.png\" data-width=\"196\"><figcaption></figcaption></figure> <p>В числе докладчиков вы услышите Марию Колган, менеджера по продуктам Oracle, известного блоггера (SQLMaria) и настоящего эксперта в области СУБД, а также Хуана Лоэйза, исполнительного вице-президента по критически важным технологиям в Oracle, “отца Exadata”. Их выступления будут посвящены прорывным технологиям, новым методам разработки и другим новшествам из мира баз данных. </p> <p>Много времени будет уделено рассказу о современных средствах разработки приложений, способах интеграции БД и приложений, реализации в БД прорывных технологий, таких как <strong>blockchain, machine learning, low code, sharding. </strong>И, конечно, мы поговорим об обеспечении надежности, безопасности и высокой производительности баз данных. </p> <p>Oracle Database Summit Russia будет проходить в онлайн-формате. Выступления международных спикеров будет происходить с русскоязычными слайдами и субтитрами. Если вы хотя бы иногда работаете с СУБД Oracle Database, MySQL или TimesTen или планируете это делать, почитайте <a href=\"https://go.oracle.com/LP=118448?elqCampaignId=302238\" rel=\"noopener noreferrer nofollow\"><u>агенду мероприятия</u></a>. Возможно, найдете для себя что-то интересное и полезное.</p>",
        "is_active": true,
        "author": 1,
        "tag": "oracle",
        "add_datetime": "2021-11-24T12:27:09Z",
        "article_status_new": 4
    }
},
{
    "model": "mainapp.article",
    "pk": 1637747504,
    "fields": {
        "hub": 1,
        "name": "Пулы потоков",
        "image": "https://habrastorage.org/getpro/habr/upload_files/a9d/7e4/65c/a9d7e465c0a8e621ef88220756abab51.png",
        "preview": "<figure class=\"full-width \"><img src=\"/img/image-l",
        "text": "<figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"439\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/a9d/7e4/65c/a9d7e465c0a8e621ef88220756abab51.png\" data-width=\"780\"><figcaption></figcaption></figure> <p>Потоки (thread) в приложении можно разделить на три категории:</p> <ol><li><p>Нагружающие процессор (CPU bound).</p></li><li><p>Блокирующие ввод-вывод (Blocking IO).</p></li><li><p>Неблокирующие ввод-вывод (Non-blocking IO).</p></li></ol> <p>У каждой из этих категорий своя оптимальная конфигурация и применение.</p> <p>Для задач, требующих процессорного времени, нужен пул с заранее созданными потоками с количеством потоков равным числу процессоров. Единственная работа, которая будет выполняться в этом пуле, — вычисления на процессоре, и поэтому нет смысла превышать их количество, если только у вас не какая-то специфическая задача, способная использовать Hyper-threading (в таком случае вы можете использовать удвоенное количество процессоров). Обратите внимание, что в старом подходе \"количество процессоров + 1\" речь шла о смешанной нагрузке, когда объединялись CPU-bound и IO-bound задачи. Мы не будем такого делать.</p> <p>Проблема с фиксированным пулом потоков заключается в том, что любая блокирующая операция ввода-вывода (да и вообще любая блокирующая операция) \"съест\" поток, а поток — очень ценный ресурс. Получается, что нам нужно любой ценой избегать блокировки CPU-bound пула. Но к сожалению, это не всегда возможно (например, при использовании библиотек с блокирующим вводом-выводом). В этом случае всегда следует переносить блокирующие операции (ввод-вывод и другие) в отдельный пул. Этот отдельный пул должен быть кэшируемым и неограниченным, без предварительно созданных потоков.  Честно говоря, такой пул очень опасен. Он не ограничивает вас и позволяет создавать все больше и больше потоков при блокировке других, что очень опасно. Обязательно стоит убедиться, что есть внешние ограничения, то есть существуют высокоуровневые проверки, гарантирующие выполнение в каждый момент времени только фиксированного количества блокирующих операций (это часто делается с помощью неблокирующей ограниченной очереди).</p> <p>Последняя категория потоков (если у вас не Swing / SWT) — это асинхронный ввод-вывод. Эти потоки в основном просто ожидают и опрашивают ядро на предмет уведомлений асинхронного ввода-вывода, и пересылают эти уведомления в приложение. Для этой задачи лучше использовать небольшое число фиксированных, заранее выделенных потоков. Многие приложения для этого используют всего один поток! У таких потоков должен быть максимальный приоритет, поскольку производительность приложения будет ограничена ими. Однако вы должны быть осторожны и никогда не выполнять какую-либо работу в этом пуле! Никогда, никогда, никогда. При получении уведомления вы должны немедленно переключиться обратно на CPU-пул. Каждая наносекунда, потраченная на поток (потоки) асинхронного ввода-вывода, добавляет задержки в ваше приложение. Поэтому производительность некоторых приложений можно немного улучшить, сделав пул асинхронного ввода-вывода в 2 или 4 потока, а не стандартно 1.</p> <h3>Глобальные пулы потоков</h3> <p>Я часто встречал советы о том, чтобы не использовать глобальные пулы потоков, такие как <code>scala.concurrent.ExecutionContext.global</code>. Этот совет основан на том, что к глобальным пулам потоков может получить доступ произвольный код (часто из библиотек), и вы не можете (легко) гарантировать, что этот код использует пул потоков правильно. Насколько это критично во многом зависит от вашего <code>classpath</code>. Глобальные пулы потоков довольно удобны, но можно создать свои глобальные пулы для приложения.</p> <p>Относитесь осторожно к любому фреймворку или библиотеке, затрудняющему настройку пула потоков или устанавливающему по умолчанию пул, которым вы не можете управлять.</p> <p>В любом случае у вас почти всегда будет какой-то синглтон, который будет содержать эти, предварительно настроенные, три пула. Если вы используете неявный <code>ExecutionContext</code>, то неявным стоит сделать CPU-пул, а остальные указывать явно.</p> <hr> <blockquote><p><strong>Материал подготовлен в рамках курса </strong><a href=\"https://otus.pw/89kq/\"><strong>«Scala-разработчик».</strong></a></p></blockquote>",
        "is_active": true,
        "author": 1,
        "tag": "scala",
        "add_datetime": "2021-11-23T20:11:09Z",
        "article_status_new": 4
    }
},
{
    "model": "mainapp.article",
    "pk": 1637747505,
    "fields": {
        "hub": 6,
        "name": "Пока, Хабр",
        "image": "https://habrastorage.org/getpro/habr/upload_files/973/6ef/8a5/9736ef8a53bf8ff8e238bb28912ec674.jpg",
        "preview": "Хабр я начал читать еще с самого начала его поя",
        "text": "<p>Хабр я начал читать еще с самого начала его появления, он даже назывался еще тогда Хабрахабр и довольно быстро стал самым популярным IT-ресурсом в Рунете. Без преувеличения, могу сказать, что его читали большинство айтишников рунета и часть за его пределами. Ресурс был реально крут, почти все статьи были про IT, и большинство из них были авторскими, нигде не публиковавшимися материалами.</p> <p>Время шло и Хабр начал терять крутых авторов из-за системы кармы, из-за которой многие авторы теряли карму в жару словесных баталий и не могли далее комментировать, так как были ограничения по карме. Это привело к очень известным постам типа <a href=\"https://habr.com/ru/post/468491/\" rel=\"noopener noreferrer nofollow\">такого</a>, но какой-либо реакции от администрации ресурса не было видно. Восстановить популярность Хабру не помогло ни разделение его на несколько сайтов, ни объединение потом обратно, ни даже огромное количество статей не по IT и чисто переводных.</p> <p>Я в принципе отношусь спокойно к любой критике и никогда не перехожу на личности. Более того, IT - это такая сфера, где нет единственно правильного решения задач. Кто-то любит табы, а не пробелы, кто-то работает в Idea, а кто-то и в Emacs, везде есть свои плюсы и минусы, но кидать за это минусы в карму - это как-то за пределом моего понимания. В итоге здесь складывается весьма токсичная атмосфера, где любая критика воспринимается в штыки и дождь из минусов обрушивается на того смельчака, кто попытался не согласиться с автором. За 3 моих статьи я получил несколько десятков плюсов в карму, но которые были весьма быстро нивелированы несколькими комментариями, где я позволил себе не согласиться с кем-то. </p> <p>Меня минусы в принципе мало беспокоят, если бы они не мешали писать статьи и комментировать. Но на текущий момент я не вижу для себя возможности продложать тут какую-либо деятельность, поэтому пара запланированных статей пойдет на другой ресурс, с более позитивной аудиторией.</p> <p><strong>Пока, Хабр!</strong></p> <figure class=\"\"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/973/6ef/8a5/9736ef8a53bf8ff8e238bb28912ec674.jpg\" width=\"405\" height=\"424\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/973/6ef/8a5/9736ef8a53bf8ff8e238bb28912ec674.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure>",
        "is_active": true,
        "author": 1,
        "tag": "пока",
        "add_datetime": "2021-11-23T20:43:09Z",
        "article_status_new": 4
    }
},
{
    "model": "mainapp.article",
    "pk": 1637747508,
    "fields": {
        "hub": 1,
        "name": "Как оптимизировать проект Data Science с помощью Prefect",
        "image": "https://habrastorage.org/getpro/habr/upload_files/d1d/cf5/eba/d1dcf5eba7b40e976b15d82bebb7c856.jpg",
        "preview": "<figure class=\"full-width \"><img src=\"https://habr",
        "text": "<figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/d1d/cf5/eba/d1dcf5eba7b40e976b15d82bebb7c856.jpg\" width=\"780\" height=\"440\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/d1d/cf5/eba/d1dcf5eba7b40e976b15d82bebb7c856.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>Есть ли способ оптимизировать рабочий процесс проекта Data Science всего в несколько строк кода? Да. Это Prefect. Делимся кратким руководством по работе с этим инструментом, пока у нас начинается <a href=\"https://skillfactory.ru/data-scientist-pro?utm_source=habr&amp;utm_medium=habr&amp;utm_campaign=article&amp;utm_content=data-science_dspr_231121&amp;utm_term=lead\">флагманский курс Data Science</a>.</p> <hr> <h2>Зачем это нужно?</h2> <p>Почему вас как специалиста по анализу данных должна волновать оптимизация рабочего процесса? Начнём с примера базового проекта в области науки о данных. Представьте, что вы работаете с набором данных Iris и начали с функций обработки данных.</p> <pre><code class=\"python\">from typing import Any, Dict, List\nimport pandas as pd\n\ndef load_data(path: str) -&gt; pd.DataFrame:\n    ...\n\n\ndef get_classes(data: pd.DataFrame, target_col: str) -&gt; List[str]:\n    \"\"\"Task for getting the classes from the Iris data set.\"\"\"\n    ...\n\n\ndef encode_categorical_columns(data: pd.DataFrame, target_col: str) -&gt; pd.DataFrame:\n    \"\"\"Task for encoding the categorical columns in the Iris data set.\"\"\"\n\n    ...\n\ndef split_data(data: pd.DataFrame, test_data_ratio: float, classes: list) -&gt; Dict[str, Any]:\n    \"\"\"Task for splitting the classical Iris data set into training and test\n    sets, each split into features and labels.\n    \"\"\"\n    ...</code></pre> <p>Определив функции, вы выполняете их.</p> <pre><code class=\"python\"># Define parameters\ntarget_col = 'species'\ntest_data_ratio = 0.2\n\n# Run functions\ndata = load_data(path=\"data/raw/iris.csv\")\ncategorical_columns = encode_categorical_columns(data=data, target_col=target_col)\nclasses = get_classes(data=data, target_col=target_col) \ntrain_test_dict = split_data(data=categorical_columns, \n                            test_data_ratio=test_data_ratio, \n                            classes=classes)</code></pre> <p>Код отработал нормально, и вы не увидели ничего плохого в выводе, поэтому считаете, что рабочий процесс достаточно хорош. Однако линейный рабочий процесс, как ниже, может иметь множество недостатков.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"189\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/3f6/42d/173/3f642d1737901a3434e09a6155f97dd3.png\" data-width=\"1000\"><figcaption></figcaption></figure> <p>Вот эти недостатки:</p> <ul><li><p>Если в функции get_classes произошла ошибка, вывод encode_categorical_columns будет потерян и рабочий процесс придётся начинать с начала. Это может быть неприятно, если выполнение функции encode_categorical_columns занимает много времени.</p></li></ul> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"393\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/f5e/76d/383/f5e76d383ad17f65229691274f22e326.png\" data-width=\"1000\"><figcaption></figcaption></figure> <ul><li><p>Поскольку функции encode_categorical_columns и get_classes не зависят друг от друга, их можно выполнять одновременно:</p></li></ul> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"356\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/2c2/c30/880/2c2c3088056a1ab86b690b1bcc1c6919.png\" data-width=\"700\"><figcaption></figcaption></figure> <p>Запуск функций таким образом может предотвратить трату времени на неработающие функции. Если в get_classes произошла ошибка, рабочий процесс перезапустится сразу, не дожидаясь завершения encode_categorical_columns.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"1213\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/594/f93/742/594f93742d8e0456b23f8de630c27aea.png\" data-width=\"1600\"><figcaption></figcaption></figure> <h2>Что такое Prefect?</h2> <p><a href=\"https://www.prefect.io/\">Prefect</a> — это фреймворк с открытым исходным кодом для построения рабочих процессов на Python. Он позволяет легко создавать, запускать и контролировать конвейеры данных различного масштаба. Чтобы установить его, выполните эту команду:</p> <pre><code class=\"python\">pip install prefect</code></pre> <h2>Строим рабочий процесс с Prefect</h2> <p>Чтобы узнать, как работает Prefect, давайте инкапсулируем рабочий процесс в начале статьи с его помощью.</p> <h3>1. Создаём задачи</h3> <p>Задача — это отдельное действие в Prefect. Начните с превращения определённых выше функций в задачи с помощью декоратора prefect.task:</p> <pre><code class=\"python\">from prefect import task\nfrom typing import Any, Dict, List\nimport pandas as pd\n\n@task\ndef load_data(path: str) -&gt; pd.DataFrame:\n    ...\n\n\n@task\ndef get_classes(data: pd.DataFrame, target_col: str) -&gt; List[str]:\n    \"\"\"Task for getting the classes from the Iris data set.\"\"\"\n    ...\n\n\n@task\ndef encode_categorical_columns(data: pd.DataFrame, target_col: str) -&gt; pd.DataFrame:\n    \"\"\"Task for encoding the categorical columns in the Iris data set.\"\"\"\n    ...\n\n@task\ndef split_data(data: pd.DataFrame, test_data_ratio: float, classes: list) -&gt; Dict[str, Any]:\n    \"\"\"Task for splitting the classical Iris data set into training and test\n    sets, each split into features and labels.\n    \"\"\"\n    ... </code></pre> <h3>2. Создаём поток</h3> <p>Поток Flow представляет весь рабочий процесс, управляя зависимостями между задачами. Чтобы создать поток, просто вставьте код запуска ваших функций внутри контекстного менеджера with Flow(...).</p> <pre><code class=\"python\">from prefect import task, Flow\n\nwith Flow(\"data-engineer\") as flow:\n    \n    # Define parameters\n    target_col = 'species'\n    test_data_ratio = 0.2\n    \n    # Define tasks\n    data = load_data(path=\"data/raw/iris.csv\")\n    classes = get_classes(data=data, target_col=target_col) \n    categorical_columns = encode_categorical_columns(data=data, target_col=target_col)\n    train_test_dict = split_data(data=categorical_columns, test_data_ratio=test_data_ratio, classes=classes)</code></pre> <p>Обратите внимание, что ни одна из этих задач не выполняется при выполнении приведённого выше кода. Prefect позволяет вам либо запустить поток сразу, либо запланировать его. Давайте попробуем сразу же выполнить поток при помощи flow.run():</p> <pre><code class=\"python\">with Flow(\"data-engineer\") as flow:\n  # Define your flow here\n  ...\n  \nflow.run()</code></pre> <p>Выполнив приведённый выше код, вы получите результат, подобный этому:</p> <pre><code class=\"python\">└── 15:49:46 | INFO    | Beginning Flow run for 'data-engineer'\n└── 15:49:46 | INFO    | Task 'target_col': Starting task run...\n└── 15:49:46 | INFO    | Task 'target_col': Finished task run for task with final state: 'Success'\n└── 15:49:46 | INFO    | Task 'test_data_ratio': Starting task run...\n└── 15:49:47 | INFO    | Task 'test_data_ratio': Finished task run for task with final state: 'Success'\n└── 15:49:47 | INFO    | Task 'load_data': Starting task run...\n└── 15:49:47 | INFO    | Task 'load_data': Finished task run for task with final state: 'Success'\n└── 15:49:47 | INFO    | Task 'encode_categorical_columns': Starting task run...\n└── 15:49:47 | INFO    | Task 'encode_categorical_columns': Finished task run for task with final state: 'Success'\n└── 15:49:47 | INFO    | Task 'get_classes': Starting task run...\n└── 15:49:47 | INFO    | Task 'get_classes': Finished task run for task with final state: 'Success'\n└── 15:49:47 | INFO    | Task 'split_data': Starting task run...\n└── 15:49:47 | INFO    | Task 'split_data': Finished task run for task with final state: 'Success'\n└── 15:49:47 | INFO    | Flow run SUCCESS: all reference tasks succeeded\nFlow run succeeded!</code></pre> <p>Чтобы понять рабочий процесс Prefect, полностью визуализируем его. Начните с установки prefect[viz]:</p> <pre><code class=\"python\">pip install \"prefect[viz]\"</code></pre> <p>Затем добавьте в код метод visualize:</p> <pre><code class=\"python\">flow.visualize()</code></pre> <p>И вы должны увидеть визуализацию рабочего процесса data-engineer:</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"794\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/567/682/6f5/5676826f52f71e94598fb2e46c3c833c.png\" data-width=\"1447\"><figcaption></figcaption></figure> <p>Обратите внимание, что Prefect автоматически управляет порядком выполнения задач, чтобы оптимизировать рабочий процесс. Это довольно круто в смысле дополнительных частей кода!</p> <h3>3. Добавляем параметры</h3> <p>Если вы часто экспериментируете с различными значениями одной переменной, идеальным вариантом будет превратить эту переменную в Parameter.</p> <pre><code class=\"python\">test_data_ratio = 0.2\ntrain_test_dict = split_data(data=categorical_columns, \n                            test_data_ratio=test_data_ratio, \n                            classes=classes)</code></pre> <p>Рассматривать Parameter можно как Task, за исключением того, что он может получать пользовательские данные при каждом запуске потока. Чтобы превратить переменную в параметр, воспользуйтесь task.Parameter.</p> <pre><code class=\"python\">from prefect import task, Flow, Parameter \n\ntest_data_ratio = Parameter(\"test_data_ratio\", default=0.2)\n\ntrain_test_dict = split_data(data=categorical_columns, \n                            test_data_ratio=test_data_ratio, \n                            classes=classes)</code></pre> <p>Первый аргумент Parameter задает имя параметра. default — необязательный аргумент, это значение параметра по умолчанию. Повторный запуск flow.visualize даст такой результат:</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"379\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/b44/ed6/4df/b44ed64df5fec6125cd81dffdb369618.png\" data-width=\"1000\"><figcaption></figcaption></figure> <p>Перезаписать параметр по умолчанию можно для каждого запуска:</p> <p>Добавим аргумент parameters в функцию flow.run():</p> <pre><code class=\"python\">flow.run(parameters={'test_data_ratio': 0.3})</code></pre> <ul><li><p>или воспользуемся CLI Prefect:</p></li></ul> <pre><code class=\"python\">$ prefect run -p data_engineering.py --param test_data_ratio=0.2 </code></pre> <ul><li><p>ещё вариант — файл JSON:</p></li></ul> <pre><code class=\"python\">$ prefect run -p data_engineering.py --param-file='params.json'</code></pre> <p>Файл JSON должен выглядеть примерно так:</p> <pre><code class=\"python\">{\"test_data_ratio\": 0.3}</code></pre> <p>Вы также можете изменять параметры каждого прогона с помощью программы Prefect Cloud. О ней поговорим ниже.</p> <h2>Мониторинг рабочего процесса</h2> <h3>Обзор</h3> <p>Prefect также позволяет контролировать рабочий процесс в Prefect Cloud. Чтобы установить зависимости Prefect Cloud, следуйте <a href=\"https://docs.prefect.io/orchestration/getting-started/set-up.html#server-or-cloud\">этой инструкции</a>. После установки и настройки всех зависимостей начните с создания проекта:</p> <pre><code class=\"python\">prefect create project \"Iris Project\"</code></pre> <p>Затем запустите локальный агент, чтобы развернуть потоки локально на одной машине:</p> <pre><code class=\"python\">prefect agent local start</code></pre> <p>Добавьте строку:</p> <pre><code class=\"python\">flow.register(project_name=\"Iris Project\")</code></pre> <p>… в конце вашего файла вы должны увидеть что-то похожее на это:</p> <pre><code class=\"python\">Flow URL: https://cloud.prefect.io/khuyentran1476-gmail-com-s-account/flow/dba26bea-8827-4db4-9988-3289f6cb662f\n └── ID: 2944dc36-cdac-4079-8497-be4ec5594785\n └── Project: Iris Project\n └── Labels: ['khuyen-Precision-7740']</code></pre> <p>Нажмите на URL-адрес в выводе, и вы будете перенаправлены на страницу обзора. На этой странице отображаются версия потока, время его создания, история выполнения потока и сводка выполнения.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"591\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/c27/701/8e4/c277018e4e6d80ea5fc2c1e53240b711.png\" data-width=\"1810\"><figcaption></figcaption></figure> <p>Вы также можете просмотреть сводку других запусков, время их выполнения и их конфигурацию.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"657\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/090/c7a/a59/090c7aa59449f355cec036da16a52ee9.png\" data-width=\"594\"><figcaption></figcaption></figure> <p>Очень здорово, что эта информация автоматически отслеживаются Prefect!</p> <h3>Запуск рабочего процесса с параметрами по умолчанию</h3> <p>Обратите внимание, что рабочий процесс зарегистрирован в Prefect Cloud, но ещё не выполняется. Чтобы выполнить рабочий процесс с параметрами по умолчанию, нажмите Quick Run в правом верхнем углу.</p> <figure class=\"\"><img src=\"/img/image-loader.svg\" height=\"118\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/96f/11d/172/96f11d172f9e3654757ed8009c09d070.png\" data-width=\"376\"><figcaption></figcaption></figure> <p>Щёлкните созданный прогон. Теперь вы увидите активность для вашего нового потока в режиме реального времени!</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"265\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/55d/6b1/d83/55d6b1d8354026a71d1aa998e5c55c31.gif\" data-width=\"1305\"><figcaption></figcaption></figure> <h3>Запуск рабочего процесса с пользовательскими параметрами</h3> <p>Чтобы запустить рабочий процесс с пользовательскими параметрами, перейдите на вкладку Run, а затем измените параметры в разделе Inputs.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"812\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/993/97f/8ba/99397f8ba72bb5286c0c19d3e70a0f94.png\" data-width=\"1885\"><figcaption></figcaption></figure> <p>Настроив параметры, просто нажмите кнопку Run, чтобы запустить прогон.</p> <h3>Просмотр графа рабочего процесса</h3> <p>Нажав кнопку Schematic, вы увидите граф всего рабочего процесса.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"507\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/ff2/6e3/8a5/ff26e38a542c99a779d7e8c72e37da76.png\" data-width=\"1000\"><figcaption></figcaption></figure> <h2>Другие функции</h2> <p>Prefect также предоставляет другие возможности, которые значительно повышают эффективность рабочего процесса.</p> <h3>Кеширование ввода</h3> <p>Помните проблему, о которой мы упоминали в начале статьи? Обычно, если функция get_classes завершится неудачей, то данные, созданные функцией encode_categorical_columns, будут отброшены, и весь рабочий процесс придётся начинать с самого начала.</p> <p>Однако в Prefect сохраняется вывод encode_categorical_columns. В следующий раз при повторном запуске рабочего процесса вывод encode_categorical_columns будет использован следующей задачей <strong>без повторного запуска</strong> encode_categorical_columns.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"950\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/0fd/82f/627/0fd82f62774fcb56aac693b204c1af10.png\" data-width=\"700\"><figcaption></figcaption></figure> <p>Это может привести к значительному сокращению времени выполнения рабочего процесса.</p> <h3>Сохранение вывода</h3> <p>Иногда вам может понадобиться экспортировать данные задачи. Это можно сделать, вставив код сохранения данных в функцию Task.</p> <pre><code class=\"python\">def split_data(data: pd.DataFrame, test_data_ratio: float, classes: list) -&gt; Dict[str, Any]:\n  \n  X_train, X_test, y_train, y_test = ...\n  \n  import pickle\n  pickle.save(...)</code></pre> <p>Однако это затруднит тестирование функции. Prefect позволяет легко сохранять результаты выполнения задачи на каждом запуске. Вот что нужно для этого сделать:</p> <p>Установите контрольную точку в True:</p> <pre><code class=\"python\">export PREFECT__FLOWS__CHECKPOINTING=true</code></pre> <p>Добавьте строку result = LocalResult(dir=...)) к декоратору @task .</p> <pre><code class=\"python\">from prefect.engine.results import LocalResult\n\n@task(result = LocalResult(dir='data/processed'))\ndef split_data(data: pd.DataFrame, test_data_ratio: float, classes: list) -&gt; Dict[str, Any]:\n    \"\"\"Task for splitting the classical Iris data set into training and test\n    sets, each split into features and labels.\n    \"\"\"\n    X_train, X_test, y_train, y_test = ...\n    \n    return dict(\n        train_x=X_train,\n        train_y=y_train,\n        test_x=X_test,\n        test_y=y_test,</code></pre> <p>Теперь вывод задачи split_data сохранится в директории data/processed:</p> <pre><code class=\"python\">prefect-result-2021-11-06t15-37-29-605869-00-00</code></pre> <p>Если вы хотите настроить имя вашего файла, добавьте к @task аргумент target:</p> <pre><code class=\"python\">from prefect.engine.results import LocalResult\n\n@task(target=\"{date:%a %b %d %H:%M:%S %Y}/{task_name}_output\", \n      result = LocalResult(dir='data/processed'))\ndef split_data(data: pd.DataFrame, test_data_ratio: float, classes: list) -&gt; Dict[str, Any]:\n    \"\"\"Task for splitting the classical Iris data set into training and test\n    sets, each split into features and labels.\n    \"\"\"\n    ...</code></pre> <p>Prefect также предоставляет другие классы Result, такие как GCSResult и S3Result. Результаты вывода API можно проверить <a href=\"https://docs.prefect.io/api/latest/engine/results.html\">здесь</a>.</p> <h3>Вывод других потоков в текущий поток</h3> <p>Если вы работаете с несколькими потоками, например с потоками data-engineer и data-science, вы, возможно, захотите использовать вывод data-engineer для data-science.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"290\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/8b0/41d/1ca/8b041d1ca038ff9c39b7c7ef12db19b8.png\" data-width=\"700\"><figcaption></figcaption></figure> <p> </p> <p>После сохранения вывода data-engineer вы можете прочитать их с помощью метода read.</p> <pre><code class=\"python\">from prefect.engine.results import LocalResult\n\ntrain_test_dict = LocalResult(dir=...).read(location=...).value</code></pre> <h3>Подключение зависимых потоков</h3> <p>Представьте ситуацию: вы создали два потока, которые зависят друг от друга. Поток data-engineer должен быть выполнен до потока data-science. Кто-то не понял взаимосвязи между этими двумя потоками. Потоки data-science и data-engineer были выполнены одновременно, и произошла ошибка!</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"800\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/7e1/606/30a/7e160630a6b5d30ce70de20e645460b4.png\" data-width=\"1394\"><figcaption></figcaption></figure> <p>Чтобы этого не произошло, мы должны определить взаимосвязь между потоками. К счастью, Prefect облегчает нам эту задачу. Начните с захвата двух различных потоков с помощью StartFlowRun. Добавьте wait=True к аргументу, чтобы нисходящий поток выполнялся только после завершения восходящего потока.</p> <pre><code class=\"python\">from prefect import Flow \nfrom prefect.tasks.prefect import StartFlowRun\n\ndata_engineering_flow = StartFlowRun(flow_name=\"data-engineer\", \n                                    project_name='Iris Project',\n                                    wait=True)\n                                    \ndata_science_flow = StartFlowRun(flow_name=\"data-science\", \n                                project_name='Iris Project',\n                                wait=True)</code></pre> <p>Вызовем data_science_flow с with Flow(...). Используйте upstream_tasks для указания задач/потоков, которые будут выполняться перед выполнением data-science.</p> <pre><code class=\"python\">with Flow(\"main-flow\") as flow:\n    result = data_science_flow(upstream_tasks=[data_engineering_flow])\n    \nflow.run()</code></pre> <p>Теперь два потока соединены:</p> <figure class=\"\"><img src=\"/img/image-loader.svg\" height=\"637\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/a91/b7c/52d/a91b7c52d43bbd876466cbc28ec8f6ad.png\" data-width=\"450\"><figcaption></figcaption></figure> <p> Очень круто!</p> <h3>Планируйте свой поток</h3> <p>Prefect также позволяет легко выполнить поток в определённое время или с определённым интервалом. К примеру, чтобы запускать поток каждую минуту, вы можете создать экземпляр класса IntervalSchedule и добавить schedule к with Flow(...):</p> <pre><code class=\"python\">from prefect.schedules import IntervalSchedule\n\nschedule = IntervalSchedule(\n    start_date=datetime.utcnow() + timedelta(seconds=1),\n    interval=timedelta(minutes=1),\n)\n\ndata_engineering_flow = ...\ndata_science_flow = ...\n\n\nwith Flow(\"main-flow\", schedule=schedule) as flow:\n    data_science = data_science_flow(upstream_tasks=[data_engineering_flow])</code></pre> <p>Теперь ваш поток будет повторяться каждую минуту! Узнать об этом больше вы можете узнать <a href=\"https://docs.prefect.io/core/concepts/schedules.html#overview\">здесь</a>.</p> <h3>Логирование</h3> <p>Логировать печать внутри задачи вы сможете, просто добавив log_stdout=True в @task :</p> <pre><code class=\"python\">@task(log_stdout=True)\ndef report_accuracy(predictions: np.ndarray, test_y: pd.DataFrame) -&gt; None:\n\n  target = ... \n  accuracy = ...\n    \n  print(f\"Model accuracy on test set: {round(accuracy * 100, 2)}\")</code></pre> <p>Вывод будет примерно таким:</p> <pre><code class=\"python\">[2021-11-06 11:41:16-0500] INFO - prefect.TaskRunner | Model accuracy on test set: 93.33</code></pre> <h2>Заключение</h2> <p>Поздравляю! Мы только что разобрались, как Prefect с помощью нескольких строк кода оптимизирует ваш рабочий процесс Data Science. Небольшая оптимизация в коде может привести к огромному повышению эффективности в долгосрочной перспективе. Свободно форкайте исходный код из этой статьи:</p> <p><a href=\"https://github.com/khuyentran1401/Data-science/tree/master/data_science_tools/prefect_example\">Код </a>на Github.</p> <p>Попробовать Prefect в деле вы сможете на наших курсах:</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"269\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/fca/e00/ea3/fcae00ea3d369019cda944622fe0e491.png\" data-width=\"1000\"><figcaption></figcaption></figure> <p><a href=\"https://skillfactory.ru/catalogue?utm_source=habr&amp;utm_medium=habr&amp;utm_campaign=article&amp;utm_content=sf_allcourses_231121&amp;utm_term=conc\">Узнать подробности</a> акции.</p> <ul><li><p><a href=\"https://skillfactory.ru/data-scientist-pro?utm_source=habr&amp;utm_medium=habr&amp;utm_campaign=article&amp;utm_content=data-science_dspr_231121&amp;utm_term=cat\">Профессия Data Scientist (24 месяца)</a></p></li><li><p><a href=\"https://skillfactory.ru/data-engineer?utm_source=habr&amp;utm_medium=habr&amp;utm_campaign=article&amp;utm_content=data-science_dea_231121&amp;utm_term=cat\">Курс по Data Engineering (10 недель)</a></p></li></ul> <details class=\"spoiler\"><summary>Профессии и курсы</summary><div class=\"spoiler__content\"><p><strong>Data Science и Machine Learning</strong></p><ul><li><p><a href=\"https://skillfactory.ru/data-scientist-pro?utm_source=habr&amp;utm_medium=habr&amp;utm_campaign=article&amp;utm_content=data-science_dspr_231121&amp;utm_term=cat\">Профессия Data Scientist</a></p></li><li><p><a href=\"https://skillfactory.ru/data-analyst-pro?utm_source=habr&amp;utm_medium=habr&amp;utm_campaign=article&amp;utm_content=analytics_dapr_231121&amp;utm_term=cat\">Профессия Data Analyst</a></p></li><li><p><a href=\"https://skillfactory.ru/matematika-dlya-data-science#syllabus?utm_source=habr&amp;utm_medium=habr&amp;utm_campaign=article&amp;utm_content=data-science_mat_231121&amp;utm_term=cat\">Курс «Математика для Data Science»</a></p></li><li><p><a href=\"https://skillfactory.ru/matematika-i-machine-learning-dlya-data-science?utm_source=habr&amp;utm_medium=habr&amp;utm_campaign=article&amp;utm_content=data-science_matml_231121&amp;utm_term=cat\">Курс «Математика и Machine Learning для Data Science»</a></p></li><li><p><a href=\"https://skillfactory.ru/data-engineer?utm_source=habr&amp;utm_medium=habr&amp;utm_campaign=article&amp;utm_content=data-science_dea_231121&amp;utm_term=cat\">Курс по Data Engineering</a></p></li><li><p><a href=\"https://skillfactory.ru/machine-learning-i-deep-learning?utm_source=habr&amp;utm_medium=habr&amp;utm_campaign=article&amp;utm_content=data-science_mldl_231121&amp;utm_term=cat\">Курс «Machine Learning и Deep Learning»</a></p></li><li><p><a href=\"https://skillfactory.ru/machine-learning?utm_source=habr&amp;utm_medium=habr&amp;utm_campaign=article&amp;utm_content=data-science_ml_231121&amp;utm_term=cat\">Курс по Machine Learning</a></p></li></ul><p><strong>Python, веб-разработка</strong></p><ul><li><p><a href=\"https://skillfactory.ru/python-fullstack-web-developer?utm_source=habr&amp;utm_medium=habr&amp;utm_campaign=article&amp;utm_content=coding_fpw_231121&amp;utm_term=cat\">Профессия Fullstack-разработчик на Python</a></p></li><li><p><a href=\"https://skillfactory.ru/python-for-web-developers?utm_source=habr&amp;utm_medium=habr&amp;utm_campaign=article&amp;utm_content=coding_pws_231121&amp;utm_term=cat\">Курс «Python для веб-разработки»</a></p></li><li><p><a href=\"https://skillfactory.ru/frontend-razrabotchik?utm_source=habr&amp;utm_medium=habr&amp;utm_campaign=article&amp;utm_content=coding_fr_231121&amp;utm_term=cat\">Профессия Frontend-разработчик</a></p></li><li><p><a href=\"https://skillfactory.ru/webdev?utm_source=habr&amp;utm_medium=habr&amp;utm_campaign=article&amp;utm_content=coding_webdev_231121&amp;utm_term=cat\">Профессия Веб-разработчик</a></p></li></ul><p><strong>Мобильная разработка</strong></p><ul><li><p><a href=\"https://skillfactory.ru/ios-razrabotchik-s-nulya?utm_source=habr&amp;utm_medium=habr&amp;utm_campaign=article&amp;utm_content=coding_ios_231121&amp;utm_term=cat\">Профессия iOS-разработчик</a></p></li><li><p><a href=\"https://skillfactory.ru/android-razrabotchik?utm_source=habr&amp;utm_medium=habr&amp;utm_campaign=article&amp;utm_content=coding_andr_231121&amp;utm_term=cat\">Профессия Android-разработчик</a></p></li></ul><p><strong>Java и C#</strong></p><ul><li><p><a href=\"https://skillfactory.ru/java-razrabotchik?utm_source=habr&amp;utm_medium=habr&amp;utm_campaign=article&amp;utm_content=coding_java_231121&amp;utm_term=cat\">Профессия Java-разработчик</a></p></li><li><p><a href=\"https://skillfactory.ru/java-qa-engineer-testirovshik-po?utm_source=habr&amp;utm_medium=habr&amp;utm_campaign=article&amp;utm_content=coding_qaja_231121&amp;utm_term=cat\">Профессия QA-инженер на JAVA</a></p></li><li><p><a href=\"https://skillfactory.ru/c-sharp-razrabotchik?utm_source=habr&amp;utm_medium=habr&amp;utm_campaign=article&amp;utm_content=coding_cdev_231121&amp;utm_term=cat\">Профессия C#-разработчик</a></p></li><li><p><a href=\"https://skillfactory.ru/game-razrabotchik-na-unity-i-c-sharp?utm_source=habr&amp;utm_medium=habr&amp;utm_campaign=article&amp;utm_content=coding_gamedev_231121&amp;utm_term=cat\">Профессия Разработчик игр на Unity</a></p></li></ul><p><strong>От основ — в глубину</strong></p><ul><li><p><a href=\"https://skillfactory.ru/algoritmy-i-struktury-dannyh?utm_source=habr&amp;utm_medium=habr&amp;utm_campaign=article&amp;utm_content=coding_algo_231121&amp;utm_term=cat\">Курс «Алгоритмы и структуры данных»</a></p></li><li><p><a href=\"https://skillfactory.ru/c-plus-plus-razrabotchik?utm_source=habr&amp;utm_medium=habr&amp;utm_campaign=article&amp;utm_content=coding_cplus_231121&amp;utm_term=cat\">Профессия C++ разработчик</a></p></li><li><p><a href=\"https://skillfactory.ru/cyber-security-etichnij-haker?utm_source=habr&amp;utm_medium=habr&amp;utm_campaign=article&amp;utm_content=coding_hacker_231121&amp;utm_term=cat\">Профессия Этичный хакер</a></p></li></ul><p><strong>А также:</strong></p><ul><li><p><a href=\"https://skillfactory.ru/devops-ingineer?utm_source=habr&amp;utm_medium=habr&amp;utm_campaign=article&amp;utm_content=coding_devops_231121&amp;utm_term=cat\">Курс по DevOps</a></p></li><li><p><a href=\"https://skillfactory.ru/catalogue?utm_source=habr&amp;utm_medium=habr&amp;utm_campaign=article&amp;utm_content=sf_allcourses_231121&amp;utm_term=cat\">Все курсы</a></p></li></ul></div></details>",
        "is_active": true,
        "author": 1,
        "tag": "skillfactory",
        "add_datetime": "2021-11-23T23:04:09Z",
        "article_status_new": 4
    }
},
{
    "model": "mainapp.article",
    "pk": 1637747510,
    "fields": {
        "hub": 1,
        "name": "Проект — Аллозавр",
        "image": "https://habrastorage.org/getpro/habr/upload_files/3eb/6d0/f02/3eb6d0f02edd56a95fc3fa31b5c4eba7.jpeg",
        "preview": "<blockquote><strong><em>Автор: Александр Яскин.",
        "text": "<blockquote><p><strong><em>Автор: Александр Яскин. Редактор: Ефимов Самир.</em></strong></p></blockquote> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/3eb/6d0/f02/3eb6d0f02edd56a95fc3fa31b5c4eba7.jpeg\" alt=\"Купленный скан аллозавра, доработанный под модель.\" title=\"Купленный скан аллозавра, доработанный под модель.\" width=\"1448\" height=\"909\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/3eb/6d0/f02/3eb6d0f02edd56a95fc3fa31b5c4eba7.jpeg\" data-blurred=\"true\"><figcaption>Купленный скан аллозавра, доработанный под модель.</figcaption></figure> <p>Приветствуем всех на официальной странице научно-просветительского сообщества Фанерозой на Хабре! Для начала хочется поблагодарить всех наших читателей, поддерживающих нас все это время. Всё началось в ноябре 2018 года, когда в «Вконтакте» был создан одноимённый паблик. </p> <figure class=\"float full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/1b5/aaa/af2/1b5aaaaf220e37bd731df2ab13edd073.jpeg\" alt=\"Александр Яскин\" title=\"Александр Яскин\" width=\"1620\" height=\"2160\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/1b5/aaa/af2/1b5aaaaf220e37bd731df2ab13edd073.jpeg\" data-blurred=\"true\"><figcaption>Александр Яскин</figcaption></figure> <p>Тогда группой заведовали 2 человека: это я, (Александр Яскин) и Маргарита Маяк. Спустя некоторое время нас стало трое. Цифра 3 вообще имеет немалый смыл в становлении Фанерозоя. Так, в последующие 3 года наша команда расширялась и теперь включает в себя биологов, врача, палеонтолога и многих других специалистов, которые стали дружной командой, а вместе с тем и семьей. Не малый вклад в развитие проекта сделал Самир Ефимов, который также решил создать страницу Фанерозоя на Хабре. Если кратко, то мы популяризируем биологию, историю науки, биоинформатику, биотехнологию и смежные отрасли. Мы пишем статьи о теории эволюции, о современных и вымерших животных, об экологии и о многом другом. </p> <figure class=\"float \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/587/44a/590/58744a5903f4b236c92bb520dc980330.jpeg\" alt=\"Маргарита Маяк\" title=\"Маргарита Маяк\" width=\"480\" height=\"640\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/587/44a/590/58744a5903f4b236c92bb520dc980330.jpeg\" data-blurred=\"true\"><figcaption>Маргарита Маяк</figcaption></figure> <p>Наша главная цель — не просто рассказывать об интересных фактах, а формировать комплексное представление об окружающем нас мире. Ответить на следующие вопросы: Кто мы такие? Откуда мы пришли? Почему мы ведём себя так, а не иначе? Как появилось все живое вокруг нас? На все эти вопросы мы даём естественно-научный ответ. Впереди у нас очень много задумок и проектов. Один из них, это создание точнейшей пантамической реконструкции черепа аллозавра. Мы хотим создать точную реплику черепа самого большого вида аллозавров. Длина черепа этого животного достигала полтора метра. После создания, череп планируется использовать для взаимодействия с ВУЗами и музеями на благотворительной основе. Такого черепа нет ни в одном вузе нашей страны!</p> <p>Представьте себе этот раздаточный материал для студентов, на котором можно было бы изучать сравнительную анатомию между вымершими динозаврами и живыми — птицами. Разве это не круто?</p> <figure class=\"float full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/265/ab3/77c/265ab377ca29950f61815a329c913a13.jpg\" alt=\"Ефимов Самир с подарочным черепом неандертальца. Сейчас этот череп находится на кафедре зоологии РГПУ им. А.И. Герцена.\" title=\"Ефимов Самир с подарочным черепом неандертальца. Сейчас этот череп находится на кафедре зоологии РГПУ им. А.И. Герцена.\" width=\"1200\" height=\"1600\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/265/ab3/77c/265ab377ca29950f61815a329c913a13.jpg\" data-blurred=\"true\"><figcaption>Ефимов Самир с подарочным черепом неандертальца. Сейчас этот череп находится на кафедре зоологии РГПУ им. А.И. Герцена.</figcaption></figure> <p>Мы думаем, что это круто, к тому же у нас уже есть опыт создания реконструкций черепов. Наш коллега и владелец мастерской <a href=\"https://vk.com/nessiterabf\" rel=\"noopener noreferrer nofollow\">Nessitera | Bones Factory</a> — <a href=\"https://vk.com/doc.kesh\" rel=\"noopener noreferrer nofollow\">Kesh Corvus</a> делал реконструкцию черепа детёныша тираннозавра, трицератопса, о котором, кстати, будет подробная техническая статья о создании экспоната: от устранения недостатков модели, до итогового продукта. Помимо него Kesh делал череп и скелет велоцираптора, а также черепа и наших с вами далеких предков, один из которых был подарен кафедре биологии РГПУ им. А. И. Герцена. О нём кстати была отдельная статья <a href=\"https://habr.com/ru/post/571708/\" rel=\"noopener noreferrer nofollow\">здесь</a>. Тем не менее, для создания такого большого проекта, как череп аллозавра, нам необходима ваша помощь. Череп стоит больше 80 тысяч рублей, часть суммы которой уже собрана в нашем сообществе «<a href=\"https://vk.com/phanerozoi\" rel=\"noopener noreferrer nofollow\">вконтакте</a>», в основном благодаря силам сообщества. </p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/a26/0b3/e23/a260b3e23d8d1686c11b1117715937e4.jpeg\" alt=\"Аллозавр в сравнении с человеком\" title=\"Аллозавр в сравнении с человеком\" width=\"1020\" height=\"765\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/a26/0b3/e23/a260b3e23d8d1686c11b1117715937e4.jpeg\" data-blurred=\"true\"><figcaption>Аллозавр в сравнении с человеком</figcaption></figure> <div class=\"tm-iframe_temp\" data-src=\"https://embedd.srv.habr.com/iframe/619d6eb6edd610f626b80d5b\" data-style=\"\" id=\"619d6eb6edd610f626b80d5b\" width=\"\"></div> <p>В данный момент мы проходим регистрацию на краудфайдинговой платформе <a href=\"https://planeta.ru\" rel=\"noopener noreferrer nofollow\">planeta. ru</a>, где мы презентуем наш проект. Все полученные денежные средства на этой платформе мы будем тратить на материалы для печати на 3д принтере и на материалы для ручной обработки черепа, чтобы придать ему естественный вид, ибо все наши реконструкции с точки зрения анатомии верны. Ниже мы продемонстрируем наши изделия, на которые было потрачено +100500 часов 3D печати и столько же  часов ручной работы. Начнём мы пожалуй с черепов  подаренных известному антропологу <a href=\"https://vk.com/id15342645?w=wall15342645_59976\" rel=\"noopener noreferrer nofollow\">Станиславу Дробышевскому</a>.</p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/15a/cca/17a/15acca17af4c7ed3316fff8b25aba541.jpeg\" alt=\"Череп Флоренса и череп Проконсула\" title=\"Череп Флоренса и череп Проконсула\" width=\"908\" height=\"605\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/15a/cca/17a/15acca17af4c7ed3316fff8b25aba541.jpeg\" data-blurred=\"true\"><figcaption>Череп Флоренса и череп Проконсула</figcaption></figure> <p>Далее во всей красе вы увидите тот самый подаренный череп неандертальца на кафедре зоологии РГПу.</p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/d20/c41/030/d20c41030faead6f9a87dd0a8d9057f0.jpeg\" alt=\"Пока стоит в рыбах, но это временно\" title=\"Пока стоит в рыбах, но это временно\" width=\"1080\" height=\"952\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/d20/c41/030/d20c41030faead6f9a87dd0a8d9057f0.jpeg\" data-blurred=\"true\"><figcaption>Пока стоит в рыбах, но это временно</figcaption></figure> <p>Череп пекинского человека точь-в-точь как с музейной полки. </p> <details class=\"spoiler\"><summary>Фото оригинала</summary><div class=\"spoiler__content\"><figure class=\"\"><img src=\"/img/image-loader.svg\" height=\"273\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/e1d/588/581/e1d5885817cef7003f410de7269133a1.png\" data-width=\"300\"><figcaption></figcaption></figure></div></details> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Реплика реконструкции черепа пекинского человека.\" title=\"Реплика реконструкции черепа пекинского человека.\" height=\"688\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/f5f/1a3/9df/f5f1a39df6ded0148682ad62383b19af.png\" data-width=\"1014\"><figcaption>Реплика реконструкции черепа пекинского человека.</figcaption></figure> <p>Давайте теперь поглядим на динозавров:</p> <p>Итак, первым нас встречает череп детёныша тираннозавра сделанный для нашего друга, спикера форума \"Учёные против мифов\", <a href=\"https://vk.com/crazy_paleo\" rel=\"noopener noreferrer nofollow\">Упоротого Палеонтолога</a>.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Надеюсь он его не сильно кусает=)\" title=\"Надеюсь он его не сильно кусает=)\" height=\"747\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/028/38f/ce9/02838fce948244a93387d7b05bac2ae7.png\" data-width=\"992\"><figcaption>Надеюсь он его не сильно кусает=)</figcaption></figure> <p>Череп велоцираптора:</p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/2f8/5f3/82a/2f85f382a40396f9a010ab6447ce3374.jpeg\" alt=\"Прям свежий=)\" title=\"Прям свежий=)\" width=\"2560\" height=\"1244\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/2f8/5f3/82a/2f85f382a40396f9a010ab6447ce3374.jpeg\" data-blurred=\"true\"><figcaption>Прям свежий=)</figcaption></figure> <p>Полный скелет велоцираптора:</p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/09e/9e7/272/09e9e7272d75afe9adb7045390651807.jpeg\" alt=\"Скелет делался на основе реконструкции Хартмана\" title=\"Скелет делался на основе реконструкции Хартмана\" width=\"2560\" height=\"1920\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/09e/9e7/272/09e9e7272d75afe9adb7045390651807.jpeg\" data-blurred=\"true\"><figcaption>Скелет делался на основе реконструкции Хартмана</figcaption></figure> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/140/d43/cc4/140d43cc4c0b7cb2b3162356dee99c56.jpeg\" alt=\"зловещая тень)\" title=\"зловещая тень)\" width=\"2560\" height=\"1920\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/140/d43/cc4/140d43cc4c0b7cb2b3162356dee99c56.jpeg\" data-blurred=\"true\"><figcaption>зловещая тень)</figcaption></figure> <p>Ну и напоследок держите череп трицератопса. Обещаем, что по нему скоро выпустим крутой технический материал в виде статьи. Я думаю она вам понравится!</p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/2c5/0cd/3fd/2c50cd3fdf79a383f5221305447c5258.jpeg\" alt=\"Наша няша.\" title=\"Наша няша.\" width=\"2560\" height=\"1244\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/2c5/0cd/3fd/2c50cd3fdf79a383f5221305447c5258.jpeg\" data-blurred=\"true\"><figcaption>Наша няша.</figcaption></figure> <p>По сути эта небольшая статья является тизером нашей масштабной  статьи о создании черепа трицератопса, а также анонсом нашего  крауда, а потому ссылки на краудфайдинг не будет, однако она появится в будущем под нашими статьями. Если Вам не всё равно на развитие научпопа и науки в целом, то мы будем рады, если Вы нас поддержите в будущем. Спасибо за внимание. В скором времени будет много всего интересного! Берегите себя и близких! С уважением к Вам, Александр Яскин.</p>",
        "is_active": true,
        "author": 1,
        "tag": "биология",
        "add_datetime": "2021-11-24T02:22:09Z",
        "article_status_new": 4
    }
},
{
    "model": "mainapp.article",
    "pk": 1637747511,
    "fields": {
        "hub": 2,
        "name": "С++17 wrapper для OpenSSL: ECDH и AES 256",
        "image": "https://habrastorage.org/getpro/habr/upload_files/054/9ec/005/0549ec005a97a11db3c8e8fec9d2c762.jpg",
        "preview": "<figure class=\"full-width \"><img src=\"https://habr",
        "text": "<figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/054/9ec/005/0549ec005a97a11db3c8e8fec9d2c762.jpg\" width=\"753\" height=\"428\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/054/9ec/005/0549ec005a97a11db3c8e8fec9d2c762.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>При написании одного клиент-серверного приложения на С++ потребовалось организовать защищённое соединение между двумя удалёнными узлами. Я сразу обратил внимание на алгоритмы использующиеся в TLS 1.3. Опустив реализацию TLS-сертификатов и взяв только часть ответственную за шифрования данных, я приступил к работе. Информацию пришлось выискивать в во множестве совершенно разных источниках(от официальной документации OpenSSL, до ответов на stackoverflow), а местами даже додумывать каким образом скрепить куски кода из этих самых разных источников. Так что после успешной реализации задуманного, я решил написать данную статью, с целью помочь тем кто будет решать подобную проблему. В данной статье мы рассмотрим простую реализацию связки <a href=\"https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%BE%D1%82%D0%BE%D0%BA%D0%BE%D0%BB_%D0%94%D0%B8%D1%84%D1%84%D0%B8_%E2%80%94_%D0%A5%D0%B5%D0%BB%D0%BB%D0%BC%D0%B0%D0%BD%D0%B0_%D0%BD%D0%B0_%D1%8D%D0%BB%D0%BB%D0%B8%D0%BF%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85_%D0%BA%D1%80%D0%B8%D0%B2%D1%8B%D1%85\" rel=\"noopener noreferrer nofollow\">алгоритма согласования ключей Диффи-Хеллман на элиптических кривых</a> и <a href=\"https://ru.wikipedia.org/wiki/AES_(%D1%81%D1%82%D0%B0%D0%BD%D0%B4%D0%B0%D1%80%D1%82_%D1%88%D0%B8%D1%84%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)\" rel=\"noopener noreferrer nofollow\">алгоритма симметричного шифрования AES 256</a> с использованием библиотеки OpenSSL для организации защищённого соединения.</p> <h2>Генерация ключей ECDH</h2> <p>Заголовочный файл выглядит следующим образом:</p> <pre><code class=\"cpp\">#ifndef SECURITY_HPP\n#define SECURITY_HPP\n\n#include &lt;openssl/ecdh.h&gt;\n#include \"byte_array.hpp\"\n\nnamespace security {\n\n/**\n * @brief AES256 key and initialization vector\n */\nstruct AES_t {\n  uint8_t key[32] = {\n    0,0,0,0,0,0,0,0,0,0,\n    0,0,0,0,0,0,0,0,0,0,\n    0,0,0,0,0,0,0,0,0,0,\n    0,0\n  };\n  uint8_t init_vector[16] = {\n    0,0,0,0,0,0,0,0,0,0,\n    0,0,0,0,0,0\n  };\n  bool isEmpty() const {\n      static const AES_t empty_aes;\n      return !std::memcmp(this, &amp;empty_aes, sizeof (AES_t));\n  }\n  void clear() {*this = AES_t();}\n  AES_t() = default;\n  AES_t(ByteArray data) {\n    *this = *reinterpret_cast&lt;AES_t*&gt;(data.begin());\n  }\n};\n\n// ECDH\n/**\n * @brief Generate ECDH key pair\n * @return ECDH key pair\n */\nEVP_PKEY* genKey();\n\n/**\n * @brief Free key memory\n * @param key\n */\nvoid freeKey(EVP_PKEY* key);\n\n/**\n * @brief Extract public key from key pair\n * @param key_pair\n * @return ByteArray with public key\n */\nByteArray extractPublicKey(EVP_PKEY* key_pair);\n\n/**\n * @brief Extract private key from key pair\n * @param key_pair\n * @return ByteArray with private key\n */\nByteArray extractPrivateKey(EVP_PKEY* key_pair);\n\n/**\n * @brief Conver ByteArrays to key pair\n * @param priv_key_raw\n * @param pub_key_raw\n * @return ECDH key pair\n */\nEVP_PKEY* getKeyPair(ByteArray priv_key_raw, ByteArray pub_key_raw);\n\n/**\n * @brief Get AES256 key and initialization vector from ECDH keys\n * @param peer_key - public key from other side\n * @param key_pair - private key from this side\n * @return AES256 key and initialization vector\n */\nAES_t getSecret(ByteArray peer_key, EVP_PKEY* key_pair);\n\n// AES256\n/**\n * @brief Encrypt message\n * @param plain_text\n * @param aes_struct\n * @return Cyphertext\n */\nByteArray encrypt(ByteArray plain_text, AES_t aes_struct);\n\n/**\n * @brief Decrypt message\n * @param ciphertext\n * @param aes_struct\n * @return plain_text\n */\nByteArray decrypt(ByteArray ciphertext, AES_t aes_struct);\n\n/**\n* @brief Encode data with base64\n* @param decoded\n* @return\n*/\nByteArray encodeBase64(ByteArray decoded);\n\n/**\n* @brief Decode base64 data\n* @param encoded\n* @return\n*/\nByteArray decodeBase64(ByteArray encoded);\n\n}\n\n#endif // SECURITY_HPP\n</code></pre> <p>Для работы со всеми нижеописанными функциями OpenSSL нам потрубуется подключить в файл реализации следующие заголовочные файлы:</p> <pre><code class=\"cpp\">// файл security.cpp\n#include \"security.hpp\"\n\n#include &lt;openssl/conf.h&gt;\n#include &lt;openssl/err.h&gt;\n// EVP\n#include &lt;openssl/evp.h&gt;\n// AES\n#include &lt;openssl/aes.h&gt;\n// ECDH\n#include &lt;openssl/ec.h&gt;\n#include &lt;openssl/pem.h&gt;\n\n#include &lt;stdexcept&gt;\n\n// Обработка ошибок\nvoid handleErrors() {\n  ERR_print_errors_fp(stderr);\n  throw std::runtime_error(\"Security error\");\n}\n\n// Нижеприведённый код здесь</code></pre> <p>Для начала каждая из сторон должна сгенрировать пары ключей ECDH. Для работы с ключами ECDH будем использовать высокоуровневый интерфейс OpenSSL - <a href=\"https://wiki.openssl.org/index.php/EVP\" rel=\"noopener noreferrer nofollow\">EVP</a>.</p> <pre><code class=\"cpp\">EVP_PKEY* security::genKey() {\n  EVP_PKEY* key_pair = nullptr;\t\t\t\t\t\t// Ключевая пара\n  EVP_PKEY_CTX* param_gen_ctx = nullptr; \t// Контекст генерации параметров\n  EVP_PKEY_CTX* key_gen_ctx = nullptr;\t\t// Контекст генерации ключа\n  EVP_PKEY* params= nullptr;\t\t\t\t\t\t\t// Параметры ключа\n\n  // Выделяем память для контекста генерации параметров EC-ключа\n  if(!(param_gen_ctx = EVP_PKEY_CTX_new_id(EVP_PKEY_EC, NULL))) handleErrors();\n  // Инициализируем контекст генерации параметров EC-ключа\n  if(!EVP_PKEY_paramgen_init(param_gen_ctx)) handleErrors();\n\n  // Задаём элиптичекую кривую prime256v1\n  if(!EVP_PKEY_CTX_set_ec_paramgen_curve_nid(param_gen_ctx, NID_X9_62_prime256v1))\n    handleErrors();\n\n  // Генерируем параметры\n  if(!EVP_PKEY_paramgen(param_gen_ctx, &amp;params)) handleErrors();\n\n  // Выделяем память для контекста генерации EC-ключа\n  if(!(key_gen_ctx = EVP_PKEY_CTX_new(params, nullptr))) handleErrors();\n  // Инициализируем контекст генерации EC-ключа\n  if(!EVP_PKEY_keygen_init(key_gen_ctx)) handleErrors();\n  // Генерируем ключ\n  if(!EVP_PKEY_keygen(key_gen_ctx, &amp;key_pair)) handleErrors();\n\n  // Высвобождаем память контекста генерации параметров\n  EVP_PKEY_CTX_free(param_gen_ctx);\n  // Высвобождаем память контекста генерации ключа\n  EVP_PKEY_CTX_free(key_gen_ctx);\n  // Возвращаем указатель ключевой пары\n  return key_pair;\n}</code></pre> <h2>Извлечение ключей ECDH из ключевой пары EVP_PKEY* в \"сырой буффер\"</h2> <p>Для передачи по сети или же для хранения в файле полезно знать как извлечь публичный и приватный ключ из указателя на EVP_PKEY.</p> <p>Поскольку работаем мы с C++ для хранения сырых данных можно использовать <code>std::vector&lt;uint8_t&gt;</code> или класс на подобии нижеописанного:</p> <pre><code class=\"cpp\">// Файл byte_array.hpp\n#ifndef BYTE_ARRAY_HPP\n#define BYTE_ARRAY_HPP\n\n#include &lt;cstdint&gt;\n#include &lt;cstring&gt;\n#include &lt;utility&gt;\n#include &lt;new&gt;\n#include &lt;malloc.h&gt;\n\nclass ByteArray {\n  uint8_t* byte_array = nullptr;\n  uint64_t _length = 0;\n  public:\n  typedef uint8_t* iterator;\n  // Конструктор по умолчанию\n  ByteArray() = default;\n  \n  // Коснтруктор с выделением памяти\n  ByteArray(uint64_t length)\n    : byte_array(new uint8_t[length]),\n  \t\t_length(length) {}\n  \n  // Конструктор копирования из сырого буфера\n  ByteArray(void* buffer, uint64_t length)\n    : byte_array(new uint8_t[length]),\n      _length(length) {\n        memcpy(byte_array, buffer, _length);\n      }\n  \n  // Конструктор копирования\n  ByteArray(ByteArray&amp; other)\n    : byte_array(new uint8_t[other._length]),\n      _length(other._length) {\n        memcpy(byte_array, other.byte_array, _length);\n      }\n  \n  // Конструктор перемещения\n  ByteArray(ByteArray&amp;&amp; other)\n    : byte_array(other.byte_array),\n      _length(other._length) {\n        other.byte_array = nullptr;\n      }\n  \n  // Деструктор\n  ~ByteArray() {if(byte_array) delete[] byte_array;}\n  \n  // Изменить размер\n  void resize(uint64_t new_length) {\n  \t_length = new_length;\n  \tbyte_array = (uint8_t*)realloc(byte_array, _length);\n  }\n  \n  // Добавить размер\n  iterator addSize(uint64_t add) {\n    byte_array = (uint8_t*)realloc(byte_array, _length + add);\n    iterator it = byte_array + _length;\n    _length += add;\n    memset(it, 0, add);\n    return it;\n  }\n  \n  // Getter для размера\n  inline uint64_t length() {return _length;}\n  // Оператор взятие елемента\n  inline uint8_t&amp; operator[](uint64_t index) {return byte_array[index];}\n  // Оператор присвоения\n  inline ByteArray&amp; operator=(ByteArray other) {\n    this-&gt;~ByteArray();\n    return *new(this) ByteArray(std::move(other));\n  }\n  \n  // Итераторы для range-based for\n  // for(auto byte : byte_array_object) {...}\n  inline iterator begin() {return byte_array;}\n  inline iterator end() {return byte_array + _length;}\n};\n\n#endif // BYTE_ARRAY_HPP</code></pre> <p>Функция извлечения публичного ключа:</p> <pre><code class=\"cpp\">ByteArray security::extractPublicKey(EVP_PKEY* key_pair) {\n  EC_KEY* ec_key = EVP_PKEY_get1_EC_KEY(key_pair);\n  EC_POINT* ec_point = const_cast&lt;EC_POINT*&gt;(EC_KEY_get0_public_key(ec_key));\n\n  EVP_PKEY* public_key = EVP_PKEY_new();\n  EC_KEY* public_ec_key = EC_KEY_new_by_curve_name(NID_X9_62_prime256v1);\n\n  EC_KEY_set_public_key(public_ec_key, ec_point);\n  EVP_PKEY_set1_EC_KEY(public_key, public_ec_key);\n\n\n  EC_KEY *temp_ec_key = EVP_PKEY_get0_EC_KEY(public_key);\n\n  if(temp_ec_key == NULL) handleErrors();\n\n  const EC_GROUP* group = EC_KEY_get0_group(temp_ec_key);\n  point_conversion_form_t form = EC_GROUP_get_point_conversion_form(group);\n\n  unsigned char* pub_key_buffer;\n  size_t length = EC_KEY_key2buf(temp_ec_key, form, &amp;pub_key_buffer, NULL);\n  if(!length) handleErrors();\n  ByteArray data(pub_key_buffer, length);\n\n  OPENSSL_free(pub_key_buffer);\n  EVP_PKEY_free(public_key);\n  EC_KEY_free(ec_key);\n  EC_KEY_free(public_ec_key);\n  EC_POINT_free(ec_point);\n\n  return data;\n}</code></pre> <p>Функция извлечения приватного ключа:</p> <pre><code class=\"cpp\">ByteArray security::extractPrivateKey(EVP_PKEY* key_pair) {\n  EC_KEY* ec_key = EVP_PKEY_get1_EC_KEY(key_pair);\n  const BIGNUM* ec_priv = EC_KEY_get0_private_key(ec_key);\n  int length = BN_bn2mpi(ec_priv, nullptr);\n  ByteArray data(length);\n  BN_bn2mpi(ec_priv, data.begin());\n  return data;\n}</code></pre> <p>Для получения пары ключей EVP из двух \"сырых буферов\" можно воспользоваться следующей функцией:</p> <pre><code class=\"cpp\">EVP_PKEY* security::getKeyPair(ByteArray priv_key_raw, ByteArray pub_key_raw) {\n  EVP_PKEY* key_pair = EVP_PKEY_new();\n  EC_KEY *ec_key = EC_KEY_new_by_curve_name(NID_X9_62_prime256v1);\n\n  const EC_GROUP* ec_group = EC_KEY_get0_group(ec_key);\n  EC_POINT* ec_point = EC_POINT_new(ec_group);\n  EC_POINT_oct2point(ec_group, ec_point, pub_key_raw.begin(), pub_key_raw.length(), nullptr);\n  EC_KEY_set_public_key(ec_key, ec_point);\n  EC_POINT_free(ec_point);\n\n  BIGNUM* priv = BN_mpi2bn(priv_key_raw.begin(), priv_key_raw.length(), nullptr);\n  EC_KEY_set_private_key(ec_key, priv);\n  BN_free(priv);\n\n  EVP_PKEY_set1_EC_KEY(key_pair, ec_key);\n  EC_KEY_free(ec_key);\n  return key_pair;\n}</code></pre> <p>Для хранения или передачи ключей не в бинарном, а в текстовом формате можно закодировать буффер с помощью кодировки base64 которая так же поддерживается в OpenSSL:</p> <pre><code class=\"cpp\">// Закодировать в base64\nByteArray security::encodeBase64(ByteArray decoded) {\n  ByteArray encoded((4*((decoded.length()+2)/3)) + 1);\n  EVP_EncodeBlock(encoded.begin(), decoded.begin(), decoded.length());\n  return encoded;\n}\n\n// Декодировать из base64\nByteArray security::decodeBase64(ByteArray encoded) {\n  ByteArray decoded((3*encoded.length()/4) + 1);\n  size_t recived_data_size = EVP_DecodeBlock(decoded.begin(), encoded.begin(), encoded.length());\n  if(recived_data_size &lt; decoded.length())\n    decoded.resize(recived_data_size);\n  return decoded;\n}</code></pre> <h2>Получение общего секрета через протокол ECDH</h2> <p>Каждая из сторон сгенерировала по ключевой паре и успешно обменялась своими публичными ключами. Теперь каждая из сторон должна получить \"общий секрет\" хэш от которого будет использоваться как ключ AES 256. Для начала определим структуру ключа AES 256:</p> <pre><code class=\"cpp\">struct AES_t {\n  // 32 байта для ключа\n  uint8_t key[32] = {\n    0,0,0,0,0,0,0,0,0,0,\n    0,0,0,0,0,0,0,0,0,0,\n    0,0,0,0,0,0,0,0,0,0,\n    0,0\n  };\n  // 16 байт для вектора инициализации\n  uint8_t init_vector[16] = {\n    0,0,0,0,0,0,0,0,0,0,\n    0,0,0,0,0,0\n  };\n  \n  // В общей сумме размер ключа 48 байт или 384 бита\n  \n  // Проверка на пустоту ключа\n  bool isEmpty() const {\n    static const AES_t empty_aes;\n    return !std::memcmp(this, &amp;empty_aes, sizeof (AES_t));\n  }\n  // Очистить ключ\n  void clear() {*this = AES_t();}\n  // Конструктор по умолчанию\n  AES_t() = default;\n  // Конструктор из ByteArray\n  AES_t(ByteArray data) {\n    *this = *reinterpret_cast&lt;AES_t*&gt;(data.begin());\n  }\n}</code></pre> <p>Как мы видим структура для AES 256 ключа занимает 48 байт или 384 бита, а следовательно для получения AES 256 ключа из общего секрета подойдёт хэш-дайджест размером в 384 бит, то есть нам подходят такие алгоритмы хэширования как sha384(sha2) и sha3_384(ранее известен как Keccak). Не стоит воспринимать алгоритм sha3 как приемника алгоритма sha2, на текущий момент принято считать что оба алгоритма достаточно безопасны для использования, что не сказать про sha1. Оба этих алгоритма поддерживаются OpenSSL, но в данном случае всё-таки воспользуемся алгоритмом sha3_384.</p> <pre><code class=\"cpp\">AES_t security::getSecret(ByteArray peer_key, EVP_PKEY* key_pair) {\n  EC_KEY *temp_ec_key = nullptr;\n  EVP_PKEY *peerkey = nullptr;\n\n  // Извлекаем полученный с другой стороны публичный ключ\n  // из сырого буффера в EVP_PKEY*\n  temp_ec_key = EC_KEY_new_by_curve_name(NID_X9_62_prime256v1);\n  if(temp_ec_key == nullptr)\n    handleErrors();\n  if(EC_KEY_oct2key(temp_ec_key, peer_key.begin(), peer_key.length(), NULL) != 1)\n    handleErrors();\n  if(EC_KEY_check_key(temp_ec_key) != 1) handleErrors();\n  peerkey = EVP_PKEY_new();\n  if(peerkey == NULL)\n    handleErrors();\n  if(EVP_PKEY_assign_EC_KEY(peerkey, temp_ec_key)!= 1)\n    handleErrors();\n\n  // Получение общего секрета\n  EVP_PKEY_CTX *derivation_ctx = EVP_PKEY_CTX_new(key_pair, NULL);\n  EVP_PKEY_derive_init(derivation_ctx);\n  EVP_PKEY_derive_set_peer(derivation_ctx, peerkey);\n  size_t lenght;\t// Размер общего секрета\n  void* ptr;\t\t\t// Указатель на буффер с общим секретом\n  if(1 != EVP_PKEY_derive(derivation_ctx, NULL, &amp;lenght)) handleErrors();\n  if(NULL == (ptr = OPENSSL_malloc(lenght))) handleErrors();\n  if(1 != (EVP_PKEY_derive(derivation_ctx, (unsigned char*)ptr, &amp;lenght))) handleErrors();\n  EVP_PKEY_CTX_free(derivation_ctx);\n  EVP_PKEY_free(peerkey);\n\n  // Хэшируем общий секрет и записываем в структуру AES_t\n  AES_t aes_key;\n  EVP_MD_CTX *mdctx;\n  if((mdctx = EVP_MD_CTX_new()) == NULL)\n    handleErrors();\n  if(1 != EVP_DigestInit_ex(mdctx, EVP_sha384(), NULL))\n    handleErrors();\n  if(1 != EVP_DigestUpdate(mdctx, ptr, lenght))\n    handleErrors();\n  unsigned int length;\n  if(1 != EVP_DigestFinal_ex(mdctx, (unsigned char*)&amp;aes_key, &amp;length))\n    handleErrors();\n  EVP_MD_CTX_free(mdctx);\n  OPENSSL_free(ptr);\n  return aes_key;\n}</code></pre> <h2>Шифрование и дешифрование с использованием AES 256</h2> <p>На текущий момент обе стороны имеют согласованный ключ AES 256 и теперь можно приступить непосредственно к шифрованию данных:</p> <pre><code class=\"cpp\">ByteArray security::encrypt(ByteArray plain_text, AES_t aes_struct) {\n  // Рассчитываем длинну шифротекста\n  ByteArray ciphertext(plain_text.length() % AES_BLOCK_SIZE == 0\n                       ? plain_text.length()\n                       : (plain_text.length() / AES_BLOCK_SIZE + 1) * AES_BLOCK_SIZE);\n\n  // Инициализация контекста шифра\n  EVP_CIPHER_CTX *ctx;\n  if(!(ctx = EVP_CIPHER_CTX_new()))\n    handleErrors();\n  if(1 != EVP_EncryptInit_ex(ctx, EVP_aes_256_cbc(), nullptr, aes_struct.key, aes_struct.init_vector))\n    handleErrors();\n\n  // Шифрование исходного текста\n  int f_length, s_length;\n  if(1 != EVP_EncryptUpdate(ctx, ciphertext.begin(), &amp;f_length, plain_text.begin(), plain_text.length()))\n    handleErrors();\n\n  // Иногда для записи шифротекста требутеся дополнительный AES блок\n  if(uint64_t(f_length) == ciphertext.length())\n    ciphertext.addSize(AES_BLOCK_SIZE);\n  else if(uint64_t(f_length) &gt; ciphertext.length())\n    throw std::runtime_error(\"Predicted ciphertext size lower then actual!\");\n\n  // Запись последнего AES блока\n  if(1 != EVP_EncryptFinal_ex(ctx, ciphertext.begin() + f_length, &amp;s_length))\n    handleErrors();\n  \n  // Уменьшение размера данных до размера записанного шифротекста\n  if(uint64_t reuired_length = f_length + s_length; reuired_length &lt; ciphertext.length())\n    ciphertext.resize(f_length + s_length);\n  else if(reuired_length &gt; ciphertext.length())\n    throw std::runtime_error(\"Predicted ciphertext size lower then actual!\");\n\n  // Высвобождения выделенной памяти для контекста шифра\n  EVP_CIPHER_CTX_free(ctx);\n\n  return ciphertext;\n}</code></pre> <p>Дешифровка данных выглядит следующим образом:</p> <pre><code class=\"cpp\">ByteArray security::decrypt(ByteArray ciphertext, AES_t aes_struct) {\n  ByteArray plain_text(ciphertext.length());\n\n  // Инициализация контекста шифра\n  EVP_CIPHER_CTX *ctx;\n  if(!(ctx = EVP_CIPHER_CTX_new()))\n    handleErrors();\n  if(1 != EVP_DecryptInit_ex(ctx, EVP_aes_256_cbc(), NULL, aes_struct.key, aes_struct.init_vector))\n    handleErrors();\n\n  // Дешифровка шифротекста\n  int f_length, s_length;\n  if(1 != EVP_DecryptUpdate(ctx, plain_text.begin(), &amp;f_length, ciphertext.begin(), ciphertext.length()))\n    handleErrors();\n  if(1 != EVP_DecryptFinal_ex(ctx, plain_text.begin() + f_length, &amp;s_length))\n    handleErrors();\n  \n  // Уменьшение размера буффера до размера полученных данных\n  plain_text.resize(f_length + s_length);\n\n  // Высвобождения выделенной памяти для контекста шифра\n  EVP_CIPHER_CTX_free(ctx);\n\n  return plain_text;\n}</code></pre> <h2>Пример использования</h2> <p>Ниже приведён простой пример использования вышеописанного кода:</p> <pre><code class=\"cpp\">#include \"security.hpp\"\n#include &lt;iostream&gt;\n\nint main(int argc, char* argv[]) {\n  using namespace security;\n  // Алиса генерирует ключ\n  EVP_PKEY* alice_key_pair = genKey();\n  // Алиса извлекает публичный ключ\n  ByteArray alice_peer_key = extractPublicKey(alice_key_pair);\n  \n  // Боб генерирует ключ\n  EVP_PKEY* bob_key_pair = genKey();\n  // Боб извлекает публичный ключ\n  ByteArray bob_peer_key = extractPublicKey(bob_key_pair);\n  \n  // Алиса и Боб обмениваются публичными ключами\n  // через открытый канал передачи данных\n  \n  // Боб получает согласованный AES 256 ключ\n  AES_t bob_aes_key = getSecret(alice_peer_key, bob_key_pair);\n  \n  // Алиса получает согласованный AES 256 ключ\n  AES_t alice_aes_key = getSecret(bob_peer_key, alice_key_pair);\n  \n  // Алиса шифрует сообщение\n  std::string alice_msg = \"Hello, Bob\";\n  ByteArray alice_msg_buffer(alice_msg.data(), alice_msg.length() + 1);\n  ByteArray alice_enc_msg = encrypt(alice_msg_buffer, alice_aes_key);\n  // И передаёт зашифрованное сообщение по открытому каналу Бобу\n  \n  // Боб шифрует сообщение\n  std::string bob_msg = \"Hello, Alice\";\n  ByteArray bob_msg_buffer(bob_msg.data(), bob_msg.length() + 1);\n  ByteArray bob_enc_msg = encrypt(bob_msg_buffer, bob_aes_key);\n  // И передаёт зашифрованное сообщение по открытому каналу Алисе\n  \n  // Алиса получает и дешифровывет сообщение\n  ByteArray alice_recived_msg = decrypt(bob_enc_msg, alice_aes_key);\n  std::cout &lt;&lt; \"Bob: \" &lt;&lt; (char*)alice_recived_msg.begin() &lt;&lt; '\\n';\n  \n  // Боб получает и дешифровывет сообщение\n  ByteArray bob_recived_msg = decrypt(alice_enc_msg, bob_aes_key);\n  std::cout &lt;&lt; \"Alice: \" &lt;&lt; (char*)bob_recived_msg.begin() &lt;&lt; '\\n';\n\n  return 0;\n}</code></pre> <p>Исходный код представлен в <a href=\"https://github.com/gbytegear/ECDH_AES256\" rel=\"noopener noreferrer nofollow\">этом репозитории GitHub</a>.</p>",
        "is_active": true,
        "author": 1,
        "tag": "openssl",
        "add_datetime": "2021-11-24T02:37:09Z",
        "article_status_new": 4
    }
},
{
    "model": "mainapp.article",
    "pk": 1637747512,
    "fields": {
        "hub": 3,
        "name": "Подробное руководство по инверсии зависимостей. Часть 2. Application модуль",
        "image": "https://habrastorage.org/getpro/habr/upload_files/a26/520/4c7/a265204c78f20fe7b9c0a60d4ea5df49.jpg",
        "preview": "<figure class=\"full-width \"><img src=\"https://habr",
        "text": "<figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/a26/520/4c7/a265204c78f20fe7b9c0a60d4ea5df49.jpg\" width=\"780\" height=\"442\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/a26/520/4c7/a265204c78f20fe7b9c0a60d4ea5df49.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>Я, aa0ndrey, приветствую вас и приглашаю продолжить обсуждение темы инверсии зависимостей. В рамках данной финальной части будет рассмотрен application модуль. Будут определена его ответственность и будет рассмотрено то, как он взаимодействует со всеми остальными модулями.</p> <p>Примеры, как и раньше, приведены на языке программирования java, но используются исключительно простые конструкции, чтобы любой читатель, понимающий на самом базовом уровне синтаксис java, смог понять данную статью.</p> <p>Если вы не читали первую часть, то 7, 8 и 9 раздел могут быть недостаточно понятны. В этом случае можно начать читать данную статью, сразу перейдя к 10 разделу. Тогда в качестве краткого содержания всех пропущенных разделов, включая разделы из первой части, можно считать то, что там были описаны подходы, позволяющие достаточно надежно изолировать core модуль от инфраструктурных зависимостей с помощью шаблона наблюдатель, шаблона декоратор и контекста.</p> <p><a href=\"https://habr.com/ru/post/582588/\" rel=\"noopener noreferrer nofollow\">Ссылка</a> на первую часть.</p> <h4>7. Проблема взаимосвязанных наблюдателей</h4> <p>В текущем и во всех последующих разделах рассматриваемые примеры, чтобы их не усложнять, сильно упрощены особенно с точки зрения технической реализации. В них остаются только те детали, которые важны для моделирования соответствующих примеров.</p> <p>Представим, что необходимо автоматизировать процесс, который позволяет создавать от пользователя заказы на покупку товара. И в рамках этого процесса необходимо проверять баланс пользователя. Баланс должен быть больше, чем стоимость товара. Также необходимо, чтобы все взаимодействия с базой данных postgres выполнялись под единой транзакцией, а в случае ошибки должен происходить откат транзакции.</p> <p>Приведем одно из возможных решений с помощью шаблона наблюдатель, использование которого обсуждалось в предыдущей части. Для этого для начала рассмотрим классы-данных, участвующие в процессе.</p> <p><code>CreateOrderRequest</code> - класс-данных запроса, который отправляет пользователь для создания заказа на товар.</p> <pre><code class=\"java\">package aa0ndrey.dependency_inversion_guide.step_7.core.order;\n\npublic class CreateOrderRequest {\n    private UUID userId;\n    private UUID productId;\n}\n</code></pre> <p><code>User</code> - класс-данных пользователя.</p> <pre><code class=\"java\">package aa0ndrey.dependency_inversion_guide.step_7.core.user;\n\npublic class User {\n    private UUID id;\n    private String name;\n    private int balance;\n}\n</code></pre> <p><code>Product</code> - класс-данных товара.</p> <pre><code class=\"java\">package aa0ndrey.dependency_inversion_guide.step_7.core.product;\n\npublic class Product {\n    private UUID id;\n    private String name;\n    private int price;\n}\n</code></pre> <p><code>Order</code> - класс-данных заказа.</p> <pre><code class=\"java\">package aa0ndrey.dependency_inversion_guide.step_7.core.order;\n\npublic class Order {\n    private UUID id;\n    private UUID userId;\n    private UUID productId;\n}\n</code></pre> <p>Ниже представлены классы репозиториев, которые позволят сохранять и получать данные из postgres:</p> <pre><code class=\"java\">package aa0ndrey.dependency_inversion_guide.step_7.postgres.user;\n\npublic class UserRepositoryImpl {\n    public User find(UUID id) {\n        //реализация select * from user where user.id = ?\n    }\n}\n</code></pre> <pre><code class=\"java\">package aa0ndrey.dependency_inversion_guide.step_7.postgres.product;\n\npublic class ProductRepositoryImpl {\n    public Product find(UUID id) {\n        //реализация select * from product where product.id = ?\n    }\n}\n</code></pre> <pre><code class=\"java\">package aa0ndrey.dependency_inversion_guide.step_7.postgres.order;\n\npublic class OrderRepositoryImpl {\n    public void create(Order order) {\n        //реализация insert into order (id, user_id, product_id) values (?, ?, ?)\n    }\n}\n</code></pre> <p>Ниже представлен класс <code>TransactionManagerImpl</code>, позволяющий управлять транзакциями</p> <pre><code class=\"java\">package aa0ndrey.dependency_inversion_guide.step_7.postgres.transaction_manager;\n\npublic class TransactionManagerImpl {\n    public void begin() {\n        //реализация начала транзакции\n    }\n\n    public void commit() {\n        //реализация фиксации транзакции\n    }\n\n    public void rollback() {\n        //реализация отката транзакции\n    }\n\n    public boolean isActive() {\n        //реализация, позволяющая определить, что есть активная транзакция\n    }\n}\n</code></pre> <p>Стоит отметить, что в TransactionManagerImpl методы <code>begin</code> и <code>commit</code> теперь не содержат id транзакции, и в данном случае нет необходимости решать задачу передачи id между инфраструктурными вызовами, как это было сделано в разделах предыдущей части.</p> <p>Также отметим и то, что были добавлены методы <code>rollback</code> и <code>isActive</code>. Метод <code>rollback</code> позволяет откатить транзакцию, а метод <code>isActive</code> позволяет узнать, есть ли активная транзакция, то есть такая транзакция, которую либо не зафиксировали, либо не откатили.</p> <p>Ниже представлен класс <code>OrderService</code>, который содержит основную логику, соответствующую автоматизируемому процессу.</p> <pre><code class=\"java\">package aa0ndrey.dependency_inversion_guide.step_7.core.order;\n\npublic class OrderService {\n    private final UserRepository userRepository;\n    private final ProductRepository productRepository;\n    private final OrderRepository orderRepository;\n    private final List observers;\n\n    public void create(CreateOrderRequest request) {\n        try {\n            observers.forEach(observer -&gt; observer.onStart()); //(1)\n\n            var user = userRepository.find(request.getUserId());\n            var product = productRepository.find(request.getProductId());\n\n            if (user.getBalance() &lt; product.getPrice()) {\n                throw new RuntimeException(\"Недостаточно средств\");\n            }\n\n            var order = new Order(UUID.randomUUID(), user.getId(), product.getId());\n            orderRepository.create(order);\n\n            observers.forEach(observer -&gt; observer.onEnd()); //(2)\n        } finally {\n            observers.forEach(observer -&gt; observer.onFinally()); //(3)\n        }\n    }\n}\n</code></pre> <p>Как и в предыдущих разделах для того, чтобы в модуле core избежать использования <code>TransactionManagerImpl</code> или его интерфейса <code>TransactionManager</code> , используется отправка событий с помощью шаблона наблюдатель в <code>(1)</code>, <code>(2)</code> и <code>(3)</code>. Отметим также, что теперь была добавлена конструкция try-finally для того, чтобы была возможность отправить и обработать события вне зависимости от возможных исключений, возникающих в основной логике в блоке try.</p> <p>И в заключении ниже представлен интерфейс и реализация шаблона наблюдатель для процесса создания заказа.</p> <pre><code class=\"java\">package aa0ndrey.dependency_inversion_guide.step_7.core.order;\n\npublic interface CreateOrderObserver {\n    default void onStart() {\n    }\n\n    default void onEnd() {\n    }\n\n    default void onFinally() {\n    }\n}\n</code></pre> <pre><code class=\"java\">package aa0ndrey.dependency_inversion_guide.step_7.postgres.order;\n\npublic class CreateOrderObserverImpl implements CreateOrderObserver {\n    private final TransactionManagerImpl transactionManagerImpl;\n\n    @Override\n    public void onStart() {\n        transactionManagerImpl.begin();\n    }\n\n    @Override\n    public void onEnd() {\n        transactionManagerImpl.commit();\n    }\n\n    @Override\n    public void onFinally() {\n        if (transactionManagerImpl.isActive()) {\n            transactionManagerImpl.rollback();\n        }\n    }\n}\n</code></pre> <p>Как и в предыдущих разделах в методе <code>onStart</code> происходит открытие транзакции. В методе <code>onEnd</code> происходит фиксация транзакции. В свою очередь в новом методе <code>onFinally</code> содержится код, который проверяет наличие активной транзакции. Если есть активная транзакция, это означает, что было выброшено исключение, и транзакция не была зафиксирована, поэтому вызывается метод <code>rollback</code>, который откатывает транзакцию.</p> <p>Ниже приведена файловая структура модулей core и postgres:</p> <p>Файловая структура core модуля</p> <pre><code>├── order\n│   ├── CreateOrderObserver.java\n│   ├── CreateOrderRequest.java\n│   ├── Order.java\n│   ├── OrderRepository.java\n│   └── OrderService.java\n├── product\n│   ├── Product.java\n│   └── ProductRepository.java\n└── user\n    ├── User.java\n    └── UserRepository.java\n</code></pre> <p>Файловая структура postgres модуля</p> <pre><code>├── order\n│   ├── CreateOrderObserverImpl.java\n│   └── OrderRepositoryImpl.java\n├── product\n│   └── ProductRepositoryImpl.java\n├── transaction_manager\n│   └── TransactionManagerImpl.java\n└── user\n    └── UserRepositoryImpl.java\n</code></pre> <p>На текущий момент в приведенном решении особых сложностей и проблем нет. Есть всего один наблюдатель в инфраструктурном модуле (postgres), который берёт на себя задачу по управлению транзакциями.</p> <p>Но представим теперь, что было принято решение собирать метрики для приложения. В качестве механизма для сбора метрик было решено использовать <a href=\"https://opentelemetry.io/\" rel=\"noopener noreferrer nofollow\">open-telemetry</a>. И в частности в рамках задачи по сбору метрик было также решено собирать информацию о времени выполнения метода <code>create</code>, принадлежащего классу <code>OrderService</code>.</p> <p>При этом старт отсчета начала времени выполнения должен быть обязательно до начала транзакции, а момент окончания отсчета времени должен быть обязательно после завершения транзакции, вне зависимости от того, как транзакция завершилась: успешно или неуспешно.</p> <p>Поскольку open-telemetry относится к другой инфраструктурной технологии, для него создан отдельный одноименный инфраструктурный модуль. Это также означает, что в open-telemetry модуль будет добавлен класс, реализующий интерфейс <code>CreateOrderObserver</code>, аналогично тому, как это сделано в postgres модуле.</p> <p>Можно заметить первую проблему. В классе <code>OrderService</code> есть список <code>observers</code>, который используется для отправки событий наблюдателям в одном и том же порядке для каждого из методов <code>onStart</code>, <code>onEnd</code> и <code>onFinally</code>.</p> <p>Но для метода <code>onStart</code> необходимо, чтобы сначала вызывался наблюдатель из open-telemetry модуля, а уже затем из postgres модуля. В свою очередь для метода <code>onFinally</code> необходимо наоборот, чтобы сначала вызывался наблюдатель из postgres модуля, а уже затем из open-telemetry модуля.</p> <p>Учитывая описанную проблему выше, рассмотрим возможное решение для open-telemetry модуля. Для этого для начала определим класс, с помощью которого будет регистрироваться информация о промежутках времени выполнения. Пусть он задается следующим образом:</p> <pre><code class=\"java\">package aa0ndrey.dependency_inversion_guide.step_7.open_telemetry.time_span_manager;\n\npublic class TimeSpanManagerImpl {\n    public void startTimeSpan(String name) {\n        //реализация старта временного отрезка\n    }\n\n    public boolean isActive() {\n        //реализация, определяющая, что есть промежуток времени, для которого ведется отсчет времени\n    }\n\n    public void stopTimeSpan() {\n        //реализация завершения временного отрезка\n    }\n}\n</code></pre> <p>Метод <code>startTimeSpan</code> позволяет начать отсчет отрезка времени в момент вызова метода, при этом название временного отрезка будет соответствовать параметру <code>name</code>.</p> <p>Метод <code>stopTimeSpan</code> останавливает отсчет отрезка времени в момент вызова и отправляет информацию о временном отрезке в соответствующую систему учета метрик.</p> <p>Метод <code>isActive</code> определяет, что есть промежуток времени, для которого ведется отсчет времени.</p> <p>Отметим, что класс <code>TimeSpanManagerImpl</code> сделан искусственно и сделан намерено сильно похожим на <code>TransactionManagerImpl</code> для упрощения примеров. В действительности может оказаться, что класс <code>TimeSpanManagerImpl</code> с его методами невозможно создать, используя open-telemetry. Но на суть рассматриваемых примеров это не влияет.</p> <p>Ниже рассмотрим реализацию для интерфейса <code>CreateOrderObserver</code>, которая будет находиться в open-telemetry модуле.</p> <pre><code class=\"java\">package aa0ndrey.dependency_inversion_guide.step_7.open_telemetry.order;\n\npublic class CreateOrderObserverImpl {\n    public static class OnStart implements CreateOrderObserver { //(4)\n        private final TimeSpanManagerImpl timeSpanManager;\n\n        @Override\n        public void onStart() {\n            timeSpanManager.startTimeSpan(\"Создание заказа\");\n        }\n    }\n\n    public static class OnFinally implements CreateOrderObserver { //(5)\n        private final TimeSpanManagerImpl timeSpanManager;\n\n        @Override\n        public void onFinally() {\n            if (timeSpanManager.isActive()) {\n                timeSpanManager.stopTimeSpan();\n            }\n        }\n    }\n}\n</code></pre> <p>Отметим, что для open-telemetry модуля для решения проблемы, связанной с очередностью вызова наблюдателей, был создан не один класс, а два: <code>CreateOrderObserverImpl.OnStart</code> и <code>CreateOrderObserverImpl.OnFinally</code>, каждый из которых реализует только по одному соответствующему методу из интерфейса <code>CreateOrderObserver</code>. Остальные нереализованные методы для этих классов остаются со стандартной реализацией с пустым телом метода.</p> <p>Идея данного решения заключается в том, чтобы добавить список наблюдателей в объект класса <code>OrderService</code> в следующим порядке:</p> <ol><li><p>Объект класса <code>CreateOrderObserverImpl.OnStart</code> из open-telemetry модуля</p></li><li><p>Объект класса <code>CreateOrderObserverImpl</code> из postgres модуля</p></li><li><p>Объект класса <code>CreateOrderObserverImpl.OnFinally</code> из open-telemetry модуля</p></li></ol> <p>Поскольку классы <code>CreateOrderObserverImpl.OnStart</code> и  <code>CreateOrderObserverImpl.OnFinally</code> из open-telemetry модуля имеют ровно по одному реализованному методу, то фактически для события <code>onStart</code> будет вызываться вначале наблюдатель из open-telemetry модуля, а за ним наблюдатель из postgres модуля, а для события <code>onFinally</code> наоборот.</p> <p>И тут можно заметить вторую проблему. В <code>CreateOrderObserverImpl</code> из postgres модуля внутри обработки события <code>onFinally</code> при выполнении <code>transactionManager.rollback()</code> может возникнуть исключение, которое не позволит выполнить обработку события в классе <code>CreateOrderObserverImpl.OnFinally</code> из open-telemetry модуля.</p> <p>Это будет означать, что останется подвисший временной отрезок и информация о времени выполнения метода не будет учтена, что является нежелательным поведением.</p> <p>Чтобы решить эту проблему, можно, например, затребовать, чтобы наблюдатели принимали в качестве дополнительного параметра исключение. Тогда, если в наблюдателе возникнет исключение, то оно будет передаваться следующему наблюдателю вместе с событием вместо того, чтобы прервать процесс обработки.</p> <p>Это возможно сделать, но решение станет значительно сложнее, чем хотелось бы. На текущий момент уже логика по обработке событий расположена в нескольких местах: в postgres и open-telemetry модулях, что несколько осложняет понимание.</p> <p>А из-за зависимостей, которые есть между наблюдателями, приходится дублировать наблюдателей и организовывать специальный порядок их вставки в класс <code>OrderService</code>. Возникшая проблема с исключениями добавляет еще больше сложностей, которых хотелось бы избежать.</p> <p>Важным, что необходимо отметить в рамках данного раздела, является то, что решение со списком наблюдателей становится значительно сложнее, когда существуют зависимости между наблюдателями. Как улучшить решение с наблюдателями, будет рассмотрено в следующем разделе.</p> <h4>8. Промежуточный модуль application</h4> <p>Проблема из предыдущего раздела возникает из-за того, что используется список из наблюдателей, которые имеют между собой зависимости, но при этом их выполнение происходит независимо друг от друга. Но что если добавить возможность для совместного выполнения между зависимыми наблюдателями, при этом не добавляя инфраструктурные интерфейсы в модуль core? Для этого понадобится дополнительный промежуточный модуль application.</p> <p>Идея заключается в том, чтобы разрешить в application модуле использовать даже инфраструктурные интерфейсы, подобные <code>TransactionManager</code> и <code>TimeSpanManager</code>.</p> <p>Важно отметить, что это не означает добавления прямой зависимости на инфраструктурные модули, такие как postgres или open-telemetry. В application модуле будет все также использоваться инверсия зависимостей с помощью интерфейсов, но в отличие от core модуля в нем будет возможно использовать и инфраструктурные интерфейсы.</p> <p>Ниже приведена диаграмма модулей</p> <pre><code>         ┌─────────────┐\n      ┌─►│    Core     │◄─┐\n      │  └──────▲──────┘  │\n      │         │         │\n      │  ┌──────┴──────┐  │\n      ├─►│ Application │◄─┤\n      │  └─────────────┘  │\n┌─────┴───────┐ ┌─────────┴───┐\n│     OTel    │ │   Postgres  │\n└─────────────┘ └─────────────┘\n</code></pre> <p>OTel - сокращение для open-telemetry, используемое в официальной документации.</p> <p>И как ранее предлагалось, в application модуль будут добавлены интерфейсы для <code>TransactionManager</code> и <code>TimeSpanManager</code>, реализации которых соответственно находятся в postgres и open-telemetry модуле.</p> <pre><code class=\"java\">package aa0ndrey.dependency_inversion_guide.step_8.application.transaction_manager;\n\npublic interface TransactionManager {\n    void begin();\n\n    void commit();\n\n    void rollback();\n\n    boolean isActive();\n}\n</code></pre> <pre><code class=\"java\">package aa0ndrey.dependency_inversion_guide.step_8.application.time_span_manager;\n\npublic interface TimeSpanManager {\n    void startTimeSpan(String name);\n\n    boolean isActive();\n\n    void stopTimeSpan();\n}\n</code></pre> <p>И теперь вместо того, чтобы использовать несколько отдельных зависимых между собой наблюдателей, можно создать всего лишь одного наблюдателя в application модуле, организовав явное взаимодействие между <code>TransactionManager</code> и <code>TimeSpanManager</code>. При этом наблюдатели в postgres и open-telemetry модуле должны быть удалены.</p> <pre><code class=\"java\">package aa0ndrey.dependency_inversion_guide.step_8.application.order;\n\npublic class CreateOrderObserverImpl implements CreateOrderObserver {\n    private final TransactionManager transactionManager;\n    private final TimeSpanManager timeSpanManager;\n\n    @Override\n    public void onStart() {\n        timeSpanManager.startTimeSpan(\"Создание заказа\");\n        transactionManager.begin();\n    }\n\n    @Override\n    public void onEnd() {\n        transactionManager.commit();\n    }\n\n    @Override\n    public void onFinally() {\n        try { //(1)\n            if (transactionManager.isActive()) {\n                transactionManager.rollback(); //(2)\n            }\n        } finally { //(3)\n            if (timeSpanManager.isActive()) {\n                timeSpanManager.stopTimeSpan();\n            }\n        }\n    }\n}\n</code></pre> <p>В методе <code>onStart</code> начинается отсчет временного отрезка, и затем начинается транзакция. В методе <code>onEnd</code> происходит фиксация транзакция. А самое интересное происходит в методе <code>onFinally</code>. В нем транзакция откатывается, если она активна, и затем останавливается отсчет временного отрезка.</p> <p>Как подмечалось в предыдущем разделе, метод <code>rollback</code> в <code>(2)</code> также может выбросить исключение, что потенциально могло бы помешать окончанию отсчета временного отрезка с помощью <code>TimeSpanManager</code>. Но так как используется конструкция try-finally в <code>(1)</code> и <code>(3)</code>, то выполнение приложения в любом случае дойдет до вызова метода <code>stopTimeSpan</code>, если, конечно, не произойдет критических проблем с самим приложением.</p> <p>Поскольку с помощью промежуточного модуля <code>application</code> можно всегда использовать всего лишь одного наблюдателя, то в <code>OrderService</code> код также можно упростить.</p> <pre><code class=\"java\">package aa0ndrey.dependency_inversion_guide.step_8.core.order;\n\npublic class OrderService {\n    private final UserRepository userRepository;\n    private final ProductRepository productRepository;\n    private final OrderRepository orderRepository;\n    private final CreateOrderObserver observer; //(4)\n\n    public void create(CreateOrderContext context) {\n        try {\n            observer.onStart(context); //(5)\n            var request = context.getRequest();\n\n            var user = userRepository.find(request.getUserId());\n            var product = productRepository.find(request.getProductId());\n\n            if (user.getBalance() &lt; product.getPrice()) {\n                throw new RuntimeException(\"Недостаточно средств\");\n            }\n\n            var order = new Order(UUID.randomUUID(), user.getId(), product.getId());\n            orderRepository.create(order);\n\n            observer.onEnd(context); //(6)\n        } finally {\n            observer.onFinally(context); //(7)\n        }\n    }\n}\n</code></pre> <p>Теперь в классе <code>OrderService</code> используется всего лишь один наблюдатель. Это можно заметить в <code>(4)</code>, <code>(5)</code>, <code>(6)</code>, <code>(7)</code>.</p> <p>После проведенных изменений файловая структура проекта будет следующей.</p> <p>Файловая структура core модуля</p> <pre><code>├── order\n│   ├── CreateOrderObserver.java\n│   ├── CreateOrderRequest.java\n│   ├── Order.java\n│   ├── OrderRepository.java\n│   └── OrderService.java\n├── product\n│   ├── Product.java\n│   └── ProductRepository.java\n└── user\n    ├── User.java\n    └── UserRepository.java\n</code></pre> <p>Файловая структура application модуля</p> <pre><code>├── order\n│   └── CreateOrderObserverImpl.java\n├── time_span_manager\n│   └── TimeSpanManager.java\n└── transaction_manager\n    └── TransactionManager.java\n</code></pre> <p>Файловая структура open-telemetry модуля</p> <pre><code>└── time_span_manager\n    └── TimeSpanManagerImpl.java\n</code></pre> <p>Файловая структура postgres модуля</p> <pre><code>├── order\n│   └── OrderRepositoryImpl.java\n├── product\n│   └── ProductRepositoryImpl.java\n├── transaction_manager\n│   └── TransactionManagerImpl.java\n└── user\n    └── UserRepositoryImpl.java\n</code></pre> <p>Еще раз отметим, что теперь нет наблюдателей в postgres и open-telemetry модулях. А интерфейсы <code>TransactionManager</code> и <code>TimeSpanManager</code> были добавлены в application модуль в единственного наблюдателя.</p> <p>За счет добавления промежуточного модуля application, получилось организовать и сконцентрировать взаимодействие между несколькими инфраструктурными модулями в одном единственном наблюдателе в application модуле. При этом инфраструктурные интерфейсы не были добавлены в изолируемый модуль core. Также данное решение избавляет от необходимости реализовывать общий сложный механизм по передаче управления между независимыми наблюдателями.</p> <h4>9. Использование шаблона декоратор</h4> <p>Довольно часто инфраструктурный вспомогательный код, например, связанный с управлением транзакциями, может или должен быть размещен в начале и в конце выполнения основной логики. Эта закономерность очень удобна. В таких случаях, вместо того, чтобы использовать шаблон наблюдатель, можно использовать шаблон декоратор.</p> <p>Тогда код, связанный с шаблоном наблюдатель, можно убрать. И в этом случае класс <code>OrderService</code> станет таким, как указано ниже.</p> <pre><code class=\"java\">package aa0ndrey.dependency_inversion_guide.step_9.core.order;\n\npublic class OrderCoreService implements OrderService { //(1)\n    private final UserRepository userRepository;\n    private final ProductRepository productRepository;\n    private final OrderRepository orderRepository;\n\n    @Override\n    public void create(CreateOrderRequest request) {\n        var user = userRepository.find(request.getUserId());\n        var product = productRepository.find(request.getProductId());\n\n        if (user.getBalance() &lt; product.getPrice()) {\n            throw new RuntimeException(\"Недостаточно средств\");\n        }\n\n        var order = new Order(UUID.randomUUID(), user.getId(), product.getId());\n        orderRepository.create(order);\n    }\n}\n</code></pre> <p>Стоит отметить, что класс <code>OrderCoreService</code> стал похож на тот, что был представлен в самом начале, в первой части в разделе под номером 1. Отличие заключается только в том, что в <code>(1)</code> класс был переименован в <code>OrderCoreService</code>, а его предыдущее название перешло к интерфейсу <code>OrderService</code>, который он реализует.</p> <p>Ниже представлен интерфейс.</p> <pre><code class=\"java\">package aa0ndrey.dependency_inversion_guide.step_9.core.order;\n\npublic interface OrderService {\n    void create(CreateOrderRequest request);\n}\n</code></pre> <p>Интерфейс нужен для того, чтобы скрыть от внешних клиентов (пользователей) класса знание о том, что сервис из core модуля может быть обернут сервисом из application модуля.</p> <p>Это нужно для того, чтобы все клиенты класса в качестве зависимости указывали интерфейс сервиса из core модуля, а не конкретную реализацию внешнего сервиса-декоратора из application модуля. Пример, дополнительно раскрывающий назначение интерфейса, будет приведен в 12 разделе.</p> <p>Далее рассмотрим класс декоратора. Он будет размещен в модуле application вместо <code>CreateOrderObserverImpl</code>.</p> <pre><code class=\"java\">package aa0ndrey.dependency_inversion_guide.step_9.application.order;\n\npublic class OrderAppService implements OrderService {\n    private final OrderService coreService;\n    private final TransactionManager transactionManager;\n    private final TimeSpanManager timeSpanManager;\n\n    @Override\n    public void create(CreateOrderRequest request) {\n        try {\n            timeSpanManager.startTimeSpan(\"Создание заказа\"); //(2)\n            transactionManager.begin(); //(3)\n\n            coreService.create(request); //(4)\n\n            transactionManager.commit(); //(5)\n        } finally {\n            try {\n                if (transactionManager.isActive()) {\n                    transactionManager.rollback(); //(6)\n                }\n            } finally {\n                if (timeSpanManager.isActive()) {\n                    timeSpanManager.stopTimeSpan(); //(7)\n                }\n            }\n        }\n    }\n}\n</code></pre> <p><code>OrderAppService</code> содержит в себе всю необходимую вспомогательную инфраструктурную логику, связанную с управлением транзакциями и с отсчетом временного отрезка, что ранее было размещено в наблюдателе. Это можно отметить в  <code>(2)</code>, <code>(3)</code>, <code>(5)</code>, <code>(6)</code>, <code>(7)</code>. Также в середине метода в <code>(4)</code> между инфраструктурной логикой находится вызов метода с основной логикой из класса <code>OrderCoreService</code>, расположенного в модуле core.</p> <p>Вместе с шаблоном декоратор аналогично шаблону наблюдатель можно использовать контекст, чтобы, например, какие-то инфраструктурные данные, которые были получены на уровне декоратора, передать в наблюдателей или наоборот. Про использование контекста было в предыдущей части в разделах с 4 по 6.</p> <p>Если читатель знаком с технологиями, такими как: Spring, JavaEE и другими, которые содержат какую-либо разновидность аннотации <code>@Transactional</code>, то данный класс <code>OrderAppService</code> отлично подходит для использования данной аннотации. Но чтобы сохранять примеры максимально нейтральными к используемым технологиям и языкам программирования, здесь и далее будет продолжено явное использование класса <code>TransactionManagerImpl</code> и интерфейса <code>TransactionManager</code>.</p> <p>По этой же причине в рамках данной статьи не будет рассмотрено использование аспектно-ориентированного программирования, которому в частности можно отнести аннотацию <code>@Transactional</code>.</p> <p>Для читателей, которые уже знакомы с аспектно-ориентированным программированием (АОП), по крайней мере, по примеру библиотеки AspectJ в Java, стоит отметить только то, что АОП по своей сути позволяет более гибко и неявно создавать декораторы. Поэтому всюду, где идет речь об использовании шаблона декоратор, можно применять АОП.</p> <p>Может возникнуть вопрос: зачем использовать шаблон наблюдатель, если декоратор решает ту же самую задачу, но проще?</p> <p>Шаблон наблюдатель является более универсальным инструментом, по сравнению со стандартным подходом к использованию шаблона декоратор, так как в рамках использования шаблона наблюдатель можно добавлять точки расширения в произвольном месте, находясь на любой глубине вложенности внутри метода. В свою очередь, шаблон декоратор позволяет добавлять расширение только перед и после декорируемого метода.</p> <h4>10. Ответственность application модуля</h4> <p>В предыдущих разделах было предложено использовать application модуль для того, чтобы упростить использование и изолирование инфраструктурных модулей, обеспечивающих работу core модуля. Но при этом множество вопросов и тем, касающихся application модуля, не были рассмотрены. Хотя здесь их достаточно.</p> <p>Можно начать с определения задачи, которую неудобно или невозможно решать исключительно в core и инфраструктурных модулях, при этом, не смешивая ответственность и не добавляя лишних зависимостей.</p> <p>Как было продемонстрировано ранее, при построении архитектуры приложения есть потребность в организации межмодульного взаимодействия для выполнения общих задач. Поэтому существует потребность в модуле, который позволит явно координировать работу нескольких слабо связанных модулей. Пусть для этих задач будет использован application модуль.</p> <p>Отсюда следует, что те задачи, которые возможно комфортно решить исключительно в одном модуле в соответствии с его предназначением, должны быть решены в нем, не вынося их в application модуль. Иначе ответственность других модулей начнет размываться в сторону application модуля.</p> <p>Так, например, даже если в application модуле используются механизмы транзакций из postgres модуля, то крайне нежелательно, если помимо управления транзакциями в application модуле будет использован тот или иной механизм для построения и отправки SQL-запросов.</p> <p>То есть, с одной стороны, application модуль должен уметь координировать работу нескольких модулей, с другой стороны, он не должен брать и использовать больше положенного. А это означает, что важно как-то управлять и декларировать возможности и классы, используемые в application модуле из других модулей.</p> <p>Также тут важно ответить на следующий вопрос: должны ли классы, используемые в application модуле из инфраструктурных модулей, быть спрятаны за стабильными абстракциями, устойчивыми к изменениям? Проще говоря, нужно ли создавать такие интерфейсы в application модуле, которые не потребуется менять в случае изменений инфраструктурного модуля.</p> <p>С одной стороны, с точки зрения core модуля не имеет значения, использует ли application модуль устойчивые к изменениям интерфейсы или application модуль использует прямые реализации из инфраструктурного модуля. В любом случае основная логика в core модуле будет заизолирована от инфраструктурных зависимостей и изменений. А тогда зачем платить дважды?</p> <p>С другой стороны, если для создания общих интерфейсов в коде application модуля и для их реализации в соответствующих инфраструктурных модулях не придется прилагать слишком уж много усилий, то лучше, конечно, создавать такие интерфейсы, которые способны добавить устойчивости к изменениям даже в application модуль.</p> <p>Важно подчеркнуть, что не любые интерфейсы являются устойчивыми к изменениям и добавление интерфейса еще не означает увеличение устойчивости.</p> <p>В предыдущих частях, когда было предложено использовать модуль application, направление зависимостей между application модулем и инфраструктурными модулями было просто задано без рассмотрения каких-либо альтернатив. А учитывая, что нет явных причин отказываться от использования конкретной реализации, получается, что тут тоже есть о чем подумать.</p> <p>Таким образом, можно выделить следующие вопросы, на которые необходимо ответить при выборе подхода к реализации application модуля:</p> <ol><li><p>С помощью чего в application модуле предоставляются гарантии того, что в нем не используется больше инфраструктурных классов и возможностей, чем это необходимо, для координации работы нескольких модулей?</p></li><li><p>Нужно ли в application модуле стремиться использовать интерфейсы, устойчивые к изменениям инфраструктурных модулей? И в каких случаях это делать?</p></li><li><p>В какую сторону должна быть направлена зависимость: от application модуля к инфраструктурному модулю или наоборот?</p></li></ol> <h4>11. Зависимость от инфраструктурных модулей в сторону application модуля</h4> <p>Рассмотрим следующую диаграмму, на которой представлено несколько модулей.</p> <pre><code>  ┌──────────────┐\n┌►│     Core     │◄─────────┬───────────────┐\n│ └──────▲───────┘          │               │\n│        │                  │               │\n│ ┌──────┴───────┐          │               │\n│ │  Application │◄──────┬──┼────────────┐  │\n│ └──────▲───────┘       │  │            │  │\n│        │               │  │            │  │\n│ ┌──────┴───────┐ ┌─────┴──┴─────┐ ┌────┴──┴──────┐\n└─┤  Postgres    │ │    OTel      │ │    REST      │\n  └──────────────┘ └──────────────┘ └──────────────┘\n</code></pre> <ul><li><p>Есть модуль core, и от него зависят все остальные модули.</p></li><li><p>Есть модуль application, и от него зависят все инфраструктурные модули.</p></li><li><p>И есть три инфраструктурных модуля: OTel (open-telemetry), Postgres и REST</p></li></ul> <p>Здесь был добавлен REST модуль. Предполагается, что этот модуль содержит классы, позволяющие приложению получать HTTP запросы в соответствии с REST подходом.</p> <p>REST модуль был добавлен для того, чтобы в примерах учитывать не только инфраструктурные модули, методы которых преимущественно вызываются из application модуля, но и инфраструтурные модули, из которых преимущественно вызываются методы application модуля.</p> <p>Например, в REST модуле может быть <code>OrderRestController</code>, который получает HTTP запросы, осуществляет какую-либо конвертацию данных и затем вызывает метод <code>create</code> из <code>OrderAppService</code> из application модуля.</p> <p>Отметим, что все зависимости от инфраструктурных модулей направлены в сторону application модуля. Для этого классы из инфраструктурного модуля должны реализовывать интерфейсы из application модуля. Например, так было сделано для интерфейсов <code>TimeSpanManager</code> и <code>TransactionManager</code> и классов <code>TimeSpanManagerImpl</code> и <code>TransactionManagerImpl</code>.</p> <p>Но насколько просто создавать пары интерфейс-реализация? Все зависит от того, насколько устойчивым к изменениям требуется разработать интерфейс.</p> <p>Интерфейс, который не пытается скрыть инфраструктурные особенности и не пытается кардинальным образом изменить суть вызываемых методов, будет в рамках данной статьи называться <em>общим инфраструктурным интерфейсом</em>. При этом подразумевается, что такой интерфейс создается с идей обобщить использование нескольких взаимозаменяемых и близких технологий.</p> <p>Например, использование шаблона наблюдатель с соответствующим интерфейсом для того, чтобы скрыть использование <code>TransactionManagerImpl</code>, не является примером общего инфраструктурного интерфейса, так как шаблон наблюдатель скрывает используемую технологию и кардинальным образом меняет суть вызываемых методов.</p> <p>То есть под созданием общего инфраструктурного интерфейса подразумевается создания такого интерфейса, который, например, для задачи управления транзакциями предложит интерфейс <code>TransactionManager</code>, который будет подходить более чем под одну конкретную систему управления базами данных.</p> <p>Есть множество примеров того, как принимались и принимаются попытки создания интерфейсов для обобщения использования технологий. Но у таких обобщений могут быть недостатки.</p> <p>Использование общего инфраструктурного интерфейса не может дать больше производительности и потреблять меньше ресурсов, чем использование конкретной реализации, спрятанной за интерфейсом. Это следует из того, что общий интерфейс может использовать конкретную реализацию неоптимальным образом для определенного рода задач.</p> <p>Также общий инфраструктурный интерфейс не может дать больше возможностей, чем конкретная реализация. В общем инфраструктурном интерфейсе не может быть того, чего невозможно сделать с помощью конкретной реализации, а вот обратное верно.</p> <p>Но помимо того, что общий инфраструктурный интерфейс может быть менее эффективен и может давать меньше возможностей, сама по себе задача создания общего инфраструктурного интерфейса может быть не простой, а иногда и невозможной. Для того чтобы создать общий инфраструктурный интерфейс, необходимо изучить существующие решения, разобраться в том, как их возможно обобщить, а также, возможно, спрогнозировать их развитие.</p> <p>А самое главное, что все эти недостатки общих инфраструктурных интерфейсов и затраты труда для их разработки и поддержки не имеют особого смысла с точки зрения защиты core модуля от влияния инфраструктурных зависимостей.</p> <p>Сore модуль, как было продемонстрировано ранее, защищен подходами и шаблонами проектирования, которые не пытаются обобщить использование инфраструктурных технологий. И как было сказано ранее, для core модуля безразлично, использует ли application модуль конкретные реализации или использует интерфейсы для инфраструктурных технологий.</p> <p>Стоит отметить, что тут нет попытки раскритиковать подходы к созданию общих инфраструктурных интерфейсов для различных технологий в глобальном смысле. Здесь лишь делается акцент на том, что у этого есть свои недостатки, которые в определенных случаях могут перевешивать преимущества конкретно в контексте разговора про application модуль.</p> <p>Тогда допустим, что при разработке application модуля не предпринимается попыток создания общих инфраструктурных интерфейсов, если это принесет только больше проблем. Но поскольку зависимости направлены от инфраструктурных модулей в сторону application модуля, то интерфейсы все равно необходимо создавать.</p> <p>В этом случае их можно создавать точь-в-точь похожими на реализацию. И это будут именно те интерфейсы, которые не добавляет для application модуля устойчивости к изменениям в инфраструктурных модулях, но, как было сказано ранее, это и не нужно.</p> <p>Тогда какую задачу решают такие интерфейсы в application модуле?</p> <p>Как было отмечено в предыдущем разделе, для application модуля важно иметь возможность ограничить классы и механизмы, используемые из инфраструктурных модулей. То есть, например, важно запретить возможность собирать и отправлять SQL-запросы прямо из application модуля.</p> <p>В этом смысле использование инверсии зависимостей с интерфейсами позволяет декларировать инфраструктурные возможности, которые есть в application модуле. То есть, если в application модуле есть только интерфейс <code>TransactionManager</code>, то из application модуля невозможно собирать и отправлять SQL-запросы до тех пор, пока не будет добавлен соответствующий интерфейс.</p> <p>Но тут появляется другая проблема. Предположим, что было принято решение создавать интерфейсы, которые точь-в-точь повторяют классы и интерфейсы из open-telemetry модуля для того, чтобы использовать их в application модуле. Ниже будет представлено такое решение для демонстрационных целей, несмотря на то, что для open-telemetry, вероятно, можно подобрать более подходящие интерфейсы.</p> <p>Пусть мы начнем с класса SpanBuilder, который есть в open-telemetry.</p> <pre><code class=\"java\">package io.opentelemetry.api.trace;\n\npublic interface SpanBuilder {\n    //...\n\n    SpanBuilder addLink(SpanContext spanContext);\n\n    SpanBuilder setParent(Context context);\n\n    Span startSpan();\n}\n</code></pre> <p>Предназначение классов и методов не играет особой роли для примера, поэтому для них не будет представлено описания.</p> <p>Предположим, что был добавлен интерфейс для <code>SpanBuilder</code> в application модуль. Но чтобы его использовать, необходимо также добавить интерфейсы для <code>SpanContext</code>, <code>Context</code> и <code>Span</code>, так как они присутствуют в сигнатурах методов. Но после того, как будут добавлены интерфейсы для <code>SpanContext</code>, <code>Context</code> и <code>Span</code>, внутри уже их сигнатур методов могут быть другие классы, для которых необходимо также добавить интерфейсы.</p> <p>Проблема тут заключается в том, что граф транзитивных зависимостей может быть достаточно большим, даже несмотря на то, что будут добавляться только те сигнатуры методов, которые необходимы для application модуля. Более того, помимо интерфейсов, добавляемых в application модуль, на стороне open-telemetry модуля необходимо создавать реализации, которые будут делегировать вызовы классам из библиотеки open-telemetry.</p> <p>С одной стороны, добавление таких интерфейсов дает возможность декларировать используемые классы в application модуле с точностью до сигнатуры метода. С другой стороны, хотелось бы избежать бессмысленного копирования сигнатур и делегирования вызовов.</p> <p>Как уже стало понятно, иногда задача добавления интерфейса для использования классов из инфраструктурных модулей в application модуле, может быть непростой. Но возможна и иная ситуация.</p> <p>Например, создать интерфейс может быть достаточно просто, потому что может не быть длинных транзитивных зависимостей. Также может так получится, что технологии легко подвергаются обобщению. Более того, могут существовать уже готовые решения, предлагающие общие инфраструктурные интерфейсы.</p> <p>Например, для управления транзакциями в java в технологии spring существует отдельная <a href=\"https://mvnrepository.com/artifact/org.springframework/spring-tx\" rel=\"noopener noreferrer nofollow\">библиотека</a>, которую можно подключать независимо от библиотек с базами данных. В этом случае использование уже готовой библиотеки с общими инфраструктурными интерфейсами может быть очень удобно.</p> <p>По вопросу создания интерфейсов в рамках данного раздела было уже сказано многое. Но это не единственное, на что влияет направление зависимостей от инфраструктурных модулей в сторону application модуля.</p> <p>За счет того, что все зависимости направлены в сторону application модуля, application модуль можно использовать, как \"площадку\" для размещения интерфейсов для классов из инфраструктурных модулей и для размещения классов-данных, чтобы использовать их не в application модуле, а между инфраструктурными модулями.</p> <p>Например, если потребуется в postgres модуле замерить время выполнения определенных запросов с помощью open-telemetry, то нет необходимости добавлять явную зависимость между postgres и open-telemetry модулем. В этом случае можно в postgres модуле использовать интерфейс <code>TimeSpanManager</code> из application модуля.</p> <p>На самом деле это не всегда самое оптимальное решение. Так как зависимость все равно есть, просто она проходит через application модуль. О том, как это можно сделать иначе, описано в 14 разделе.</p> <p>Также то, что направление зависимостей всех инфраструктурных модулей направлено в сторону application модуля, удобно тем, что application модуль можно использовать для размещения общих утилитных классов, которые невозможно разместить в core модуле.</p> <p>Подведем итог для данного раздела. При организации зависимостей от всех инфраструктурных модулей в сторону application модуля можно отметить следующее:</p> <ol><li><p>Нет сильной необходимости изолировать application модуль от инфраструктурных зависимостей.</p></li><li><p>Использование общих инфраструктурных интерфейсов может быть менее эффективно, чем конкретная реализация.</p></li><li><p>Общие инфраструктурные интерфейсы могут не предоставлять всех возможностей, которые есть в конкретных реализациях.</p></li><li><p>Создание общих инфраструктурных интерфейсов может быть непростой задачей.</p></li><li><p>Создание интерфейсов, которые точь-в-точь повторяют конкретную реализацию, может приводить к большому количеству бессмысленного (boilerplate) кода.</p></li><li><p>Использование интерфейсов позволяет явно декларировать возможности application модуля относительно использования классов из инфраструктурных модулей.</p></li><li><p>Общие инфраструктурные интерфейсы могут быть уже реализованы в сторонних библиотеках, что значительно упрощает задачу.</p></li><li><p>За счет того, что все инфраструктурные модули зависят от application модуля, то application модуль можно использовать, как \"площадку\" для размещения инфраструктурных интерфейсов, классов-данных и общих утилитных классов, чтобы их использовать между инфраструктурными модулями.</p></li></ol> <h4>12. Зависимость от application модуля в сторону инфраструктурных модулей</h4> <p>Рассмотрим следующую диаграмму, на которой представлено несколько модулей.</p> <pre><code>  ┌──────────────┐\n┌►│     Core     │◄─────────┬───────────────┐\n│ └──────▲───────┘          │               │\n│        │                  │               │\n│ ┌──────┴───────┐          │               │\n│ │  Application ├───────┬──┼────────────┐  │\n│ └──────┬───────┘       │  │            │  │\n│        │               │  │            │  │\n│ ┌──────▼───────┐ ┌─────▼──┴─────┐ ┌────▼──┴──────┐\n└─┤  Postgres    │ │    OTel      │ │    REST      │\n  └──────────────┘ └──────────────┘ └──────────────┘\n</code></pre> <p>Данная диаграмма отличается от диаграммы из предыдущего раздела только тем, что зависимости от application модуля направлены в сторону инфраструктурных модулей.</p> <p>На что это влияет? Во-первых, отметим, что при таком направлении зависимостей в application модуле нет необходимости создавать и использовать интерфейсы. В таком случае в application модуле можно использовать все возможности, предоставляемые конкретной реализацией той или иной технологии.</p> <p>С одной стороны, это хорошо в том плане, что технологию можно использовать самым эффективным образом и при этом нет необходимости создавать интерфейсы, повторяющие точь-в-точь классы из инфраструктурных модулей. Также нет необходимости думать о том, как скрыть технологии под общий устойчивый к изменениям интерфейс, так как это и не нужно.</p> <p>С другой стороны, в данном примере пока не определено, каким образом ограничиваются возможности application модуля по использованию инфраструктурных классов, чтобы, например, не дать возможность собирать и отправлять SQL-запросы прямо из application модуля. В предыдущем разделе, эту обязанность брали на себя именно интерфейсы.</p> <p>Для решения задачи по ограничению application модуля использовать те или иные инфраструктурные возможности необязательно применять интерфейсы, которые являются частью языка программирования. Для этих целей существуют определенные технологии, позволяющие декларировать, какие классы являются доступными для использования вне модуля.</p> <p>Например, в java в частности для этих целей в 9 версии был добавлен механизм под названием <a href=\"https://openjdk.java.net/projects/jigsaw/\" rel=\"noopener noreferrer nofollow\">Jigsaw</a>. Но, к сожалению, он был добавлен достаточно поздно, и поэтому практически никто им не пользуется, что из-за особенностей реализации осложняет его использование и в других проектах. Но в качестве живой альтернативы для этих целей в java можно использовать библиотеку <a href=\"https://www.archunit.org/\" rel=\"noopener noreferrer nofollow\">ArchUnit</a>.</p> <p>Задача по декларированию классов, которые доступны для использования вне модуля, не является чем-то особенным. Поэтому, вероятно, в актуальных языках программирования и в сопутствующих им технологиям, найдутся те или иные механизмы, позволяющие решить эту задачу. Если в вашем стеке технологий нет подобного механизма, возможно, вы можете стать первым, кто его напишет.</p> <p>Обратимся к следующей особенности. В предыдущем примере не вызывало вопросов, как из REST модуля управление перейдет в application модуль, так как REST модуль зависел от application модуля.</p> <p>Сейчас же зависимость направлена в другую сторону. Но на самом деле код внутри REST модуля никак не поменяется, каким бы не было направление зависимостей между REST модулем и application модулем. Это связано с тем, что внутри REST модуля должны использоваться интерфейсы для сервисов из core модуля.</p> <p>Поэтому не имеет значения, есть ли у сервиса из core модуля сервис-декоратор из application модуля, потому что в любом случае в REST модуле будет использоваться интерфейс для сервиса, под которым потенциально может быть спрятан класс из application модуля. Подробнее продемонстрировано в примере ниже.</p> <pre><code class=\"java\">package aa0ndrey.dependency_inversion_guide.step_12.rest.order;\n\npublic class OrderRestController {\n    private final OrderService orderService; //(1)\n\n    public void create(HttpRequest httpRequest) {\n        var createOrderRequest = extractCreateOrderRequest(httpRequest);\n        orderService.create(createOrderRequest);\n    }\n\n    private CreateOrderRequest extractCreateOrderRequest(HttpRequest httpRequest) {\n        //Получение CreateOrderRequest из HttpRequest\n    }\n}\n</code></pre> <p>За интерфейсом <code>OrderService</code> в <code>(1)</code> может находиться реализация <code>OrderAppService</code>, которая находится в application модуле, несмотря на то, что зависимость направлена от application модуля в сторону REST модуля.</p> <p>В предыдущем примере, application модуль брал на себя еще две дополнительные ответственности. Он являлся площадкой для размещения общих инфраструктурных интерфейсов и классов-данных, а также мог потенциально хранить общие утилитные классы для использования в инфраструктурных модулях.</p> <p>Эти возможности, которые предоставлял application модуль, были полезными, но необязательными для application модуля. Ранее для application модуля в качестве основной ответственности было определено, что он в первую очередь должен заниматься координацией совместного выполнения нескольких модулей.</p> <p>Поэтому те возможности можно просто перенести в отдельный модуль. Например, общий infrastructure модуль. Тогда диаграмма модулей будет следующей.</p> <pre><code>      ┌──────────────┐\n┌───┌►│     Core     │◄─────────┬───────────────┐\n│   │ └──────▲───────┘          │               │\n│   │        │                  │               │\n│   │ ┌──────┴───────┐          │               │\n│ ┌─┼─┤  Application ├───────┬──┼────────────┐  │\n│ │ │ └──────┬───────┘       │  │            │  │\n│ │ │        │               │  │            │  │\n│ │ │ ┌──────▼───────┐ ┌─────▼──┴─────┐ ┌────▼──┴──────┐\n│ │ └─┤  Postgres    │ │    OTel      │ │    REST      │\n│ │   └──────┬───────┘ └────────┬─────┘ └───────┬──────┘\n│ │          │                  │               │\n│ │   ┌──────▼───────┐          │               │\n│ └──►│Infrastructure│◄─────────┴───────────────┘\n│     └──────┬───────┘\n└────────────┘\n</code></pre> <p>В итоге при направлении зависимостей от application модуля в сторону инфраструктурных модулей, удалось сразу избавиться от нескольких проблем, которые были обозначены в предыдущем разделе, но были получены новые.</p> <p>Самое главное, что данное решение позволяет сразу использовать реализации для конкретных технологий, что, с одной стороны, является преимуществом, с другой стороны, недостатком. О том, какой все-таки подход выбрать, описано в следующем разделе.</p> <h4>13. Выбор направления зависимостей между application и инфраструктурными модулями</h4> <p>Возможно ли в каждом отдельном случае использовать наиболее подходящее направление зависимости между application и инфраструктурным модулем? Да, возможно.</p> <p>Например, если для используемых механизмов из инфраструктурного модуля можно легко разработать общий инфраструктурный интерфейс или он уже кем-то разработан, то, конечно, лучше направить зависимость от инфраструктурного модуля в сторону application модуля.</p> <p>Если без огромных затрат усилий и каких-либо других недостатков можно добиться дополнительной устойчивости к изменениям в application модуле, то почему бы этого не сделать?</p> <p>Но в случае, если с разработкой интерфейса могут возникнуть какие-то сложности, или в случае, если общий инфраструктурный интерфейс может не давать тех возможностей, которые нужны, то лучше, конечно, использовать зависимость, направленную от application модуля в сторону инфраструктурного модуля.</p> <p>Также возможна ситуация, когда в начале было решено использовать общий инфраструктурный интерфейс, а после стало ясно, что, например, не хватает каких-либо возможностей из конкретной реализации. В этом случае стоит поменять направление зависимостей.</p> <p>Заметим, что изменить зависимость в уже разрабатываемой системе с направления от инфраструктурного модуля в сторону application модуля на направление от application модуля в сторону инфраструктурного модуля обычно проще, чем это сделать наоборот. Это связано с тем, что при любом направлении зависимостей, именно application модуль использует механизмы из инфраструктурных модулей.</p> <p>Исходя из вышесказанного, следует, что оптимальной стратегией является изначально рассматривать направление зависимостей от инфраструктурных модулей в сторону application модуля. И только когда будет доказано, что данное направление чем-то будет неудобно, следует его поменять. Это может случиться как сразу, еще до начала разработки на этапе проектирования, так и после.</p> <p>Рассмотрим пример, как могут развиваться события с направлением зависимостей между application модулем и инфраструктурными модулями. Предположим, что есть java-разработчик, который использует spring в качестве основного фреймворка. И он решил использовать redis для кэширования. Для этого он создал отдельный инфраструктурный одноименный redis модуль.</p> <p>При этом java-разработчик изучив spring решил из него использовать уже готовые <a href=\"https://docs.spring.io/spring-framework/docs/5.3.13/reference/html/integration.html#cache\" rel=\"noopener noreferrer nofollow\">общие инфраструктурные интерфейсы</a> для кэширования, которые не привязаны к конкретной реализации. Поэтому зависимость была направлена от redis модуля в сторону application модуля.</p> <p>Затем java-разработчик решил использовать менеджер распределенных блокировок (distributed lock manager), при этом также используя redis и библиотеку <a href=\"https://github.com/redisson/redisson/wiki/8.-Distributed-locks-and-synchronizers\" rel=\"noopener noreferrer nofollow\">redisson</a>, добавив ее в redis модуль.</p> <p>Изучив подходы, алгоритмы и api, которые используются, например, в <a href=\"https://zookeeper.apache.org/doc/r3.1.2/recipes.html\" rel=\"noopener noreferrer nofollow\">zookeeper</a> для распределенных блокировок, и сравнив их с <a href=\"https://redis.io/topics/distlock\" rel=\"noopener noreferrer nofollow\">redlock</a> алгоритмом, который используется в redis, разработчик сделал вывод, что создать общий инфраструктурный интерфейс для распределенных блокировок из zookeeper и redis ему будет достаточно тяжело, если вообще возможно, так как, например, в redis для удержания блокировок учитывается время.</p> <p>Тогда java-разработчик решил развернуть зависимость, чтобы она была направлена от application модуля в сторону redis модуля для того, чтобы использовать напрямую блокировки из redis.</p> <p>При этом он решил закрыть доступ до всех других классов, которые не относятся к механизмам блокировок и кэшированию, с помощью настроек зависимостей для модулей. И раз проект написан на java, то для закрытия доступов он решил использовать <a href=\"https://www.archunit.org/\" rel=\"noopener noreferrer nofollow\">ArchUnit</a>.</p> <p>Вероятно, что история может развиваться и иначе. Разработчик может сделать достаточно успешную абстракцию, создав общие инфраструктурные интерфейсы, для использования распределенных блокировок. Возможно, его общие инфраструктурные интерфейсы будут предоставлять не все возможности, которые есть в redis, но они могут быть полезны в будущем для перехода на zookeeper, если, например, нет уверенности в окончательном решении использовать redis.</p> <p>Затем в случае, если возможности его общих инфраструктурных интерфейсов себя исчерпают, он сможет перейти на прямую реализацию из redis.</p> <p>Отметим, что именно за счет использования надежной и универсальной защиты core модуля от инфраструктурных зависимостей, появляется возможность переключиться на использование конкретных реализаций из инфраструктурных модулей внутри application модуля в случае, если общие инфраструктурные интерфейсы чем-то не подходят или их создание не оправдано.</p> <p>Это происходит за счет того, что core модуль не пытается использовать или даже декларировать общие инфраструктурные интерфейсы, а перекладывает их использование в application модуль за счет шаблона наблюдатель, шаблона декоратор и за счет использования контекста.</p> <p>Таким образом достигается беспроигрышная ситуация (win-win), когда, с одной стороны, есть сильные гарантии того, что core модуль не будет подвержен влиянию зависимостей из инфраструктурных модулей, а с другой стороны, сохраняется потенциал использовать все возможности конкретной реализации из инфраструктурного модуля внутри application модуля, если это будет необходимо.</p> <h4>14. Изолирование инфраструктурных модулей</h4> <p>Иногда может возникнуть потребность настроить взаимодействие между инфраструктурными модулями. И что тогда в этом случае делать?</p> <p>Во-первых, можно явно определить зависимость между двумя инфраструктурными модулями. И тогда один модуль сможет использовать другой.</p> <p>Во-вторых, можно не определять явно зависимость между модулями и использовать интерфейсы, которые есть в модуле application, в случае, если все зависимости направлены в сторону application модуля. Если часть зависимостей направлены в сторону инфраструктурных модулей, то значит есть дополнительный infrastructure модуль, в котором возможна регистрация инфраструктурных интерфейсов взамен application модуля.</p> <p>Где бы инфраструктурные интерфейсы не были определены, в любом случае создается на них зависимость, пусть даже если она не прямая, а проходит через дополнительный модуль.</p> <p>Но возможен и третий вариант. Что если использовать для каждого инфраструктурного модуля те же подходы, что и для core модуля, чтобы добиться его независимости от других инфраструктурных модулей? Что если использовать в нем для этих целей шаблон наблюдатель, шаблон декоратор и контекст?</p> <p>Обратимся к задаче с отправкой заказа. Для создания заказа в базе данных используется интерфейс <code>OrderRepository</code>.</p> <pre><code class=\"java\">package aa0ndrey.dependency_inversion_guide.step_14.core.order;\n\npublic interface OrderRepository {\n    void create(Order order);\n}\n</code></pre> <p>Данный интерфейс имеет реализацию в postgres модуле.</p> <p>Предположим, что потребовалось с помощью <code>TimeSpanManager</code> собирать информации о времени выполнения метода <code>create</code>.</p> <p>Ниже представлен измененный интерфейс <code>TimeSpanManager</code>.</p> <pre><code class=\"java\">package aa0ndrey.dependency_inversion_guide.step_14.application.time_span_manager;\n\npublic interface TimeSpanManager {\n    void startTimeSpan(String name);\n\n    boolean isActive();\n\n    void addEvent(String name);\n\n    void stopTimeSpan();\n}\n</code></pre> <p>В интерфейс <code>TimeSpanManager</code> был добавлен метод <a href=\"https://opentelemetry.io/docs/java/manual_instrumentation/#create-spans-with-events\" rel=\"noopener noreferrer nofollow\">addEvent</a>, который позволяет к регистрируемому промежутку времени добавлять дополнительную информацию. Эта информация может носить вспомогательный характер для анализа промежутков времени.</p> <p>Пусть помимо регистрации времени выполнения метода <code>create</code> из класса <code>OrderRepositoryImpl</code>, посередине его выполнения необходимо добавить информацию о собранном SQL-запросе, используя <code>addEvent</code> из интерфейса <code>TimeSpanManager</code>.</p> <p>Скорее всего, читатель уже догадался, как для решения данной задачи будут совместно применены шаблон наблюдатель и шаблон декоратор.</p> <p>Рассмотрим для начала, как будет добавлена регистрация времени выполнения метода <code>create</code>. Для этого в application модуль будет добавлен декоратор для <code>OrderRepository</code>.</p> <pre><code class=\"java\">package aa0ndrey.dependency_inversion_guide.step_14.application.order;\n\npublic class OrderAppRepository implements OrderRepository { //(1)\n    private final OrderRepository orderRepository; //(2)\n    private final TimeSpanManager timeSpanManager;\n\n    public void create(Order order) {\n        try {\n            timeSpanManager.startTimeSpan(\"Вставка заказа в таблицу\"); //(3)\n            orderRepository.create(order); //(4)\n        } finally {\n            if (timeSpanManager.isActive()) {\n                timeSpanManager.stopTimeSpan(); //(5)\n            }\n        }\n    }\n}\n</code></pre> <p>В <code>(1)</code> класс <code>OrderAppRepository</code> также реализует интерфейс <code>OrderRepository</code>, так что он может быть использован в core модуле, но не напрямую, а через интерфейс <code>OrderRepository</code>.</p> <p>В <code>(2)</code> указан декорируемый объект с интерфейсом <code>OrderRepository</code>, который на самом деле является классом <code>OrderRepositoryImpl</code> из postgres модуля.</p> <p>В <code>(3)</code> и <code>(5)</code> вызываются методы для регистрации промежутка времени. А между ними в <code>(4)</code> вызывается метод <code>create</code> декорируемого объекта.</p> <p>Теперь рассмотрим, как будет добавлена информация о выполняемом SQL-запросе с помощью метода <code>addEvent</code> из <code>TimeSpanManager</code>. Ниже представлен класс <code>OrderRepositoryImpl</code> из postgres модуля.</p> <pre><code class=\"java\">package aa0ndrey.dependency_inversion_guide.step_14.postgres.order;\n\npublic class OrderRepositoryImpl implements OrderRepository {\n    private final CreateOrderRepositoryObserverImpl observer; //(6)\n\n    @Override\n    public void create(Order order) {\n        String sql = format( //(7)\n                \"insert into order (id, user_id, product_id) values (%s, %s, %s)\",\n                order.getId(),\n                order.getUserId(),\n                order.getProductId()\n        );\n\n        observer.afterSqlCreated(sql); //(8)\n\n        executeSql(sql); //(9)\n    }\n\n    private void executeSql(String sql) {\n        //отправка sql запроса\n    }\n}\n</code></pre> <p>В <code>(6)</code> находится поле наблюдателя, класс которого будет рассмотрен позже.</p> <p>В <code>(7)</code> в упрощенном виде происходит создание SQL-запроса. В реальном проекте, по крайней мере на java, не стоит таким образом собирать SQL-запрос, здесь лишь приведена упрощенная форма для компактности примера.</p> <p>В <code>(8)</code> происходит отправка события с помощью наблюдателя, а в <code>(9)</code> отправляется SQL-запрос.</p> <p>Ниже представлен класс наблюдателя для метода <code>create</code> из класса <code>OrderRepositoryImpl</code></p> <pre><code class=\"java\">package aa0ndrey.dependency_inversion_guide.step_14.application.order;\n\npublic class CreateOrderRepositoryObserverImpl {\n    private final TimeSpanManager timeSpanManager;\n\n    public void afterSqlCreated(String sql) {\n        timeSpanManager.addEvent(\"Создан sql запрос для вставки заказа в таблицу: \" + sql);\n    }\n}\n</code></pre> <p>Класс наблюдателя используется для того, чтобы добавить к регистрируемому промежутку времени информацию о выполняемом SQL-запросе.</p> <p>Отметим, что в данном примере в качестве параметра используется <code>String sql</code>, так как этого в данном случае достаточно. Но при необходимости для метода <code>create</code> из <code>OrderRepository</code> можно было бы создать контекст, как это было сделано для наблюдателей из <code>core</code> модуля в разделах 4, 5 и 6.</p> <p>Данный пример был построен, исходя из предположения, что зависимость направлена от postgres модуля в сторону application модуля.</p> <p>В случае, если зависимость направлена наоборот, то тогда в postgres модуле необходимо добавить и использовать интерфейс <code>CreateOrderRepositoryObserver</code>, реализация которого <code>CreateOrderRepositoryObserverImpl</code> все также будет находиться в application модуле.</p> <p>В результате получилось, что postgres модуль и open-telemetry модуль не имеют никаких зависимостей между собой. Все взаимодействия между модулями были вынесены в application модуль. Так можно поступать для большинства инфраструктурных модулей.</p> <p>Отсюда следует, что в большинстве случаев можно выносить все взаимодействия между модулями в application модуль, сохраняя высокую степень независимости каждого модуля от любых других инфраструктурных модулей. При этом связующая и координирующая роль application модуля только возрастает.</p> <p>Также необходимо отметить, что не всегда оправдано так изолировать каждый инфраструктурный модуль. Некоторые технологии могут иметь удобные интеграции между собой, которые либо являются частью одной из технологий, либо подключаются в качестве отдельных библиотек.</p> <p>Если для использования готовой интеграции необходима явная зависимость между модулями, то в этом случае стоит связать между собой эти модули явно.</p> <p>Также стоит учитывать, что наличие готовой интеграции еще не означает, что ее невозможно провести через использование шаблона наблюдатель и шаблона декоратор. Более того, в качестве механизма расширения некоторые технологии могут сами предлагать использование этих шаблонов.</p> <p>В качестве еще одного очевидного исключения можно также отметить использование логирования. Технически для каждого вызова метода для записи логов, можно использовать шаблон наблюдатель с контекстом. Но это вряд ли будет оправдано, так как слишком часто будет необходимо использовать наблюдателей. Более того, интерфейс для логирования достаточно прост и устойчив к изменениям, что позволяет добавлять его в каждый инфраструктурный модуль.</p> <p>Также очевидно, что не стоит под каждую библиотеку создавать отдельный независимый инфраструктурный модуль, если их можно отнести к одному более общему инфраструктурному модулю. Например, в модуль postgres могут быть подключены библиотеки относящиеся: к взаимодействию с СУБД postgres, к созданию SQL-запросов, к управлению пулом подключений, а также остальные библиотеки, которые связаны с postgres или созданием SQL-запросов.</p> <p>Настраивать взаимодействие между инфраструктурными модулями способом, описанным в данном разделе, следует тогда, когда эти модули являются достаточно разными. В противном случае, возможно, их необходимо объединить в один модуль, либо создать явную зависимость.</p> <p>В итоге в рамках данного раздела было продемонстрировано то, что даже между инфраструктурными модулями возможно организовывать взаимодействие через application модуль, применяя шаблон наблюдатель, шаблон декоратор и контекст. При этом сохраняется независимость инфраструктурных модулей между собой, а координирующая и связующая роль application модуля только возрастает.</p> <h4>15. Пример подключения библиотек и фреймворков к модулям</h4> <p>Предположим, что в разрабатываемом приложении есть 4 модуля:</p> <ul><li><p>core</p></li><li><p>application</p></li><li><p>REST</p></li><li><p>postgres</p></li></ul> <p>В рамках данного раздела рассмотрим стратегию по подключению библиотек и фреймворков к модулям. Начнем с core модуля.</p> <p>Core модуль содержит основную логику, которая должна быть максимально изолирована от инфраструктурных особенностей и используемых технологий. Лучше, чтобы в core модуле даже не были подключены какие-либо фреймворки общего назначения. В противном случае при разработке основной логики нужно будет считаться с используемыми фреймворками.</p> <p>Добавление фреймворка общего назначение может усложнить разработку тестов, ухудшить понимания происходящего в основной логике и ухудшить возможности по смене версии фреймворка или по смене фреймворка целиком. Конечно, нельзя однозначно утверждать, что всегда стоит избегать добавления фреймворков общего назначения в core модуль, но абсолютно точно стоит учитывать те недостатки, к которым это приведет.</p> <p>В частности, к <a href=\"https://spring.io/\" rel=\"noopener noreferrer nofollow\">фреймворкам общего назначения</a> можно отнести такие фреймворки, которые помогают в построении приложения, обеспечивая связи между различными его частями и навязывая определенный архитектурный стиль.</p> <p>К фреймворкам общего назначения можно отнести большинство фреймворков, которые реализуют шаблон внедрение зависимостей (dependency injection). Стоит отметить, что шаблон внедрения зависимостей помогает в реализации инверсии зависимостей, но важно помнить, что это разные понятия.</p> <p>Помимо фреймворков общего назначения, есть различные утилитные библиотеки, которые не навязывают архитектурный стиль, которые могут быть использованы с любым фреймворком, и которые не связаны с какой-либо инфраструктурной технологией.</p> <p>Например, <a href=\"https://commons.apache.org/proper/commons-collections/\" rel=\"noopener noreferrer nofollow\">библиотеки</a> для работы с массивами данных, <a href=\"https://projectlombok.org/\" rel=\"noopener noreferrer nofollow\">библиотеки</a> упрощающие работу с данными, <a href=\"https://mapstruct.org/\" rel=\"noopener noreferrer nofollow\">библиотеки</a> упрощающие конвертацию (mapping) данных и другие. В некотором смысле эти библиотеки добавляют все те возможности, которые могли бы быть в стандарте языка программирования. Использование утилитных библиотек допустимо в core модуле.</p> <p>Перейдем к application модулю. Как раз в application модуле должен находится фреймворк общего назначения. Особенно если это фреймворк по внедрению зависимостей, так как в этом смысле он отлично сочетается со связывающей и координирующей ролью application модуля.</p> <p>Отсюда также следует, что если в core модуле не был добавлен фреймворк общего назначения, то в application модуле должен быть код, который интегрирует классы из core модуля с фреймворком общего назначения, в частности, добавит объекты классов из core модуля в DI-контейнер.</p> <p>И наконец перейдем к инфраструктурным модулям: REST и postgres. Здесь должны быть библиотеки, обеспечивающие работу соответствующих инфраструктурных технологий. Для REST модуля это могут быть библиотеки, связанные с HTTP протоколом и с работой с JSON форматом. Для postgres модуля это библиотеки, позволяющие взаимодействовать с СУБД postgres, позволяющие создавать SQL-запросы и позволяющие извлекать результат выполнения SQL-запросов.</p> <p>Также к инфраструктурным модулям может быть добавлен фреймворк общего назначения, особенно если во фреймворке общего назначения есть удобные интеграции и реализации для различных технологий.</p> <p>Данная стратегия по подключению библиотек и фреймворков к модулям позволяет не смешивать различные технологии и зоны ответственности. Также в случае, если в core модуле не будет использовано никакого фреймворка, это позволит упростить разработку и тестирование core модуля, а также позволит в будущем проще менять версии фреймворков или менять фреймворки целиком.</p> <h4>16. Проведение аналогий</h4> <p>В данном разделе будут проведены аналогии на другие шаблоны проектирования и технологии преимущественно из микросервисной архитектуры, с которыми, возможно, не каждый читатель знаком. К сожалению, в рамках данного раздела не будет приведено детального описания для каждой технологии или шаблона, а лишь будут указаны ссылки, где можно получить подробную информацию.</p> <p>Если что-то останется непонятным, то это никак не отразиться на общем понимании статьи, так как данный раздел носит вспомогательный характер.</p> <p>Представим, что мы перейдем от рассмотрения архитектуры одного приложения к микросервисной архитектуре. Какие можно заметить аналогии с тем, что было использовано ранее в архитектуре одного приложения?</p> <p>Можно начать, возможно, с самого очевидного: с <a href=\"https://microservices.io/patterns/communication-style/messaging.html\" rel=\"noopener noreferrer nofollow\">брокеров сообщений</a>. Для того чтобы обеспечить низкую связность между различными микросервисами, могут быть использованы брокеры сообщений с применением <a href=\"https://microservices.io/patterns/data/event-driven-architecture.html\" rel=\"noopener noreferrer nofollow\">событийно-ориентированной архитектуры</a> для микросервисов, что аналогично использованию шаблона наблюдатель.</p> <p>Более того, в событийно-ориентированной архитектуре можно выделить два подхода: <a href=\"https://codeopinion.com/event-choreography-orchestration-sagas/\" rel=\"noopener noreferrer nofollow\">хореография и оркестрация</a>. Использование хореографии аналогично тому, как ранее в первой части статьи в примерах приложения каждый инфраструктурный модуль реализовывал внутри себя наблюдателей. В свою очередь, использование оркестрации аналогично использованию модуля application для централизации логики.</p> <p>Примечательно то, что те недостатки, которые выделяются в хореографии, связанные с неявным управлением, решаются с помощью использования оркестрации, что аналогично тому, как недостатки с помощью нескольких наблюдателей в инфраструктурных модулях решались размещением единственного наблюдателя в application модуле.</p> <p>Можно заметить, что application модуль хорошо сопоставляется с теми или иными решениями из микросервисной архитектуры, которые предполагают координацию нескольких микросервисов. Сопоставить application модулю также можно и шаблон <a href=\"https://www.enterpriseintegrationpatterns.com/patterns/messaging/ProcessManager.html\" rel=\"noopener noreferrer nofollow\">process manager</a> из <a href=\"https://www.enterpriseintegrationpatterns.com/\" rel=\"noopener noreferrer nofollow\">шаблонов корпоративных интеграций</a>.</p> <p>А есть ли среди подходов и шаблонов для микросервисов что-то похожее на шаблон декоратор? Да, есть, например, прокси-сервера, которые могут расширять функции основного сервиса, за счет того, что сетевой трафик проходит целиком через них. Прокси-сервера могут взять на себя часть обязанностей по кэшированию, логированию и безопасности, расширяя тем самым возможности основного сервиса, подобно использованию шаблона декоратор.</p> <p>В рамках данной статьи было уделено мало внимания использованию данных. Тем не менее для модуля core, для application модуля, если не используется infrastructure модуль, и для infrastructure модуля, если он используется, можно отметить, что они берут на себя ответственность по хранению и стандартизации интерфейсов и классов-данных, используемых между модулями. Это в свою очередь аналогично использованию шаблона <a href=\"https://www.enterpriseintegrationpatterns.com/patterns/messaging/CanonicalDataModel.html\" rel=\"noopener noreferrer nofollow\">каноничных моделей данных</a> из шаблонов корпоративных интеграций.</p> <p>Построение подобных аналогий полезно для переиспользования опыта, подходов и шаблонов из разных областей знаний, а также это позволяет лучше раскрыть представленный материал и идеи.</p> <h4>17. Подведение итогов</h4> <p>Подведем итог и рассмотрим, что было представлено во второй части.</p> <ol><li><p>Было продемонстрировано использование шаблона наблюдатель и шаблона декоратор с помощью application модуля.</p></li><li><p>Была определена основная ответственность application модуля, заключающаяся в координации взаимодействий всех остальных модулей.</p></li><li><p>Были рассмотрены различные варианты направления зависимостей и то, с какими проблемами возможно придется столкнуться при выборе того или иного варианта направления зависимостей.</p></li><li><p>Была предложена стратегия для направления зависимостей, подразумевающая, что все зависимости изначально стоит направлять в сторону application модуля, так как изменить направление в этом случае проще, чем обратно.</p></li><li><p>Было продемонстрировано использование шаблона наблюдатель и шаблона декоратор для изолирования инфраструктурных модулей друг от друга, что должно положительно сказывается на соблюдении зон ответственности каждого модуля.</p></li><li><p>Была представлена стратегия размещения библиотек и фреймворков между модулями.</p></li><li><p>Были проведены аналогии на подходы и шаблоны из микросервисной архитектуры.</p></li></ol> <p>Данный раздел является последним в рамках данного руководства, а нераскрытая тема использования чистых функций для core модуля будет представлена в качестве отдельной статьи. Я, aa0ndrey, надеюсь, что кому-то мой опыт и раскрытие данной темы оказались полезными.</p> <p><a href=\"https://github.com/aa0ndrey/dependency-inversion-guide/tree/habr\" rel=\"noopener noreferrer nofollow\">Ссылка</a> на github репозиторий.</p>",
        "is_active": true,
        "author": 1,
        "tag": "инверсия зависимостей",
        "add_datetime": "2021-11-24T04:19:09Z",
        "article_status_new": 4
    }
},
{
    "model": "mainapp.article",
    "pk": 1637747514,
    "fields": {
        "hub": 4,
        "name": "Серверная моей мечты",
        "image": "https://habrastorage.org/getpro/habr/upload_files/4ee/e3b/e45/4eee3be45e77588974d0c1696925e800.jpg",
        "preview": "<figure class=\"full-width \"><img src=\"https://habr",
        "text": "<figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/4ee/e3b/e45/4eee3be45e77588974d0c1696925e800.jpg\" width=\"637\" height=\"578\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/4ee/e3b/e45/4eee3be45e77588974d0c1696925e800.jpg\" data-blurred=\"true\"><figcaption></figcaption></figure> <p>Если говорить о мечтах, они не всегда рациональны. Иногда хочется удовлетворить свою “хотелку” любыми путями, так как избавиться от этой идеи невозможно. Прямо как в фильме Начало: “Идея похожа на вирус, она живуча и крайне заразна. Мельчайшее зёрнышко идеи способно прорасти и либо стать частью тебя, либо уничтожить тебя”.</p> <p>Кому-то хочется купить Ламборгини, когда он живёт в городе без хороших дорог и скоростных трасс. Кто-то мечтает жить в огромном трехэтажном особняке с сотней комнат, пятью гаражами и комнатой для грязи. Один.</p> <p>А мне захотелось помечтать об идеальной серверной, где каждый элемент будет работать безупречно, пускай даже некоторые решения будут очень дорогими, а вся идея – это всего лишь полёт фантазии.</p> <h3>Серверная – храм сисадмина </h3> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Трон главного сисадмина.\" title=\"Трон главного сисадмина.\" height=\"1024\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/034/670/372/034670372ce1beb161bdac77bbee24e6.png\" data-width=\"681\"><figcaption>Трон главного сисадмина.</figcaption></figure> <p>Многие из вас уже были в серверной, заглядывали туда краем глаза или в крайнем случае видели в фильмах. В кино зачастую серверная выглядит, как кабина пилота космического челнока, но в жизни всё намного прозаичней – под IT-инфраструктуру переоборудуют старую кладовку, ставят туда пару стоек и кондиционер. Но по уму надо проектировать комнату или строить отдельное здание.</p> <p>Серверное оборудование встаёт в копеечку – сотни тысяч или миллионы рублей. Может показаться, что это много, но по опыту нашего системного архитектора оборудование составляет ≈10% от общих затрат на серверную. Это определяется требованиями бизнеса. Также оно обеспечивает работу бизнес-процессов, а потому к серверным выдвигаются определенные требования и рекомендации.</p> <p><strong>Например:</strong></p> <ul><li><p>Повышенное давление, чтобы пыль не попадала внутрь;</p></li><li><p>Резервные источники электропитания: ИБП, дизель-генераторы и т.п.;</p></li><li><p>Уровень пола выше, чем в других помещениях. Используется в серверных, где СКС под фальшполом;</p></li><li><p>Дополнительное кондиционирование воздуха, чтобы поддерживать влажность 40-50% и температуру в пределах 20-25º С.</p></li></ul> <p>За всем этим добром надо следить, обновлять, в общем – обслуживать. Для этого компании нанимают сисадминов (одного или нескольких), которые настраивают и проверяют резервирование, обновляют софт, устраняют неполадки, например, бэды на жёстких дисках, следят за безопасностью и многим другим.</p> <p>Созданием и планированием нашей идеальной серверной комнаты как раз займётся гипотетический сисадмин с неограниченным бюджетом и полномочиями. В общем, он попал в некий сисадминский рай. Ну или ад, тут уж зависит от точки зрения :D</p> <p>В своих мечтах он, разумеется, не будет планировать, в каких местах штробить стену, чтобы сделать розетки, а сделает упор на свои мечты и концептуальное виденье:</p> <ul><li><p>В каком помещении расположиться;</p></li><li><p>Как сделать постоянный микроклимат внутри;</p></li><li><p>Как организовать отказоустойчивость всех инженерных систем;</p></li><li><p>Как обеспечить пожарную безопасность, сделать СКУД и многое другое.</p></li></ul> <figure class=\"\"><img src=\"/img/image-loader.svg\" height=\"1600\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/155/61a/351/15561a351d312d9f6dbf393b18b91514.png\" data-width=\"484\"><figcaption></figcaption></figure> <h3>Дата-центр — старший брат серверной комнаты</h3> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"560\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/4bb/79e/d15/4bb79ed1579872ed32bfd84ba573953e.png\" data-width=\"840\"><figcaption></figcaption></figure> <p>Любой центр обработки данных является по своей сути серверной комнатой на стероидах. Задачи, которые решают ЦОД и серверная, могут пересекаться. Разница в основном в масштабах, бюджете, сертификации и надежности.</p> <p>При его создании используются комплексные инженерные и IT-решения, а также определенные отраслевые стандарты. Например, американские стандарты <a href=\"https://en.wikipedia.org/wiki/TIA-942\"><u>TIA-942</u></a>, <a href=\"https://ru.wikipedia.org/wiki/TIA/EIA-568-B\">TIA/EIA-568-B</a> или европейский EN 50173−5. Почему? Когда мы говорим о ЦОДах, в последнюю очередь хочется получить непредсказуемый результат.</p> <p><strong>Ну и конечно же размышлений на этот счёт может быть +∞, поэтому дополняйте своими идеями. Уверен, что всем будет интересно.</strong></p> <h4>Классификация</h4> <p>Поскольку спектр решаемых задач огромен, то классификация ЦОДов имеет множество параметров:</p> <ul><li><p><strong>По целям использования:</strong></p><ul><li><p><strong>Корпоративный (наш вариант)</strong> – решает задачи владельца или заказчика;</p></li><li><p><em>Смешанный</em> – решает задачи владельца и арендаторов;</p></li><li><p><em>Хостинговый</em> – сдаётся в аренду.</p></li></ul></li><li><p><strong>По размеру и количеству серверов – очень условное разделение (это самостоятельные объекты, а потому помимо серверов есть и всё сопутствующее необходимое оборудование):</strong></p><ul><li><p><strong><em>Микро </em>– де-факто это серверная, чаще всего создаётся в пределах основного помещения компании, вмещает ≈ до 5 серверов;</strong></p></li><li><p><strong><em>Малые </em>– серверная побольше, может быть в пределах основного помещения или на стороне, вмещает ≈ от 5 до 24 серверов;</strong></p></li><li><p><strong><em>Средние – ЦОД, чаще всего отдельное здание или помещение, вмещает ≈ от 25 до 100 серверов;</em></strong></p></li><li><p><strong><em>Крупные – ЦОД, отдельное здание, вмещает ≈ от 100 и более серверов.</em></strong></p></li></ul></li><li><p><strong>По назначению (оба варианта наши):</strong></p><ul><li><p><strong><em>Основной</em> – вся нагрузка на нём;</strong></p></li><li><p><strong><em>Резервный </em>– берёт на себя нагрузку, когда случается форс-мажор, или нужно обслуживание оборудования основного ЦОДа.</strong></p></li></ul></li><li><p><strong>По типу построения:</strong></p><ul><li><p><strong><em>Контейнерные – зачастую мобильные ЦОДы, которые размещают в адаптированных грузовых контейнерах;</em></strong></p></li><li><p><strong><em>Мобильные – это может быть любой ЦОД, приспособленный для перемещения машинами, поездами, кораблями, самолётами и т.д;</em></strong></p></li><li><p><strong><em>Стационарные – ЦОДы, размещённые в здании (или в его части):</em></strong></p><ul><li><p><strong><em>Здание, возведённое специально под ЦОД;</em></strong></p></li><li><p>Переоборудованное модернизированное здание;</p></li><li><p><strong><em>Трэш – самый дешевый вид, размещается в неприспособленных зданиях и помещениях (склад, ангар);</em></strong></p></li></ul></li></ul></li><li><p><strong>По типу размещения на местности: </strong></p><ul><li><p><strong><em>Надземный</em> – всё понятно, классической ЦОД над землёй;</strong></p></li><li><p><strong><em>Подземный</em> – шахты, бывшие бункеры, тоннели, подземные хранилища;</strong></p></li><li><p><strong><em>Плавучий </em>– на каком-либо водоёме, охлаждается также водой.</strong></p></li></ul></li><li><p><strong>По отказоустойчивости:</strong></p></li></ul> <p>Система классификации <a href=\"https://ru.uptimeinstitute.com/tiers\"><u>Uptime Institute</u></a> (UI) выделяет <strong>4 прогрессивных уровня отказоустойчивости ЦОДов </strong>(каждый последующий наследует все предыдущие уровни). UI сертификацию проходят такие компании, как Compass Datacenters, Huawei, DXN и многие другие.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"510\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/c49/76d/592/c4976d592d90b9ae7bafba9a9821c340.png\" data-width=\"555\"><figcaption></figcaption></figure> <ul><li><p><strong>Tier I – 99,671% или 1729 минут простоя за год</strong></p></li></ul> <p>ЦОД уровня Tier I — это базовый уровень пропускной способности инфраструктуры для поддержки информационных технологий в офисе и за его пределами. Требования для объекта уровня Tier I включают:</p> <ul><li><p>Источник бесперебойного питания (ИБП) для случаев проседания напряжения, отключений и скачков напряжения;</p></li><li><p>Область для IT-систем;</p></li><li><p>Специализированное охлаждающее оборудование, которое работает не только в рабочее время;</p></li><li><p>Двигатели-генераторы на случай отключения электроэнергии.</p></li></ul> <p>Уровень Tier I защищает от ошибок, вызванных человеческим фактором, но не от непредвиденных отказов или перебоев. Дополнительное оборудование включает в себя чиллеры, насосы, модули ИБП и двигатели-генераторы. Объект подлежит полному отключению для профилактического обслуживания и ремонта, при этом невыполнение этого требования увеличивает риск незапланированных перебоев и серьезных последствий из-за сбоя системы.</p> <p><strong>Назначение</strong>: Server’s location.</p> <p><strong>Применение</strong>: размещение некритичных по доступности серверов, таких как системы хранения архивов, резервного копирования, почтовых серверов, системы складского учета, бухгалтерские базы данных, развертывание вспомогательных web-сервисов.</p> <ul><li><p><strong>Tier II – 99,741% или 1361 минут</strong></p></li></ul> <p>Объекты уровня Tier II охватывают компоненты избыточной мощности, обеспечивающие питание и охлаждение, которые гарантируют более высокое качество обслуживания и безопасность при сбоях. К этим компонентам относятся:</p> <ul><li><p>Двигатели-генераторы;</p></li><li><p>Аккумуляторы;</p></li><li><p>Чиллеры;</p></li><li><p>Охлаждающие установки;</p></li><li><p>Модули ИБП;</p></li><li><p>Насосы;</p></li><li><p>Оборудование для отведения тепла;</p></li><li><p>Топливные баки;</p></li><li><p>Топливные элементы.</p></li></ul> <p>Путь к уровню Tier II обеспечивает критическую среду, а компоненты можно удалять без отключения системы. Как и объект уровня Tier I, непредвиденное отключение ЦОД уровня Tier II повлияет на систему.</p> <p><strong>Назначение</strong>: Web и Back Office.</p> <p><strong>Применение</strong>: размещение базовых web-сервисов и сайтов, развертывание служебных бизнес-систем, баз данных и некритических бизнес-приложений, хостинг (включая визуализацию и облачные решения начального уровня); хостинг небольших игровых серверов.</p> <ul><li><p><strong>Tier III – 99,982% или 95 минут</strong></p></li></ul> <p>ЦОД уровня Tier III с возможностью обслуживания без отключения полезной нагрузки (Concurrently Maintainable) оснащается резервными компонентами и несколькими независимыми каналами распределения, обслуживающими IT-нагрузку. В отличие от уровней Tier I и Tier II, эти объекты не требуют остановки в случае технического обслуживания или замены оборудования. Компоненты уровня Tier III добавляются к компонентам Tier II, чтобы любую деталь можно было выключить без воздействия на IT-операции.</p> <p><strong>Назначение</strong>: Business Critical.</p> <p><strong>Применение</strong>: Критические бизнес-приложения и базы данных с требованием высокой доступности, коммерческие SaaS и PaaS сервисы, облачные вычисления и виртуализация среднего уровня; сервисы, обслуживающие торговлю на бирже.</p> <ul><li><p><strong>Tier IV – 99,995% или 26 минут (выбор нашего гипотетического админа)</strong></p></li></ul> <p>ЦОД уровня Tier IV имеет несколько независимых и физически изолированных систем, которые действуют как компоненты избыточной мощности и каналы распределения. Разделение необходимо для предотвращения повреждения обеих систем. Среда не пострадает в связи с проведением запланированных и незапланированных мероприятий. Однако если компоненты избыточной мощности или каналы распределения отключены для технического обслуживания, среда может столкнуться с повышенным риском нарушения в случае сбоя.</p> <p>Объекты уровня Tier IV добавляют отказоустойчивость (Fault Tolerance) к топологии Tier III. При сбое части оборудования или сбое в канале распределения IT-операции не пострадают. Всё IT-оборудование должно обладать отказоустойчивостью (Fault Tolerant) в части энергоснабжения. ЦОД уровня Tier IV также требуют непрерывного охлаждения (Continuous Cooling) для обеспечения стабильности окружающей среды.</p> <p><strong>Назначение</strong>: Business Continuity.</p> <p><strong>Применение</strong>: Глобальные бизнес-приложения высокой доступности, инфраструктурные решения, глобальные облачные вычисления и облачная виртуализация; инфраструктура банков.</p> <p>Как вы уже догадались, наш сисадмин в раю будет создавать серверную комнату с оглядкой на стандарты ЦОДов.</p> <figure class=\"full-width \"><img src=\"https://habrastorage.org/r/w780q1/getpro/habr/upload_files/608/779/941/608779941dde57e45c841c8dc71bf0e4.jpeg\" alt=\"Когда уснул и видишь сон об идеальной серверной.\" title=\"Когда уснул и видишь сон об идеальной серверной.\" width=\"728\" height=\"722\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/608/779/941/608779941dde57e45c841c8dc71bf0e4.jpeg\" data-blurred=\"true\"><figcaption>Когда уснул и видишь сон об идеальной серверной.</figcaption></figure> <h3>Идеальная серверная</h3> <p>Создание серверной мечты начинается с выбора помещения. Здесь есть два пути: сделать серверную в уже имеющемся помещении или создать новое с учётом всех нюансов и “хотелок”. Поскольку наш гипотетический сисадмин ничем не ограничен, он выбирает второй путь. Итак:</p> <ul><li><p><strong>Выбор места.</strong></p></li></ul> <p>Серверная будет подальше от вентиляционных шахт, лифтов, подвалов, труб с водой, дренажных систем и любителей потыкать мигающие кнопки. Главный распределительный пункт (ГРП) будет внутри. От окон откажемся, чтобы солнечные лучи не попадали на оборудование, не заползали жучки, проще было поддерживать внутренний микроклимат и не отвлекаться на тополиный пух, жару, июнь на улице. Эх...</p> <ul><li><p><strong>Учтём нагрузку на перекрытия, чтобы серверы не упали.</strong></p></li></ul> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"\" title=\"\" height=\"525\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/ada/d50/02b/adad5002b851f41bd75fe32e74f19076.png\" data-width=\"700\"><figcaption></figcaption></figure> <p>Шкаф 42U, загруженный серверами и другим оборудованием, может весить больше тонны. Ширина шкафа – 600 мм, а глубина 800 мм. Получается, что площадь, которую он занимает на полу – 0,48 м². А шкафов может быть несколько. Поэтому наш пол будет выдерживать от 2000 кг/м², чтобы с запасом и наверняка.</p> <ul><li><p><strong>Сделаем высокие потолки, чтобы вместить фальшпол + стойки высотой в 42U.</strong></p></li></ul> <p>Фальшпол возьмем 500 мм + 2000 мм шкаф и запас в 500 мм. Итого нам нужны потолки высотой в 3 метра. </p> <ul><li><p><strong>Чистая комната.</strong></p></li></ul> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"1024\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/a57/7c0/22c/a577c022c4dcfaf963a83f13939d0495.png\" data-width=\"1539\"><figcaption></figcaption></figure> <p>Мы отдадим предпочтение белым стенам, полам, потолкам и оборудованию. Плюс яркое освещение. Любая грязь в такой серверной будет видна сразу. Чтобы не допустить попадания пыли внутрь, мы повысим давление. Приточный воздух будет фильтроваться и поступать в большем объеме, чем убывать.</p> <ul><li><p><strong>Сделаем комнату с гидро и шумоизоляцией</strong></p></li></ul> <p>Серверная – это шумное техническое помещение, не рассчитанное на долгое нахождение людей внутри. С шумоизоляцией всё понятно – это толстые стены и дверь с уплотнителями. Потолок же гидроизолируем, чтобы не допустить протечку воды. Сделали один раз и забыли.</p> <ul><li><p><strong>Подключим 3 интернет-провайдера с SLA.</strong></p></li></ul> <p>Для надежности надо минимум 3 магистральных провайдера, так как на практике бывают случаи одновременного отключения сразу нескольких. А для автопереключения нам понадобится собственный диапазон IP, иначе бессмысленно. Ну и SLA, чтобы получать быструю поддержку.</p> <ul><li><p><strong>Кондиционирование с прецизионным охлаждением и контролем влажности.</strong></p></li></ul> <p>Для охлаждения будем использовать межрядные блоки, которые осуществляют теплообмен с серверами. Принцип работы такой: фреоновый контур связан с выносным воздушным охлаждением. Шкаф при этом может быть как закрытым, так и открытым. Подобное охлаждение при небольших габаритах позволяет очень точно задать температуру, относительную влажность, а также вести удобный мониторинг и обслуживание.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"653\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/449/be7/310/449be73104de06da5a1e5d3a35792268.png\" data-width=\"675\"><figcaption></figcaption></figure> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"350\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/dc5/a1d/a05/dc5a1da05e6e688516cb069360fecc51.png\" data-width=\"525\"><figcaption></figcaption></figure> <p>Нужные нам параметры возьмём из TIA-942 и будем их придерживаться:</p> <ul><li><p>Температура по сухому термометру психрометра: от 20-25º С</p></li><li><p>Относительная влажность: от 40% до 50%;</p></li><li><p>Точка росы: не более 21º С ;</p></li><li><p>Скорость изменения: не более 5º С в час.</p></li></ul> <p>Разумеется, данные параметры должны поддерживаться во время работы серверов, поэтому и задавать их будем только после включения всего оборудования и штатной нагрузки. При дальнейшей модернизации нужно также не забывать регулировать кондиционирование.</p> <p>Помимо межрядных блоков организуем расположение шкафов и стоек по перемежающейся схеме, чтобы передняя сторона в каждом ряду была обращена к передней же стороне другого ряда, создавая «горячие» и «холодные» коридоры.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"404\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/bc1/db6/e16/bc1db6e161e76c73fe4849e4bd0c3684.png\" data-width=\"1208\"><figcaption></figcaption></figure> <ul><li><p><strong>Сделаем фальшпол и спрячем под ним СКС</strong></p></li></ul> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"449\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/d2f/136/8ca/d2f1368ca107b3f8704690b439da8ac0.png\" data-width=\"1000\"><figcaption></figcaption></figure> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"1048\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/cce/b9e/4f9/cceb9e4f939f1b2adf889a2be1b2a870.png\" data-width=\"1600\"><figcaption></figcaption></figure> <p>СКС – это структурированная кабельная сеть. Хуже всего в серверной – это хаос и беспорядок. Поэтому проблему решим кардинально, спрятав всё под антистатический фальшпол. Обычный пол может накапливать статический заряд, а если случится разряд, то это может повредить оборудование.</p> <p>При этом фальшпол даст нам ещё несколько преимуществ:</p> <ul><li><p>Заземление с медной сеткой;</p></li><li><p>Лёгкий доступ ко всем коммуникациям через люки; </p></li><li><p>Возможность установить дополнительное охлаждение (если потребуется); </p></li><li><p>Защита от затопления.</p></li></ul> <p>Настройка СКС – это скорее инженерное искусство, в котором есть миллионы нюансов. Наш сисадмин реализует несколько моментов, которые точно хотел бы видеть в своей серверной, но спектр работ этим не ограничится:</p> <ul><li><p>Ориентирование на стандарты <strong>EN 50173, ISO/IEC 11801</strong>;</p></li><li><p>Оптическая подсистема на оборудовании класса <strong>ОМ4</strong> (высокоскоростное многомодовое оптическое волокно типа 50/125);</p></li><li><p>Медная подсистема восьмой категории <strong>CAT 8 </strong>(полоса пропускания – от 1 МГц до 2000 МГц);</p></li><li><p>Все патч-корды в медной подсистеме с защитой;</p></li></ul> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"250\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/68b/5f5/644/68b5f56443ddcf9044fde96447204287.png\" data-width=\"760\"><figcaption></figcaption></figure> <ul><li><p>Печатная и долговечная маркировка патч-кордов и патч-панелей, чтобы прочитать информацию мог кто угодно;</p></li></ul> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"1000\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/b47/dda/6a1/b47dda6a1000f1c75583acb3a3535c3f.png\" data-width=\"1000\"><figcaption></figcaption></figure> <ul><li><p>Нумерация розеток и серверной части разводки;</p></li><li><p>Вся маркировка будет проходить по заранее составленной схеме с учётом плана здания;</p></li><li><p>Розетки только качественные и дорогие: чтобы сердечник не болтался, была крышка с защитой от пыли, а обжим витой пары с помощью ударника.</p></li></ul> <figure class=\"\"><img src=\"/img/image-loader.svg\" height=\"217\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/9ec/025/6f7/9ec0256f799444d0f4fe313b17dc768c.png\" data-width=\"500\"><figcaption></figcaption></figure> <p>Все вышеописанные меры позволят с комфортом обслуживать серверную, и даже внешний сисадмин быстро разберётся, где, что и как;</p> <ul><li><p><strong>Пожарная безопасность.</strong></p></li></ul> <p>Чтобы серверная нашей мечты не сгорела, нужно сделать грамотную систему пожарной безопасности. Помимо стандартных требований по ГОСТу мы обеспечим дополнительные. Обычные спринклерные системы нам точно не подойдут, так как влага мгновенно уничтожит весь наш труд. Что будем использовать мы?</p> <ul><li><p>Сделаем мультиканальную аспирационную систему пожарных извещателей (АДПИ) с высокой чувствительностью класса А. Эта система постоянно анализирует воздух в помещении, что позволяет мгновенно реагировать на дым. Можно провести под фальшпол и в каждую стойку или шкаф отдельно;</p></li></ul> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" alt=\"Применения мультиканального АДПИ для защиты серверных стоек.\" title=\"Применения мультиканального АДПИ для защиты серверных стоек.\" height=\"435\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/bbd/4b6/33a/bbd4b633a7bf103c787378ab7887774c.png\" data-width=\"558\"><figcaption>Применения мультиканального АДПИ для защиты серверных стоек.</figcaption></figure> <ul><li><p>Добавим четырехканальные комбинированные датчики дыма, тепла, пламени и газа. Плюс они будут адресными, благодаря этому мы сможем понять, в каком конкретно месте начались проблемы или требуется обслуживание оборудования. Такие датчики фиксируют несколько состояний: “нормальная работа”, “пожар”, “неисправность”, “загрязнение датчика” и другие; </p></li><li><p>Датчики, обнаружив нестандартную ситуацию, будут отправлять на наши смартфоны или почту сигналы тревоги;</p></li><li><p>Дверь, потолочные перекрытия, стены и перегородки будут из несгораемых материалов и обеспечивать огнестойкость не менее 45 минут;</p></li><li><p>Добавим светозвуковые оповещатели для безопасности людей;</p></li><li><p>Организуем систему автоматического газового пожаротушения.</p></li></ul> <p>Выберем инерген, так как он безопасен для людей и не мешает работе электроники.</p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"980\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/e3f/231/0fd/e3f2310fdd0e3f505f8aa37bbd421d15.png\" data-width=\"1500\"><figcaption></figcaption></figure> <ul><li><p><strong>Динамический источник бесперебойного питания.</strong></p></li></ul> <figure class=\"\"><img src=\"/img/image-loader.svg\" height=\"275\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/34c/16e/9f4/34c16e9f48c6a9001a79fd42781d4cfa.png\" data-width=\"500\"><figcaption></figcaption></figure> <p>Мы будем использовать не только несколько городских электросетей, но и установим собственную дизель-генераторную установку (ДГУ) с блекджеком и электромагнитным накопителем кинетической энергии для бесперебойного питания. Свойства такого ДГУ обеспечивают отклик на уровне сотых долей секунды, позволяя не прерывать электропитание.</p> <ul><li><p><strong>Резервирование всех инженерных систем по схеме 2(N+1)</strong></p></li></ul> <p>Для повышения надежности серверной необходимо резервирование компонентов системы. Схемы резервирования обозначают буквой “N” (need), где N – это количество элементов в звене системы. 2(N+1) мы будем использовать везде, в том числе в электропитании, кондиционировании, пожаротушении и т.д. Зачем? Потому что мечтать не вредно :D</p> <p>Рассмотрим резервирование на примере электропитания:</p> <ul><li><p><strong>N </strong>– это система самого элементарного резервирования, например, ИБП. Для ремонта придётся выключать систему и объяснять бухгалтерии, почему 1С не работает. Вам оно надо?</p></li></ul> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"540\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/4a7/902/d2d/4a7902d2d2186d26adcbe621dc2cb91f.png\" data-width=\"1600\"><figcaption></figcaption></figure> <ul><li><p><strong>N+1 даёт нам запасной ИБП. Хорошо, но всё еще есть чему выходить из строя. Нам не подходит;</strong></p></li></ul> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"651\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/3f7/c6b/170/3f7c6b170e2c7e22aa37a581c69edb9b.png\" data-width=\"1600\"><figcaption></figcaption></figure> <ul><li><p><strong>2N более дорогой вариант резервирования, так как требуется больше оборудования, но и надёжность увеличивается. Однако слабое звено всё ещё остаётся, поэтому нам не подходит.</strong></p></li></ul> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"647\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/5b2/2b3/2a0/5b22b32a02840e9071c1d9f91b3e7aac.png\" data-width=\"1600\"><figcaption></figcaption></figure> <p>Но если мы зарезервируем электросеть дизельным генератором и сделаем бесшовное переключение на него, то система получается действительно надёжной </p> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"872\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/ffb/233/a4e/ffb233a4e59f441a648f07e5d0728f30.png\" data-width=\"1600\"><figcaption></figcaption></figure> <ul><li><p><strong>Но мы ведь говорим о серверной мечты, так? Поэтому на вооружение возьмём систему 2(N+1). Дополнительно подключимся к еще одной электросети, и продублируем ИБП. Вот теперь можно спать спокойно. Этому серверу больше не нужен герой.</strong></p></li></ul> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"1042\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/2a0/f39/4c8/2a0f394c8d581013cc9e8d4fce8a9394.png\" data-width=\"1600\"><figcaption></figcaption></figure> <ul><li><p><strong>СКУД и видеонаблюдение. Руки прочь от моей прелести.</strong></p></li></ul> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"720\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/f43/c78/aee/f43c78aee50b3bd88085f8434e472ce8.png\" data-width=\"1280\"><figcaption></figcaption></figure> <p>Было бы чертовски обидно учесть столько нюансов и прогореть на человеческом факторе. Кто-то захочет полюбоваться нашей идеальной серверной, зайдёт внутрь, ну а дальше вы и сами знаете. Поэтому нам необходима продвинутая СКУД со следующими параметрами:</p> <ul><li><p>Доступ в серверную только у избранных;</p></li><li><p>Ограниченное время прохода, чтобы не допустить проход нескольких людей по одному пропуску;</p></li><li><p>Журнал событий: кто открыл, когда, что делал внутри;</p></li><li><p>Контроль состояния двери с оповещением о взломе или незакрытии;</p></li><li><p>Проверка температуры у сотрудников перед проходом. Нечего чихать на дорогое оборудование;</p></li><li><p>Для разблокировки поставим ультразвуковые биометрические сканеры отпечатков пальцев или сканирование сетчатки глаза. Или всё вместе.</p></li><li><p>Запрет на повторный вход, если не был выполнен выход;</p></li><li><p>Контроллер управления замком будет находиться в отдельном узле, а не интегрирован в считыватель. Сам узел разместим внутри серверной. Попробуйте теперь поковыряться в наших проводах снаружи.</p></li></ul> <p>Плюс наша система должна поддерживать дополнительные конфиги, например:</p> <ul><li><p>Ночью доступ только у главного сисадмина;</p></li><li><p>Доступ возможен только при считывании данных нескольких сотрудников: сисадмина и его котика;</p></li></ul> <figure class=\"full-width \"><img src=\"/img/image-loader.svg\" height=\"333\" data-src=\"https://habrastorage.org/getpro/habr/upload_files/9d1/301/b29/9d1301b294ba584f781d0701afe57bb5.png\" data-width=\"576\"><figcaption></figcaption></figure> <ul><li><p>Разблокировка альтернативным способом (например, другим пальцем или другим глазом), что будет сигналом опасности и разблокировки под принуждением. Оповещение полиции в комплекте.</p></li></ul> <h3>Мечты сбываются?</h3> <p>Если говорить об отказоустойчивости, удобстве пользования, защищённости и т.д., то наша гипотетическая серверная идеально подойдет для большинства компаний. Остаётся только подобрать конфигурацию серверов под конкретные задачи, установить их, настроить и наслаждаться. </p> <p>Да, многое из вышеописанного не потребуется малому и даже среднему бизнесу, так как требует больших финансовых вложений и дорогого обслуживания, а также может не соответствовать специфическим требованиям. Но если убрать из уравнения стоимость, то такую серверную захотели бы многие. На самом деле в конечном итоге ты приходишь к ЦОДу, так как все лучшие решения уже давно придуманы инженерами и системными архитекторами. Но при проектировании серверной администратор не так сильно ограничен стандартизацией, регламентами и прочими жесткими требованиями.</p> <p>Если же спуститься на землю, то чаще всего развернуться на полную банально не даёт бюджет. Где-то можно сэкономить, где-то сделать альтернативу своими руками. Да, зачастую получается не то, что хотелось. У каждого сисадмина есть привычки, знания и параметры, по которым он настраивает работу серверной. Многие имеют за плечами техническое инженерное образование и эволюционировали из эникейщика в системного администратора, а потому прошли огонь, воду и медные проволоки.</p> <p>Каждый смотрит с высоты своей стойки, поэтому было бы интересно узнать, какие идеи для “серверной мечты” есть у вас с учётом безграничного бюджета и вечнозелёного светофора на все идеи.</p>",
        "is_active": true,
        "author": 1,
        "tag": "серверная",
        "add_datetime": "2021-11-24T05:11:09Z",
        "article_status_new": 4
    }
},
