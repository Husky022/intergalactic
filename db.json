[
    {
        "model": "mainapp.hub",
        "pk": 1,
        "fields": {
            "name": "IT",
            "order": 0,
            "is_active": true
        }
    },
    {
        "model": "mainapp.hub",
        "pk": 2,
        "fields": {
            "name": "Программирование",
            "order": 0,
            "is_active": true
        }
    },
    {
        "model": "mainapp.hub",
        "pk": 3,
        "fields": {
            "name": "Веб-дизайн",
            "order": 0,
            "is_active": true
        }
    },
    {
        "model": "mainapp.hub",
        "pk": 4,
        "fields": {
            "name": "Научно-популярное",
            "order": 0,
            "is_active": true
        }
    },
    {
        "model": "mainapp.hub",
        "pk": 5,
        "fields": {
            "name": "Сетевые технологии",
            "order": 0,
            "is_active": true
        }
    },
    {
        "model": "mainapp.hub",
        "pk": 6,
        "fields": {
            "name": "Big Data",
            "order": 0,
            "is_active": true
        }
    },
    {
        "model": "mainapp.article",
        "pk": 1,
        "fields": {
            "name": "Кодим как в старину, или IDE для обучения базовому программирова",
            "image": "1634255811.267026.jpg",
            "text": "Когда-то, когда трава была зеленее, экраны меньше, а энтузиазм больше - многие начинали программировать с Turbo Pascal, или даже с Basic. Сейчас, в эпоху фреймворков и библиотек, уже обычный hello world не напишешь, без кучи бойлерплейта. Или напишешь...?\r\n\r\nПредыстория\r\n8 лет назад, на первом курсе, я услышал интересную фразу от преподавателя. Звучала она примерно так: \"Хороший программист знает десятки языков сразу\". Тогда я подумал что это какое-то жуткое преувеличение, для красивого словца. Тут вот 90% группы над бедным паскалем тужится, а вы говорите о десятках языков! Само собой, спустя годы я всё понял. Действительно, если мы говорим о мейнстримных языках, то все они базируются на одной и той же концепции - переменные, ветвления, циклы, функции. Да, разный синтаксис, куча того или иного сахара, всякие там генераторы, дженерики, и т.д., но суть остаётся неизменной - бОльшая часть кода это переменные, ветвления, циклы, и вызов функций. И именно благодаря этому, нормальный разработчик может за вечер вникнуть в синтаксис нового ЯП, и что-то на нём наваять. Да, оно будет кривое, не по \"фен-шую\", но оно будет работать. Это база. А как же её учить?\r\n\r\nБольшой холивар\r\nЛюди делятся на два типа - те кто с теплотой вспоминает Turbo Pascal / Basic, и те кто их ненавидит. Если вы из второго типа - можете закрывать страницу, вам тут будет неинтересно.\r\n\r\nТе кто вспоминает c теплом эти почти что игрушечные по современным меркам языки, любят их не за мощность, удобство, или большую гибкость. Их любят за то, что они были максимально простыми проводниками в мир кода. 14 лет назад, чтобы начать кодить на Basic мне понадобился всего один .exe файл, и тоненькая книжка. Всё! А для вывода первого \"Привет, мир!\" - было достаточно одной команды! Причём она была безумно понятная - PRINT. Уже спустя неделю я клепал какие-то ерундовые программки вроде викторин, \"чат-ботов\" (смешно, да), и прочей нелепицы. И это было чертовски интересно! При этом \"интерактивность\" обеспечивалась крайне просто, считывать команды от пользователя можно было буквально одной функцией.\r\n\r\nВозможно непроизвольное сведение олдскул\r\nВозможно непроизвольное сведение олдскул\r\nТак и что тебе сейчас то не нравится?\r\nВсё нравится, но стало сложнее. Сложнее для новичков. Я объясню что я имею ввиду - как и к любому программисту (ну, наверное) время от времени ко мне обращались друзья/знакомые, мол расскажи чё оно такое, это ваше программирование, может и я хочу. И по факту, чтобы познакомить человека с миром программирования, ему нужно показать именно те 4 базовые концепции - переменную, условие, цикл, функцию. Ну и как-то демонстрировать их работу, само собой. И вот с этим и наступают трудности.\r\n\r\nВо многих онлайн-курсах для новичков, рано или поздно встречается фраза \"просто скопируйте этот код, пока вам не нужно знать что он делает\". И не знаю как остальных, а меня в своё время это очень бесило. Я хотел знать, почему для Hello world мне надо написать более 6 строчек на Java! Что это за class Main, а почему функция принимает массив строк, а что такое вообще массив?\r\n\r\nКак говорится - я ничего не понял.\r\nКак говорится - я ничего не понял.\r\nРаньше, чтобы продемонстрировать человеку работу программы, ты говорил \"Смотри, вот команда Print, она печатает на экране то что тебе нужно. А вот и сам экран\". А сейчас? \"Так, тут нужно написать system.out.println, это чтобы оно выводило. Потом поймёшь. А, да, и вначале нужно написать <?php, чтобы компилятор понял что это начало программы. Ах да, ещё объяви класс с функцией main. А блин, ещё нужно подключить пакет для вывода строк.\". Да, есть языки где бойлерплейта поменьше, но если это не ваш профильный язык - их нужно скачать, запустить среду, и т.д. Гораздо больше телодвижений чем было раньше.\r\n\r\nНу допустим. И что ты предлагаешь?\r\nJavascript!\r\n\r\n\r\nНет, ну правда. Давайте объективно смотреть на достоинства:\r\n\r\nуже есть в каждой микроволновке каждом ПК. Браузер всегда под рукой\r\n\r\nси-подобный синтаксис. ИМХО, это большой плюс. Тот же пайтон с его пробелами, имхо, не так прост для начинающих, которые любят лупить всё чуть ли не в одну строчку.\r\n\r\nДико мейнстримный язык, что значит что учить человек будет не аналог айти-латыни\r\n\r\nХорошо вроде? Для запуска уже всё есть на практически любом пк, язык популярный, синтаксис хорош. Что же по минусам:\r\n\r\nнестрогая динамическая типизация. Для начала, конечно, лучше бы было с ней. Ну что ж\r\n\r\nвсё ещё нет простого способа что-то выводить и принимать от пользователя\r\n\r\nСейчас кто-то скажет: да ну кудааа его для начала, там же а-си-нхро-нность! Ужас! А ещё 0.1+0.2, и всё такое. А я скажу, что для правильного начала (то есть для \"поиграться\" и для работы с алгоритмами) это всё не помеха. И вообще, мы говорим о совсем зелёных новичках!\r\n\r\nИтого, я решил попробовать побороть два недостатка, чтобы получить хорошую платформу для простого кодинга.\r\n\r\nЧто по типизации?\r\nДа ничего. Первая мысль, само собой, была TypeScript! Слышал что есть такое, да и название недвусмысленно намекает. По факту же оказалось что типы проверяются не в рантайме, а компилируется он в обычный js. Идея с типизацией остаётся открытой.\r\n\r\nНу ладно, а с вводом-выводом хоть что?\r\nКазалось бы, оно уже готово. В браузерном js из коробки есть prompt(), alert(), и даже console.log()! Разумеется, для приятного, быстрого, и простого кодинга ничего из этого не годится. Консоль devtools предназначена совсем не для этого, а prompt это просто легаси ужас.\r\n\r\nПоэтому, если вкратце - я создал подобие командной строки прям в браузере, и ввод-вывод там же, синхронно. Таким образом, из коробки \"появились\" ещё 4 функции - write, writeln, readln, и wait. Думаю, о их назначении можно не рассказывать (хотя там всё-равно есть help). В итоге можно писать на js, с максимально простым синхронным вводом-выводом. Прекрасно подходит для обучения, работы с алгоритмами, и т. д. Короче для всего того, чем раньше занимались на бейсике и паскале. Если будет спрос - можно даже черепашью графику прикрутить, как в старом добром CRT.\r\n\r\nУговорил, показывай\r\nШаг первый - пишем код в стиле юношеских поделок на паскале. Никаких коллбеков, работы с DOM-деревом, и прочих сложностей\r\n\r\n\r\nШаг второй - запускаем, смотрим как нас ждёт ввод\r\n\r\n\r\nШаг третий - вводим всё что нас просят, \"программа\" завершена!\r\n\r\n\r\nПроект не требует бекенда, работает чисто на клиенте, поэтому я загрузил его на гитхаб, можно заходить и пробовать.\r\n\r\nИтоги\r\nОтветы на ожидаемые вопросы:\r\n\r\nПочему этот проект существует? Во-первых, желание воссоздать опыт из детства. Во-вторых - просто потому что я могу, а поиграться с AST-деревом так вообще было очень увлекательно.\r\n\r\nДля чего проект подходит? Для обучения, экспериментов, развлечения. Для чего не подходит? Для реальной разработки.\r\n\r\nА почему javascript, а не %languagename%. Потому что javascript запускается в браузере нативно, и в нём легко реализовать подключение к псевдо-консоли. С любыми другими языками было бы сложнее, если мы говорим о рамках frontend-only проекта.\r\n\r\nА как оно так синхронно работает, ожидая ввода? Лёгкая модификация AST кода перед запуском, а дальше обычные async-await.\r\n\r\nА почему проект называется пингвин? Да просто потому что пингвины прикольные, а назвать как-то было нужно 😅\r\n\r\nА почему? А потому.",
            "tag": "Ide",
            "hub": 1,
            "author": 1,
            "add_datetime": "2021-10-10T19:36:26Z",
            "is_active": true
        }
    },
    {
        "model": "mainapp.article",
        "pk": 2,
        "fields": {
            "name": "Как создать блок с градиентной обводкой?",
            "image": "1634254752.188114.png",
            "text": "Представим ситуацию: перед вами встало сверх задание — нужно сделать на сайте блок с градиентной обводкой. Нужно сразу понимать, что для этого не существует простого и очевидного CSS API. Это значит, что для получения необходимого визуального эффекта нам нужно писать определенные “костыли”. Предлагаю рассмотреть 2 подхода к решению этой задачи. \r\n\r\nАвтор статьи Gradient Borders in CSS Крис Койер предлагает пойти простым путем. Можно сделать “элемент-обертку” с линейно-градиентным фоном, а затем внутренним элементом заблокировать большую часть фона, кроме тонкой линии вокруг нее. Выглядеть это будет следующим образом:\r\n\r\n\r\nДавайте пошагово разберем, что сделано в данном примере. У нас есть 2 блока — “обертка” и текст. “Обертке” задан градиент и без наложения второго блока она выглядит так:\r\n\r\n\r\nТекстовый блок находиться внутри этой “обертки” и его фон такой же как и фон окружения. Какие проблемы из-за этого могут появиться?\r\n\r\nВот что будет, если внутреннему блоку не задать фон:\r\n\r\n\r\nА на следующем примере мы увидим, что будет, если внешний фон не совместим с внутренним:\r\n\r\n\r\nИз этого может следовать вывод, что таким образом сделать прозрачную кнопку с градиентной обводкой попросту не получится. \r\n\r\nУсложним себе задачу и попробуем сделать скругленные углы обводки. На примере от Криса Коера с этим нет проблем. \r\n\r\n\r\nНо рассмотрим этот же пример в более реалистичной среде. На одном из проектов, над которыми работает наша студия, нам нужно было создать кнопки-теги с обводкой всего в 1 px (на приведенном выше примере бордер толщиной в целых 5 px).\r\n\r\n\r\nЭтот пример достаточно показательный, ведь чаще всего обводка должна быть именно в 1 px. Тут врывается проблема с рендерингом браузера. Если настоящую обводку браузер почти всегда интерпретирует правильно (она всегда выглядит как 1 px вокруг блока), то данный подход такого не гарантирует. Если присмотреться — то обводка блоков в разных местах имеет разную ширину, и может меняться в зависимости от разрешения экрана. Когда элемент относительно маленький, то этого никто может и не заметить, но с большой красивой кнопкой с визуально разной шириной бордера сверху и снизу смириться будет сложно.\r\n\r\nЕще одним минусом становится анимация градиента. Для обводки шириной в 1 px анимация будет выглядеть мгновенной. На полноценную анимацию может уйти уйма времени и нервных клеток программиста. \r\n\r\nРассмотрим второй подход к созданию градиентной обводки. В статье Как сделать border градиентом автор предлагает использовать достаточно хитрое свойство border-image-slice в сочетании с border-image:\r\n\r\n\r\nЭта техника позволяет делать настоящую обводку не только градиентом, но и изображением, которое будет корректно отображаться. При этом сам блок можно сделать даже прозрачным. Но проблема возникает, когда мы хотим применить радиус обводки.\r\n\r\nЧто же не так с этим моментом? Радиус попросту не применяется. То есть когда мы прописываем свойство CSS, то оно никак не влияет на отображение блока. \r\n\r\n\r\nДальше в статье приводится пример с закругленными углами. Здесь применяется такой же метод, как и в предыдущем примере — “блок-обертка” и блок с контентом, который его перекрывает. \r\n\r\nДавайте подведем итоги этого разбора:\r\n\r\nCSS на данный момент не предоставляет возможности сделать блок с градиентной обводкой, добавить ей закругленные углы и одновременно сделать блок прозрачным.\r\n\r\nЕсли сделать блоки с градиентом обводкой в 1–2 px, то нужно быть готовым, что ширина этой обводки будет неравномерной.\r\n\r\nОграничения касаются только блоков с градиентной обводкой и радиусом бордера.\r\n\r\nВместо заключения\r\nСтоит упомянуть, что достаточно проблематично анимировать бордеры с градиентом. Такие моменты нужно обсуждать заранее и при возможности отбросить их необходимость. Вместо этого можно сделать внешнюю анимацию — добавление тени, смещение блока и т.д. Также если кто-то предложит вам вставить кнопку картинкой, смело отметайте этот ужасный вариант. Для каждой кнопки нужна будет отдельная картинка, текст в ней изменить нельзя и их вес на порядок больше, чем у реализации кодом. Это все скажется на скорости работы страницы, работы с ее админкой и на будущей поддержке сайта.",
            "tag": "CSS",
            "hub": 3,
            "author": 1,
            "add_datetime": "2021-10-10T19:37:51.106Z",
            "is_active": true
        }
    },
    {
        "model": "mainapp.article",
        "pk": 3,
        "fields": {
            "name": "Microsoft заявила, что закроет LinkedIn в Китае",
            "image": "1634252281.764601.jpg",
            "text": "Американская корпорация Microsoft сообщила о закрытии локальной версии социальной сети в КНР. LinkedIn была последней управляемой США крупной соцсетью  в стране.\r\n\r\n\r\nЗапуск LinkedIn в Китае состоялся в 2014 году с рядом ограниченных функций. Такое решение было принято из-за строгих законов, регулирующих интернет в стране.\r\n\r\nКорпорация говорит, что ей приходится закрыть социальную сеть в Китае по причине ужесточения внутреннего законодательства. Microsoft пообещала запустить другой сервис для поиска и установления деловых контактов, которым смогут воспользоваться китайские пользователи.\r\n\r\nВ марте китайский регулятор обязал администрацию LinkedIn активнее модерировать контент и дали компании на это 30 суток. \r\n\r\nНовая платформа Microsoft — InJobs — будет лишена ленты новостей и возможности публиковать статьи и отправлять сообщения.\r\n\r\nДля корпорации Китай является третьим по величине рынком. Генеральный директор Microsoft говорит, что LinkedIn приносит около $ 10 млрд ежегодно. Компания приобрела социальную сеть в 2016 году. \r\n\r\nИз-за нарушения закона о связи LinkedIn заблокировало министерство информации и общественного развития Казахстана в июле. Ведомство обвинило социальную сеть в распространении рекламы онлайн-казино и бездействии в отношении фейковых аккаунтов. Накануне регулятор направил администрации платформы требование устранить выявленные нарушения, однако не получил ответа.\r\n\r\nВ 2016 году Роскомнадзор обязал операторов связи заблокировать доступ к LinkedIn, поскольку ресурс внесен в реестр нарушителей закона о личных данных. До блокировки социальный сети она имела аудиторию в 2,6 млн пользователей из России. После закрытия доступа к сайту это число сократилось до 1,5 млн.",
            "tag": "Python",
            "hub": 1,
            "author": 1,
            "add_datetime": "2021-10-11T19:37:51.106Z",
            "is_active": true
        }
    },
    {
        "model": "mainapp.article",
        "pk": 4,
        "fields": {
            "name": "RustCon Contest 2021 — соревнование для тех, кто пишет на Rust",
            "text": "В прошлой статье мы писали, что давно пора снова собрать русскоязычное сообщество rust-разработчиков, и поэтому в декабре проведем RustCon Russia. Так вот, при подготовке конференции мы поняли, что есть два разных сегмента тех, кому интересен Rust. Первые — это те, кто уже пишут на нем. Вторые - те, кто только начал изучать или подумывает об этом. Питонисты, плюсеры, рубисты - все, кто понял, что у раста есть очень крутые преимущества, и пора бы изучить их подробнее.\r\n\r\nВ-общем, анонсируем RustCon Contest — индивидуальные соревнования по программированию на rust, где опытные разработчики могут внести вклад в открытые rust-проекты, а начинающие - попробовать rust на вкус на простых и чуть более сложных задачках. И те, и другие могут выиграть билет на RustCon, получить фирменный мерч или приличную скидку. Подробности под катом\r\n\r\nСамое главное о контесте\r\nRustCon Contest состоит из двух частей. Первая часть — решение задач на языке Rust. Вторая — Open-source contribution contest. Участвовать можно как в одной части, так и в обеих. Но, вообще: первая часть специально создана для новичков, а вторая - для разработчиков на rust со стажем.\r\n\r\nДаты проведения: с 12 октября по 15 ноября 2021 года\r\n\r\nСтартовать можно в любой момент.\r\n\r\nКакие призы получат победители и призеры\r\nПобедитель любой части получит: билет на RustCon + бейдж победителя + фирменный мерч\r\n\r\nЗанявшие второе место получат билет на RustCon\r\n\r\nЗанявшие третье место получат скидку на билет 30% + фирменный мерч RustCon\r\n\r\nДа, еще: всем участникам мы даем скидку 10% на билет. Просто потому, что пытаться, стремиться и что-то делать уже вызывает уважение.\r\n\r\nЧасть 1: решение задач на rust (для начинающих)\r\nЭта часть контеста рассчитана на тех, кто уже пишет на другом языке (Python, C++, Ruby, Java и пр.) и хочет попробовать писать на Rust. Контест с задачами размещен на CodeForces. Но не спешите туда, сначала ознакомьтесь с правилами.\r\n\r\nПравила\r\nЗа 3 часа вам нужно будет решить как можно больше задач из 8 предложенных. Все решения должны быть написаны на языке Rust. Задачи от самых простых до таких, где понадобятся знания алгоритмов.\r\n\r\nЧасть задач намеренно сделаны достаточно простыми, чтобы их могли решить те участники, которые только-только начали учить Rust.\r\n\r\nКак считается рейтинг участников, подробно описано здесь\r\n\r\nЧасть 2: open-source contribution contest (для опытных)\r\nЗадача участников: внести наибольший вклад в открытые rust-проекты.\r\n\r\nПод вкладом подразумевается добавление/изменение кода на языке Rust путем публикации Pull Request с указанием участия в конкурсе и ссылки на RustCon Russia\r\n\r\nВнимание! Для участия необходимо сделать 2 действия:\r\n\r\nЗаполнить данные о себе в гугло-форме, чтобы мы могли вас идентифицировать ( для рейтинга участников и при награждении)\r\n\r\nОставить в pull request ссылку вида : This PR is nominated at RU RustCon Contest\r\n\r\nПлощадка: github\r\n\r\nПодходящие проекты: не меньше 100 звезд и нет аффиляции участника с владельцем репозитория\r\n\r\nДопустимые лицензии проектов: MIT/Apache/BSD/GPL/MPL/CC и аналоги.\r\n\r\nТо, как складывается оценка участника, мы описали здесь. Там же указана ссылка на код для расчета очков.\r\n\r\nПодведение итогов и награждение\r\nLeaderboard будет обновляться каждую неделю по вторникам.\r\n\r\nИтоги первой части будут опубликованы на странице контеста 15 ноября в 22:00 по мск времени.\r\n\r\nИтоги второй части будут опубликованы 20 ноября там же.\r\n\r\nНаграждение победителей пройдет прямо на открытии RustCon Russia 3 декабря в Москве. (Сами билеты и скидка на билет, естественно, будут предоставлены раньше).\r\n\r\nОбращение к rust-разработчикам\r\nДавайте поможем популяризации языка — расскажем о RustCon Contest там, где это уместно: в своих чатах, каналах Телеграм, в блогах и на форумах. Пусть о контесте узнают как можно больше людей.\r\n\r\nЕсли у вас есть свой канал/чат/блог/сайт, и вы хотите написать о RustCon Contest - напишите автору идеи @ekaterina_shlyakhova в Телеграм\r\n\r\nМы, с удовольствием, поставим ваш лого и название на страницу контеста и страницу лидерборда, а также напишем о вашей поддержке в чате, Твиттере и Facebook\r\n\r\nЕсли знаете кого-то, кто отвечает за сайты, группы или ресурсы для разработчиков (не только rust), поделитесь, пожалуйста контактом.\r\n\r\nЕсли вдруг сюда заглянул работодатель, обратите внимание, что поддержка такого проекта - благое дело, и у ваша карма HR-бренда явно прибудет. Хотите поддержать соревнование или конференцию, напишите опять же @ekaterina_shlyakhova\r\n\r\nВ-общем, участвуйте, поддерживайте, выигрывайте билеты! Прокачивайте скиллы и вливайтесь в rust-сообщество :)",
            "tag": "Rust",
            "hub": 2,
            "author": 1,
            "add_datetime": "2021-10-11T19:37:51.106Z",
            "is_active": true
        }
    },
    {
        "model": "mainapp.article",
        "pk": 10,
        "fields": {
            "name": "«Билайн» сменил логотип и слоган",
            "image": "1634254778.971896.jpeg",
            "text": "14 октября 2021 года компания «Вымпелком» провела ребрендинг «Билайна». Мобильный оператор получил новый логотип и брендбук. Теперь он называется «билайн» с маленькой буквы, а его слоган говорит пользователю, что компания находится с ним на одной стороне. Без уточнения, на какой стороне она была раньше к своим клиентам.\r\n\r\nОператор связи пояснил, что эти обновления призваны проиллюстрировать начало масштабных изменений в компании и сделать «акцент на человечности, простоте и диджитальности», а каждый клиент для нее — самая главная ценность.　\r\n\r\nНовый слоган пришел на смену «живи на яркой стороне», а вот логотип остался узнаваемым, только стал сферой с желто-черными полосами. Разработкой обновленного бренда «билайн» занималось агентство Contrapunto.\r\n\r\nПомимо обновления бренда мобильный оператор запустил новый тариф конструктор. Он уже доступен пользователям в мобильном приложении. С его помощью новые и текущие клиенты компании могут выбирать количество минут и трафика, чтобы платить только за них.\r\n\r\nЭксперт пояснили, что необходимость обновления бренда «Билайн» давно планировалась. Оператор в прошлом году поменял свою команду, отвечающую за маркетинг и общение с клиентами, переформатировал структуру управления и отказался от токсичного контента по навязыванию услуг. Часть этих шагов помогло остановить «Билайну» многолетнее падение абонентской базы. Теперь компания хочет освежить свое представление для клиентов и возвратить часть ушедших из них.\r\n\r\n«РБК» отметило, что по итогам 2020 года «Билайн» сохранял третье место среди конкурентов по числу абонентов в России с 49,9 млн клиентов.\r\n\r\nПоследний раз «Билайн» менял свой логотип в 2005 году. Круг с желтыми и черными полосами оператору создали дизайнеры лондонского агентства Wolff Olins.",
            "tag": "Beeline",
            "hub": 3,
            "author": 1,
            "add_datetime": "2021-10-10T19:37:51.106Z",
            "is_active": true
        }
    },
    {
        "model": "mainapp.article",
        "pk": 11,
        "fields": {
            "name": "Framework Laptop: почти полностью модульный ноутбук с собственно",
            "image": "",
            "text": "В самом начале этого года появилась информация о скором поступлении в продажу модульного ноутбука с названием Framework Laptop. Разработчики обещали, что апгрейдить девайс можно будет почти целиком, добавляя или заменяя различные модули. Они же заявили о начале продаж летом 2021 года.\r\n\r\nВсе эти обещания были выполнены, а модульный девайс действительно стал доступен уже летом. Более того, создатели проекта запустили еще и маркетплейс модулей — теперь существует целая экосистема различных дополнений и апгрейдов. Обо всем этом — под катом.\r\n\r\nЧто это за ноутбук такой?\r\n\r\n\r\n\r\nКак уже говорилось выше, это модульный девайс, где можно заменить почти все системы и подсистемы, включая:\r\n\r\nПорты и разъемы.\r\nЭкран.\r\nБатарею.\r\nБеспроводный чип.\r\nМатеринскую плату.\r\nОЗУ.\r\nКлавиатуру.\r\nПетли экрана.\r\n\r\nВ более-менее старых лэптопах отдельные элементы тоже можно менять, это не так и сложно. Но вот в новых устройствах клавиатура приклеена к панели, батарея может быть тоже приклеена, не говоря уже о распайке ОЗУ и прочего.\r\n\r\nДостоинство Framework Laptop в том, что все это заменяется без лишних телодвижений и всего лишь при помощи одной отвертки, а не массы различных приспособлений, которые используют ремонтники.\r\n\r\n\r\n\r\nВот так все это выглядит изнутри\r\n\r\nКроме привычных модулей, есть и дополнительные, которые подключаются к материнской плате при помощи USB-C-коннектора.\r\n\r\n<img src=«hsto.org/getpro/habr/post_images/d43/22e/dad/d4322edad3c9682734d9875a8b17b0fa.gif align=»center\" />\r\nХарактеристики\r\n\r\nУстройство оснащается экраном 13,5 дюйма с разрешением 2256x1504 и яркостью 400 нит. ОС — Windows 10 Home или Windows 10 Pro.\r\n\r\nБатарея выдерживает рабочий день автономной работы (сколько это часов, можно догадываться — вероятно, 8).\r\n\r\nБеспроводный модуль связи — WiFI 6 и Bluetooth 5.2. У девайса отличная камера, которая обеспечивает видеопоток 1080p 60fps.\r\n\r\nКлавиатура — 1,5мм. Кнопки, в общем-то, стандартные, есть подсветка. Плюс в том, что заменить клавиатуру можно очень быстро. На кнопке включения — дактилоскопический датчик. Клавиатуру можно заказывать с алфавитом нужного пользователю языка.\r\n\r\nМодульные девайсы — весьма интересная тема, но у нас есть и другие статьи, оцените — мы рассказываем о:\r\n→ Маленьких «малинках» в крупном дата-центре\r\n→ Динамических ИБП в дата-центрах: как мы устанавливали Piller CPM300 с двойным преобразованием\r\n→ Разборке редкого зверя от Nvidia — DGX A100\r\n\r\n\r\n\r\nНу и цвет корпуса можно менять — есть серый, черный, оранжевый и еще несколько.\r\n\r\nЧто касается конфигурации, то есть три варианта — «базовая», «производительная» и «профессиональная».\r\n\r\n\r\n\r\nНу и еще важный момент — девайс можно собрать самостоятельно, заказав набор запчастей в виде конструктора. Тогда стоимость покупки составит $749. Ну а если нет времени, то можно заказать уже собранный девайс — в этом случае цена увеличится до $999. Обе цены — это стартовые позиции за базовую конфигурацию.\r\n\r\nВроде и недешево, но если учесть, что все это можно апгрейдить и ремонтировать без сервиса, то ценообразование становится более понятным и аргументированным.\r\n\r\nНу а теперь — о маркетплейсе запчастей\r\n\r\nЕго компания запустила буквально на днях, открыв доступ ко всем запчастям, которые используются в девайсе, а также к модулям. Что касается запчастей, здесь все понятно, приобрести можно все — от материнской платы до пластиковых элементов.\r\n\r\nС модулями интереснее. Приобрести можно:\r\n\r\nПорт USB-C\r\nКарт-ридер\r\nСлот с дополнительной памятью объемом 250 ГБ\r\nСлот с дополнительной памятью объемом 1 ТБ\r\nHDMI\r\nDisplay Port\r\nUSB-A\r\n\r\nСтоимость модулей варьируется от $9 до $149 (это как раз терабайтный модуль памяти).\r\n\r\n\r\n\r\nЧто касается цен на запчасти, то они не такие и большие. Так, звуковая плата стоит $14, динамики — $19, кнопка включения с дактилоскопическим датчиком — $29. Дисплей, правда, дороговат — $149. Но здесь следует учитывать его характеристики, о которых говорилось выше. Тачпад стоит $39.\r\n\r\n\r\n\r\nВ продаже есть еще SSD и RAM, но это все можно приобрести и самостоятельно в любом другом магазине. А вот с материнскими платами дело обстоит иначе — они доступны (вернее, вскоре поступят в продажу) только у производителя. Стоимость — от $449 за плату с Intel Core i5 до $1049 с i7.\r\n\r\nЧего у производителя в избытке — так это клавиатур. Приобрести можно любой вариант, включая модель с чистыми клавишами без символов.\r\n\r\nНу и последнее — отвертка с пластиковым наконечником для разборки ноутбука стоит $5. Как и говорилось выше, это единственный инструмент, который понадобится пользователю для ремонта или апгрейда. Само собой, обойтись можно и собственным инструментом.\r\n\r\nНа этом, в общем-то, и все. Предлагаем обсудить этот ноутбук в комментариях — насколько идея продумана, есть ли смысл в покупке модульного ноутбука, не завышена ли цена.",
            "tag": "Laptop",
            "hub": 1,
            "author": 1,
            "add_datetime": "2021-10-10T19:36:26Z",
            "is_active": true
        }
    },
    {
        "model": "mainapp.article",
        "pk": 12,
        "fields": {
            "name": "«Одноклассники» обновили дизайн мобильного приложения",
            "image": "1634254575.498374.png",
            "text": "Социальная сеть «Одноклассники» изменила дизайн своего мобильного приложения и добавила единую кнопку для публикаций в интерфейсе. Об этом сообщает vc.ru со ссылкой на представителей компании.\r\n\r\nГлавная страница приложения теперь показывает ленту новостей и сервис «Моменты» — ранее верхнюю часть занимала обложка профиля, теперь она будет отображаться только на личной странице. Кроме того, теперь в интерфейсе приложения есть кнопка «+» для публикации постов. Она будет единой — с её помощью можно как создать обычный пост для ленты новостей, так и снять «момент».\r\n\r\nОбновлено меню — теперь плитка с иконками функций занимает меньше пространства на экране. При необходимости меню можно раскрыть, чтобы посмотреть полный список сервисов. Под ним располагаются виджеты, а также окно для переключения между недавно посещёнными страницами, группами и пользователями, которых нет в списке друзей.\r\n\r\nvc.ru\r\nvc.ru\r\nВерсия приложения для Android позволяет открывать дополнительные сервисы в формате мини-приложений на базе платформы VK Mini Apps.\r\n\r\nК настоящему времени обновление приложения «Одноклассники» доступно только части пользователей операционной системы Android, для iOS оно появится в ближайшее время, обещают в компании.\r\n\r\nВ марте социальная сеть обновила дизайн десктопной версии. На сайте «Одноклассников» изменился шрифт в логотипа, а также появилось боковое меню с виджетами мини-приложений.",
            "tag": "Одноклассники",
            "hub": 3,
            "author": 1,
            "add_datetime": "2021-10-10T19:37:51.106Z",
            "is_active": true
        }
    },
    {
        "model": "mainapp.article",
        "pk": 13,
        "fields": {
            "name": "Как ускорить разработку в машиностроении в 4 раза. Ключевые моме",
            "image": "1634255541.713108.jpg",
            "text": "Мы живем в сильно ускоренном периоде грандиозных изменений — во время рождения, успехов и падений разных компаний, появления и исчезновения целых отраслей. По воле случая я оказался причастным к разработке сложных транспортных изделий и управлению ИТ системами на разных предприятиях в отрасли машиностроения и не только. Поэтому я хорошо знаю как устроен бизнес, в основе которого лежит разработка и конструирование, знаю типичные ошибки, а также ключевые факторы для достижения успеха в разработке и производстве новых сложных изделий, а также достижения конкурентных преимуществ в таком серьезном бизнесе как машиностроение.\r\n\r\nВ далеком 2006 году почти случайно я устроился на работу сисадмином в НТЦ на одном крупном предприятии почти в самый первоначальный момент создания нового направления по производству автобусов и троллейбусов, я наблюдал все первоначальные грабли и был причастен к определенным успехам этого направления. Подробнее и кому интересно — под катом.\r\n\r\nimage\r\n\r\nПрием на работу был довольно необычным — НТЦ был в одном городе, а завод в другом. Первое собеседование с директором НТЦ прошел успешно — наверное чисто визуально и по адекватному общению, потому как технические вопросы были в стиле “знаешь?” с ответом “знаю”. Второе было уже чисто по реальным знаниям сетей и прочего с главным ит специалистом корпорации, третье с начальником АСУП. Четвертое и самое трудное было с СБ — где был прям перекрестный допрос, целью которого было понять — “а не солью ли я информацию про разработки и прочее?” Вообще там ну очень с ИБ заморачивались и это сыграло положительную роль для предприятия. В итоге меня приняли на работу, но оформили не напрямую в НТЦ, а на главном предприятии, потому как я должен был контролировать ИБ и директора НТЦ в том числе.\r\n\r\nНа работе. Офис был идеальным — целый этаж в новом бизнес-центре, остекление на все внешние стены — все тогда было нереально круто по сравнению с типичными компаниями.\r\nДиректор — для меня это был разрыв шаблонов. Со старта кучу задач, термин — до конца дня! Ни тебе осмотреться и освоится, а сразу с места в карьер. Я сам не верил, но всё выполнил, как ни странно.\r\n\r\nКоллектив уже был сложившийся — фактически все перешли из профильного института и перед этим уже принимали участие в разработке малых автобусов в составе КБ института. И состоял из отделов — кузова, шасси, электрики и дизайна. Возглавлял коллектив главный конструктор.\r\n\r\nСамое важное и правильное решение при формировании такого НТЦ было оформить его как отдельное дочернее предприятие и назначить своего директора. Причем личность директора явно не вписывалась в конструкторский коллектив: в бывшем успешный владелец небольшого бизнеса и никаких познаний в автобусах не имел и даже не сталкивался! Для меня это было странно — потому как почти сразу увидел напряженность между коллективом и директором. По функционалу: директор — бизнес-функции и планирование, финансы, зарплата и администрирование (принятие на работу, увольнение и контроль дисциплины) и прочее.\r\n\r\nГлавный конструктор (ГК) и начальники отделов — вся техническая часть, директор не вмешивается. Отдельно нанят специалист по безопасности — подполковник полиции в отставке — из функции относящихся к НТЦ обеспечение инфо безопасности (со мной в паре), и просто чтобы люди боялись и даже не думали слить куда нибудь инфу по разработкам. По ИТ и ИБ главный я, поэтому отключены все usb, логи всех действий работников НТЦ и даже их распечаток — все записывалось и регулярно пересылалось на главное предприятие. У всех работников зарплаты выше среднего по рынку, зарплата начислялась 50% оклад и такая же по размеру премия, так что рычаги для финансового воздействия у директора были.\r\n\r\nНачало первого проекта. Когда я пришел то ПК, сервер, сеть и прочее уже были куплены и настроены. В качестве основного софта было куплено PTC Pro/Engineer также оплачено обучение и поддержка. Софт, как ни странно, выбрал директор — руководствуясь:\r\n\r\nЗападная система проектирование со сформированной методологией.\r\nОтличная локализация и поддержка ескд.\r\n\r\nИтак, всё есть и после обучения первый проект — малый автобус на основе шасси небольшого грузовичка. При проектирование почти сразу проявилась инертность коллектива и вместо использования Pro/Engineer и проектирования в 3D, а потом создание чертежей с 3D модели в том же Pro/Engineer, конструктора массово начали делать работу в программе компас 2d. И как директор ни стимулировал работать в закупленной программе все попытки были тщетны, ведь авторитетный ГК был против чтобы конструкторам указывали в чем им работать, потому как ”конструктор — человек творческий”. И все работали по накатанной ранее схеме. В результате создание первого автобуса длилось 1,5 года, на производстве технологи и рабочие были в шоке от халтурной документации — много несостыковок — кузов несколько раз разрезали и делали по новой из-за нестыковок и постоянных изменений КД. Когда автобус поехал, то в загруженном состоянии на него было страшно смотреть — крен был покруче Пизанской башни, а дизайн автобуса настолько убогий, что я никому из знакомых не говорил, что был причастен к созданию такого шедевра. Остро встал вопрос о разгоне НТЦ, но ГК обладал определенной харизмой, да и просто был в дружеских отношения с руководством завода и уболтал продолжить работать — и вот мы получили новый проект на средний автобус.\r\n\r\nДалее определяющую роль в НТЦ будет играть личность директора и моё скромное участие, поэтому отвлеченно опишу характерную историю по установке системы входа по карточкам в офис. Директор дает мне задание найти и установить такую систему, фирма предлагает контролер, замок и опционально — с установкой или без, с софтом учета времени или без.\r\n\r\nДиректор оплачивает только железо — “установим сами”. Купили, установил, подключил к компу прописал карточки и думал, что всё — работа сделана. Директор: “напиши программу учета рабочего времени”. — Вот, блин — засада! И не откажешь — скажет, что некомпетентен. Ладно на входе с контролера *.csv, на выходе агрегированный отчет на бумаге — ms Access идеальный инструмент для этого. Пару недель кодинга в SQL, макросах и прочем вот и несколько видов отчетов в любом виде за 2 минуты по первому требованию! Блин, сам не верил, но сделал. Директор нацелен на результат — не вникает в технические детали, интересует только выхлоп, категоричен в управлении, ощущается жесткий бизнес-подход к делу — это проявляется во всем, нужно уволить — уволит без раздумий. В то же время стимулирует дополнительно материально — всё справедливо.\r\n\r\nИтак, мы работаем над новым проектом, дополнительно наняли двух спецов по средним автобусам и четырех по троллейбусам, так как на базе автобуса будет троллейбус.\r\nВ самом начале проекта проявляется консервативность и тщеславность ГК, который проигнорировал предложение от нанятых специалистов создать стандартный низкопольный автобус и продавил своим авторитетом создание трехуровневого!(пару лестничек внутри) автобуса с нестандартной шириной и 4 одностворчатыми! дверями! — ведь надо что-то сделать, блин, новое! Наверху одобрили (харизма и прочее) и понеслась работа.\r\n\r\nВ это время на одном специализированном форуме выложили PDM систему для тестов. PDM это система управления данными об изделии, которая позволяет проводит совместную разработку и которая обеспечивает актуальность структурированных данных в едином архиве, также поддерживает версионность, согласование КД, управление проектами и прочие плюшки — это как бы Git, но для конструкторов и с дополнительными опциями для КБ. Для нас внедрение PDM означало бы переход на новый качественный уровень разработки, где все изделие представляет полную и состыкованную и главное актуальную (с последними изменениями) 3D модель. А 2D чертежи вторичны и напрямую связаны с 3D моделью.\r\n\r\nМоё руководство по ИТ на заводе сказали, чтобы не парился, денег не выделят, а сам я без вендора не справлюсь со столь сложной системой, но директор сказал — “давай ставь”, и неделька другая прямо на боевом слабеньком файловом сервере запустил тестовую систему.\r\n\r\nДумал протестировать еще так пару месяцев (так в мануале написано), а потом думать, что делать дальше. Директор: “ у тебя два конструктора и два дня” — Вот, блин — засада! Начали пробовать вроде криво, медленно, но пошло! Директор: “начинайте проект в PDM по троллейбусу” (те два конструктора были из троллейбусного отдела). Потом подключились еще двое новых конструктора — спецов по средним автобусам. И тут начались проблемы с большими сборками, сервер приложения тупо перегружался и писал, что мало памяти. Целый вечер методом научного тыка ковыряюсь в десятках инициализационных файлах сервера приложений и “о чудо” — наконец то запустился, правда дико сваповал, так как памяти там было всего 2ГБ.\r\n\r\nЗа пару дней докупили ещё 2Гб, но все равно нужен был новый сервер — старый не подходил по параметрам. Купили новый сервер, еле перенес рабочий сервер на новый. Потихоньку начали загонять в PDM и Pro/Engineer остальных контрукторов, но тут дикое сопротивление ГК и компании, саботаж и угрозы срывов сроков если всех заставят работать в PDM. Поэтому еще пару месяцев работали в основном по старому, но прогрессивная часть уже осваивала PDM и Pro/Engineer. В это время директор начал мне доверять и почти каждый вечер заходил ко мне в кабинет чтобы обсудить ситуацию в коллективе (я ведь был его частью и знал кто чем дышит на работе) и совместный план действий. На тот момент произошли некоторые организационные изменения так как проектов было уже три, то приняли решение назначить отдельных главных конструкторов проектов(ГКП), они отвечали за техническую часть проекта организацию и координацию конструкторских работ, а также им выделяли бюджет на проект, и фактически они распределяли оплату работ по проекту. ГК плавно сместили в отдел перспективного проектирования, но убедили что он по прежнему тут главный. И тут мне пришла в голову идея использовать метод принятия решений, который часто использует ГК- собирает на техническое совещание начальников отделов(по совместительству давние друзья), озвучивает свой вариант, голосуют и решение принято одногласно и без сомнений.\r\n\r\nЕсть три ГКП из них два уже осознавали преимущества и перспективы PDM, третий был человеком ГК, но молодой и неопытный во всяких подковерных делах. Идея такая — собираем техническое совещание три ГПК и директор для протокола и так как там будут подниматься вопрос оплаты работ, и ставиться на голосование вопрос о создании конструкторской документации(КД) в 3D модели(первичной) и 2D чертежей, если конструктор сдает только чертеж без 3D, то оплата 50%. Озвучили коллективу — то за 2 недели все быстро освоили для многих новую программу и способ проектирования, и без возмущений и прочего. И самое главное без срыва графиков производства! ГК вначале был скептичен, потом шокирован и попытался палки в колеса поставить, но директор спокойно отбил его попытки. ГК практически остался не у дел, и через пару месяцев уволился. Но остались его друзья, которые также фактически были против прогресса и представляли “старую школу”, поэтому в техническом плане часто использовали устаревшие в машиностроении конструктивные решения в стиле “трехуровневый пол для автобуса”. Почему неразумно оставлять таких людей в коллективе начальниками отделов?\r\n\r\nПроект трехуровнего автобуса с четырьмя одностворчатыми дверями и нестандартной шириной полностью провалился, его даже даром не хотели брать. Снова встал вопрос о разгоне НТЦ, но директор и новый ГК убедили руководство что все в порядке, и нужно лишь небольшие 😊 переделки и за полгода будет нормальный автобус. Руководство дало еще один шанс… На самом деле нужно было почти с нуля создать новый автобус потому как почти все нужно было переделывать все эти “проверенные временем” конструкторские решения. Поэтому директор при моем содействии за пару месяцев удалось уволить начальника отдела шасси представителя “старой школы”, и остался еще начальник отдела кузова, но тот сразу понял, что лучше не идти против прогресса и хотя не мешал коллективу продуктивно осваивать новые способы проектирования и продолжил дальше работать.\r\n\r\nИ в то время модели разрослись, все начинало тормозить мы подключили вендора на пилотный проект — он дал нам правильную методику проектирования и научил как правильно работать с PDM. Итак, полгода и новый средний автобус? Вот тут включилась магия PDM и гармония 3D модели. Количество ошибок на производстве уменьшилась на порядок, практически отпали ошибки несостыковок (благодаря 3D), и ошибок из-за неактуальной КД (благодаря PDM).\r\n\r\nПоэтому практически отпала необходимость в дополнительных стадиях разработки опытных образцов О1 и О2(как требовалось по циклу разработки). Автобус успели «переделать» в срок и дальше пошел поток новых моделей, при все более ужатых сроках. Когда я уходил в 2011 году, то руководство уже настолько привыкло к конвейеру создания КД, что в феврале взяли заказ на партию малых автобусов, которые были только эскизно скомпонованы на бумаге. Коллективу сказали двойной оклад и в конце апреля выехал первый “свежеиспеченный” автобус, и почти без срывов сроков отдали партию автобусов. Итого за 3 года после внедрения PDM и переход на 3D-моделирование в единой системе и устранения людей “старой школы” и саботажников прогресса в НТЦ — в среднем разработка ускорилась с 18 до 4-5 месяцев при значительном улучшении качества — ведь многие недочеты удавалось устранить на 3D-модели до начала производства. Но как было сказано само НТЦ находилось в другом городе, и эти улучшении были лишь в разработке. А на заводе была всё та же “старая школа” и работали как при “совке”, причем станки и оборудование покупали новое, а методы работы, раздутый административный штат из родственников и друзей + авторитарное и некомпетентное управление приводили к минусовому балансу завода, который в конце концов обанкротился (через 9 лет после моего увольнения). Забавно, что в НТЦ установленная PDM и программа Pro/Engineer очень успешно проработали еще 8 лет, причем без обновлений и даже на старых компьютерах 2008 года. Но за год до банкротства ИТ завода за откаты решили купить и перейти на связку Solidworks(CAD) + Solidworks PDM – нерабочая для машиностроения система из-за диких тормозов на больших сборках и чертежах. Последняя рабочая шестеренка — конвейер разработки, была сломана — и логичный результат — банкротство.\r\n\r\nВернемся в 2013 год, когда меня пригласили на новоиспеченное машиностроительное предприятие для установки PDM, а в случае успешного внедрения — то и оплачиваемого сопровождения. PDM в качестве тестовго поставили, но вот с программой была проблема — конструктора привыкли к Solidworks, а программа в машиностроении “не тянет” — точнее тянет только на первых этапах, а дальше дико тормозит. То коллектив разделился — те, что на начальных этапах разработки — работали в Solidworks, на последних импортировали (или обновляли импорт) в Creo. Этот разнобой ~ в 2 раза тормозил разработку из-за чего был потерян (с убытками) один дополнительный, но очень перспективный внешний проект. Но выводы никто не сделал. Также для управления производством используется солянка самописных програм + 1с Торговля!, что меня очень удивило. То админаппарат + НТЦ (контрукторы и технологи) 30-40% времени тратят на оформление и согласование бумажек и неоднократное дублирование данных в разных системах и бумажных носителях. Предприятие не обанкротилось лишь потому, что главная тема оказалась перспективной и ещё на плаву.\r\nУчитывая значительный опыт, напишу конкретные рекомендации для достижения конкурентных преимуществ в машиностроении с точки зрения ИТ:\r\n\r\nНабор коллектива для разработки — найдите перспективных и имеющих опыт в данной области людей. Также поступите после пилотной разработки при наборе технологов и людей для производства.\r\nПолное внедрение PLM и единой программы разработки. Рекомендую связку Creo-Windchill как идеально рабочую среду. Внедрение новых методик таких как 3D чертежи и прочее. На этом этапе часто пытаются экономить и в итоге разработка может идти медленнее в разы, что приводит к несоразмерным с затратами убыткам. Не экономьте, но проконсультируйтесь со специалистами, можно даже со мной — чтобы и ненужного не закупить — ведь часто нам предлагают купить больше, чем нужно.\r\nПри начале работы отдельные личности проявят себя, всех кто мешает увольняйте — не имеет значение регалии и дружеские отношения, любая мелочь может перевесить весы в сторону провала. Ваша нацеленность на результат — сформирует рабочую атмосферу (при условии адекватной финансовой мотивации) и выявит негативных индивидов. Прислушивайтесь к ИТ специалистам (если наймете толковых) — у них вся работа и отношение к работе на виду. Уравновесьте главного конструктора и бизнес менеджера, потому как нужно соблюдать баланс между креативностью и эффективной бизнес — моделью производства. Важно понимание не бизнес для конструкции, а конструкция для бизнеса. Часто у креативных людей перекос наоборот.\r\nОсновные комплектующие самих изделий в последние годы очень видоизменились и появились много на более новых технологиях и значительнее перспективных. Подход использовать “старое и проверенное” — почти неактуален. Почти всё можно протестировать в симуляционных моделях.\r\nERP предприятия — нужно организовать все данные в одной системе. Рекомендую — 1c ERP. Обязательно подключите документооборот (1с) и свяжите с PLM. Так вы организуете все процессы согласно досконально проработанным методикам.\r\nОрганизуйте безопасность и видеонаблюдение на предприятии, небольшой контроль защитит от убытков хищений и злоупотреблений. Также информационная безопасность и контроль очень поможет и защитит от хищений интеллектуальной собственности и бесцельных трат времени.\r\nСмотрите минимум на 5 лет вперед для выбора изделий производства\r\nНе брезгуйте небольшими, но стабильно прибыльными дополнительными направлениями, в трудные времена они помогут вытянуть и крупные темы. К тому же актуально правило класть яйца в разные корзины — поэтому если есть перспективная параллельная тема, то разумно к ней подключится.\r\nМаксимальная, но разумная локализация. Понятно, что вначале будет всё покупное, но надо стремится производить всё локально. Причем в каждой сфере в последнее время выстрелили много новых технологий и улучшений, применив которые в комплексе для вашего изделия вы уйдете в значительный отрыв от традиционных машиностроительных предприятий — экономически и технологично.",
            "tag": "",
            "hub": 1,
            "author": 1,
            "add_datetime": "2021-10-10T19:36:26Z",
            "is_active": true
        }
    },
    {
        "model": "mainapp.article",
        "pk": 14,
        "fields": {
            "name": "Практика использования Relay+PetitPotam",
            "image": "1634255344.151149.png",
            "text": "Статья расскажет о вариации нового метода атаки на инфраструктуру. Рассмотрим основные инструменты, подготовим тестовый стенд и проведем тест. Небольшой Disclamer: статья не претендует на полноту, но является примером того, как можно собрать полезную информацию и проверить работоспособность инструментов перед их использованием.\r\n\r\nЧто это и как используется\r\nКлассический пример атак типа MiTM. То есть это атаки, которые сегодня возможны, по большей части только в локальных сетях. Данный вариант атак заключается в том, что атакующий может перехватить полностью или частично данные между двумя хостами в сети и переотправить их одному из участников соединения, как правило серверу. Переотправка может включать дополнительные изменения данных, но как правило, это воздействие может быть невозможно, в силу используемых механизмов защит, либо из-за особенностей работы системы, на которую производится атака.\r\n\r\nЧто такое PetitPotam? Самое сложное для проведения атаки типа Relay — это перехват данных, которые используются для настройки соединения. Зачастую, чтобы этот момент был 100% обнаружен в момент исследования сети можно:\r\n\r\nИспользовать атаки типа ARP Poison и пользователь рано или поздно обратиться к атакующему серверу\r\n\r\nИспользовать механизмы, которые принудительно заставят операционную систему начать процедуру настройки соединения.\r\n\r\nКо второму типу уловок как раз и относится PetitPotam. В случае конкретно этого подхода используется MS-EFSRPC протокол, который используется для вызова функции EfsRpcOpenFileRaw. Вызов этой функции запустит процесс аутентификации. Наибольшую популярность метод получил в совокупности с атакой ADCSPwn.\r\n\r\nAD CS атака\r\nНедавнее исследование команды SpecterOps показало, что стандартные роли сервера для сертификатов Windows AD. Не настолько безопасны, как может показаться на первый взгляд. Согласно данным исследования, если атакующий найдет способ, как заставить контроллер домена обратиться к хосту, который поддерживает NTLM аутентификацию, то атакующий сможет заполучить сертификат для учетной записи контроллера домена. Это фактически означает, что атакующий может представляться для любых сервисов инфраструктуры контроллером домена со всеми вытекающими последствиями.\r\n\r\nНа данный момент концепцию атаки используют в совокупности с методом PetitPotam. Попробуем проверить насколько это возможно.\r\n\r\nНастройка стенда для тестирования\r\nСтенд будет состоять из 3 машин:\r\n\r\nWindows Server 2019 <- котроллер домена\r\n\r\nWindows Server 2019 <- сервер c ролью сертификационного центра\r\n\r\nWindows 10 <- клиентская машина\r\n\r\nKali linux <- машина атакующего\r\n\r\nЧтобы настроить сервер для лабораторной, можно использовать любую систему виртуализации. Затем необходимо настроить обычный домен, делается это просто через интерфейс управления сервером. Единственная особенность, которую нужно учесть при установке — добавить роль сертификационного центра. Располагается эта опция в английской локали установщика, в функции \"WebDav Redirector\". После того как установили сервера, можно начинать тестирование атаки. Для проведения теста нам понадобится следующий набор инструментов:\r\n\r\nimpacket\r\n\r\nPetitPotam.py\r\n\r\nRubeusToCChache\r\n\r\nВообще к этому набору можно добавить инструменты из списка ниже:\r\n\r\nmimikatz\r\n\r\nRubeus\r\n\r\nОднако, чтобы использовать эти инструменты, нужно проводить тестирование именно с Windows машины. Попробуем обойтись без них.\r\n\r\nТестирование\r\nСеть находится в следующем диапазоне: 192.168.47.1/24 найдем все активные машины в сети и обнаружим сертификационный сервер и контроллер домена:\r\n\r\nnmap -n -sn 192.168.47.1/24\r\n\r\ncurl -v http://192.168.47.144/certsrv/\r\n\r\nЕсли сервер вернет код 301, значит один из серверов является сертификационным центром. Данный метод лишь небольшая уловка, которую можно применять на ряду с остальными методами исследования сети. Можно так же полагаться на набор сервисов, которые покажет nmap, а можно прибегнуть к поиску данных через DCOM или SMB.\r\n\r\nМожно переходить к атаке. Запустим ntlmrelayx.py\r\n\r\npython3 ntlmrelayx.py -t http://192.168.47.144/certsrv/certfnsh.asp -smb2support --adcs --template DomainController\r\n\r\nЗаставим контроллер домена инициировать процедуру аутентификации и получим сертификат:\r\n\r\npython3 PetitPotam.py 192.168.1.111 192.168.47.144\r\n\r\nКак видно из вывода инструмента, мы смогли заставить контроллер домена обратиться к сертификационному центру. Теперь дело за малым, нужно перехватить данные. ntlmrelayx сделал всю необходимую работу:\r\n\r\n\r\nПолученный сертификат идеально подходит сейчас под использование с инструментом Rubeus, но мы будем использовать дальше Kali Linux. Для того чтобы это было возможно, мы создадим файл \".ccache\" именно этот файл может быть использован для работы с Kerberos.\r\n\r\nПопробуем подключиться к контроллеру домена и выполнить команды:\r\n\r\nexport KRB5CCNAME=\r\npython3 psexec.py /@ -k -no-pass\r\nТаким образом, мы успешно провели атаку на уязвимом стенде. Данный набор инструментов может быть использован для дальнейшего выполнения команд в инфраструктуре Windows AD. Для защиты от подобной атаки можно использовать рекомендации от вендора. И также можно поискать еще дополнительные распространенные ошибки конфигурации сертификационных серверов с помощью вот этого инструмента.",
            "tag": "Python Relay",
            "hub": 2,
            "author": 1,
            "add_datetime": "2021-10-11T19:37:51.106Z",
            "is_active": true
        }
    },
    {
        "model": "mainapp.article",
        "pk": 15,
        "fields": {
            "name": "Как мы автоматизируем iOS: настройка Gitlab CI + Fastlane",
            "image": "",
            "text": "В основном идея использования CI/CD для iOS, да и для других платформ, — это автоматизация рутинной работы. Когда мы работаем над одним приложением, можем вручную собирать небольшой проект. Но команда растёт, хочется тратить время эффективнее, чем вручную собирать проект или объяснять новичкам, что же там с Code-signing нужно делать.\r\n\r\nПожалуй, самое рутинное и самое важное занятие, которое берёт на себя CI, — это прогон тестов. Нет зелёных тестов? В master не попадёшь. А с ростом команды вероятность того, что кто-то вольёт в master нерабочий код, будет только увеличиваться. Нужна автоматизация.\r\n\r\nВ этой статье я хочу подробно рассказать о пути настройки Gitlab CI + Fastlane + Firebase + Testflight. Примеры приводятся на основе одного проекта, в котором участвовали 10 разработчиков. В конце будут описаны проблемы, с которыми мы сталкивались, и их решения.\r\n\r\nДля кого будет полезен этот опыт? Для всех, кому нужен CI/CD и кто сидит на Gitlab. Для Github будет другая связка, например с Travis, — остальные компоненты неизменны. В нашей команде все используют Gitlab CI, Fastlane вместо голого xcodebuild для быстроты и удобства разработки, Firebase и Testflight.\r\n\r\nЕсли у нас бесплатный Gitlab и мы укладываемся в лимит Firebase, то получаем бесплатное решение по настройке CI/CD.\r\n\r\nОписание инструментов\r\nGitlab CI — это система автоматической сборки. Она занимается в том числе и отслеживанием изменений в репозитории, что важно для наших целей. Отслеживает событие, смотрит инструкции к нему, которые вы указали в файле .gitlab-ci.yml. Описанная в статье работа ведётся на ноутбуках разработчиков, есть выделенные машины на MacOS — их мы регистрируем в Gitlab CI.\r\n\r\nFastlane — верхнеуровневое управление сборками с помощью команд в терминале. Для него есть много плагинов на сайте, которые помогают выполнять задачи разного уровня: от генерации AppIcon до сборки проекта и публикации в AppStore. Плагины, как и сам Fastlane, написаны на ruby, поэтому и управлять этим инструментом придётся на ruby.\r\n\r\nGitlab CI посылает инструкции в виде shell-команд на раннер, в набор команд входит Fastlane. Таким образом, они взаимодействуют, выполняя каждая свои задачи.\r\n\r\nFirebase — система дистрибьютинга сборок, хорошее решение для быстрой доставки сборок до ваших тестировщиков. Мы используем Firebase App Distribution — он бесплатный и без ограничений на место.\r\n\r\nCode coverage — процент покрытия вашего кода тестами. Упрощённо можно привести к формуле:\r\n\r\nколичество скомпилированных строк кода, по которым пробежали тесты / общее количество скомпилированных строк кода) * 100%\r\n\r\n[Gitlab CI] Gitlab-runner\r\nПервое, что нам нужно сделать на пути самурая автоматизации, — это подружить наш mac с CI. Для этого на самом маке нужно выполнить пару команд:\r\n\r\nУстановить программу gitlab-runner на mac (можно с помощью Homebrew). Ссылка на установку Homebrew.\r\n\r\nВводим в терминал:\r\n\r\nbrew install gitlab-runner\r\n\r\nТеперь надо зарегистрировать наш mac как раннер для CI:\r\n\r\ngitlab-runner register\r\n\r\nПосле этого надо будет ввести URL до гитлаба, где хостимся.\r\n\r\nЕщё понадобится токен для CI. Его можно получить, только будучи Owner’ом или Maintainer’ом проекта в настройках проекта. В Settings должен быть раздел CI/CD. Раздел Runners.\r\n\r\n\r\n\r\nВводим токен туда.\r\n\r\nОписание раннера ни на что не влияет, оно даётся только для справки.\r\n\r\nОбратите внимание на теги раннера. Без тегов ничего не будет работать, нужен минимум один. По тегам можно фильтровать разные раннеры: например, один будет с доступом к сети и сможет выкладывать сборки, а другой — нет. Тогда можно обозначить разные теги для разных функций раннеров. Например, для одного впишем теги ios_tests,ios_firebase, а в другом — только ios_tests. И сможем разделять исполнителей по типу.\r\n\r\nТип исполнения для нас всегда будет shell.\r\n\r\n\r\nЗарегистрировали наш раннер. Теперь давайте посмотрим и убедимся, что он находится в том же списке Runners в настройках проекта.\r\n\r\n\r\nВосклицательный знак указывает, что раннер ещё не запущен и не готов к работе. Идём к следующему шагу.\r\n\r\nЗапускаем раннер. Выполняем команды в терминале:\r\n\r\ngitlab-runner install\r\n\r\ngitlab-runner start\r\n\r\nТеперь наш раннер должен загореться зелёным в списке.\r\n\r\n\r\nУ раннеров есть проблема с логами. Для того чтобы мы могли просматривать полный файл логов, нужно прописать максимальный размер. Для этого проходим по пути “~/.gitlab-runner/”. Там будет файл config.toml, в котором хранится вся информация о зарегистрированных раннерах, в нём нам нужно прописать параметр output_limit, — это максимальный размер в байтах хранимых логов в джобах. Для всех параметров есть документация, для output_limit написано: “Maximum build log size in kilobytes. Default is 4096 (4MB)”. То есть по умолчанию — 4 мегабайта.\r\n\r\nЕсли на одной машине мы регистрируем несколько раннеров, например для разных IOS-проектов, то в каждом случае изначально указываются дефолтные параметры для всего. Значит, если мы хотим увеличить объём логов, надо дописывать в каждом случае.\r\n\r\nВсё, что будет превышать этот порог, не будет залогировано и не будет отображаться в информации о джобах. Примерно так это должно выглядеть:\r\n\r\n\r\nНужно быть аккуратным с логами в джобах, потому что один файл логов в среднем весит 37 Мб, он занимает много места. Все логи хранятся в гитлабе и увеличивают размер репозитория. Готово, Gitlab CI теперь может работать с раннером!\r\n\r\nНастройка Fastlane\r\nУстановить Fastlane можно тоже через Homebrew (документация). Необходимо наличие ruby в системе, обычно он установлен в macos по дефолту. Набираем:\r\n\r\nbrew install fastlane\r\n\r\nОткрываем терминал, переходим в папку с проектом с помощью cd./path_to_project и выполняем команду\r\n\r\nfastlane init\r\n\r\nСгенерится папка Fastlane с нужными файлами. Можно использовать Fastlane с помощью Swift: описывать лайны на Swift, а не на неизвестном DSL, — это упростит понимание скрипта для коллег (документация).\r\n\r\nСамый важный файл здесь — это Fastfile. Он состоит из lane. Каждый из них — отдельный сценарий Fastlane. Можно представить сам Fastlane как некий класс (в ООП), а lane — как его функции. Синтаксис довольно простой.\r\n\r\nРазберём на примере lane для юнит-тестов. Для этого можно использовать разные плагины. Мы в компании выбрали scan как самый удобный и функциональный. Ниже пример кода. Если хотите, можете ознакомиться со всеми параметрами и их предназначением в подробном описании по плагину scan. \r\n\r\n\r\nПолучился lane, который запускает тесты для схемы CoreTests, которую мы берём из параметров вызова lane. Ему можно скармливать как схемы обычных таргетов, так и отдельные схемы под тесты. Передавать надо названия схем, а не сами таргеты.\r\n\r\nВ большинстве проектов один таргет, одна схема — и нет путаницы. Но при создании CI больших проектов, когда 30–40 конфигураций, а таргетов ещё больше, важно ориентироваться на правильные понятия. Таргет — это executable(buildable)-проект, у него есть описательная схема с Build Phase, Build Settings, General. Схемы — это инструкции, описывающие, как комбинировать таргеты. Например, одна схема для тестов может запускать несколько тестовых таргетов под собой. В основном плагины Fastlane работают со схемами для запуска.\r\n\r\n\r\nДальше для проверки работоспособности lane введём в терминал команду:\r\n\r\nfastlane unit_test scheme:CoreTests\r\n\r\nВ ответ мы увидим логи компиляции и сами логи Fastlane. По итогу получим папку ./tests/CoreTests_report/ с отчётом о тестировании в формате .xcresult. По дефолту плагин scan генерирует нам ещё два файла — report.html & report.junit. Первый обычно используется для показа людям, а второй — для Gitlab CI в качестве отчёта тестирования, — об этом позже в разделе про артифакты в пайплайнах.\r\n\r\nНа основе сгенерированных отчётов можно проверять, были ли зафейленные тесты и в каких местах. У нас есть отдельный скрипт на Swift, который на основе report.junit проверяет наличие проваленных тестов и говорит, в каких фреймворках.\r\n\r\nCode coverage\r\nТакже мы считаем покрытие тестами и на основе этих данных ограничиваем мерж в master. Это работает с помощью Fastlane. Он уже выдал нам .xcresult, и на его основе мы будем получать значение покрытия.\r\n\r\nПлагин для Fastlane xcov может выдавать разные форматы отчётов. Нам нужен json, так как нас интересует сам процент покрытия, а проще всего его получить из json.\r\n\r\n\r\nВ самом начале функции есть махинации с файлом .xcresult потому, что xcov требует, чтобы он находился в определённом месте иерархии папки derived. Поэтому мы переносим его в это место перед подсчётом code coverage. И желательно, чтобы папка output_directory была пуста, т. к. xcov не перезатирает отчёты, а просто падает, если видит, что в этой папке уже есть файлы с таким названием.\r\n\r\nНа выходе мы получим report.json, в котором содержится много информации, параметр coverage — это наш процент. Этот файл содержит информацию по общему coverage, каждому таргету, каждому файлу и каждому исполняемому скоупу.\r\n\r\n\r\nСчитывание ковеража в Gitlab CI динамическое. В настройках вы задаёте Regex-паттерн, который будет проверять в каждой строчке логов, подходит ли число под паттерн. Мы используем такой формат:\r\n\r\n\\(\\d+.\\d+\\%\\) covered\r\n\r\nС его помощью парсится вывод скрипта Swift. Подходят записи типа “(51.67%)covered”\r\n\r\nНаш скрипт написан на Swift. Он нужен только для того, чтобы вывести coverage в нужном формате. Всё, что от него требуется, — чтобы какая-нибудь рандомная строчка в коде не попала под это regexp.\r\n\r\nМы используем .junit, потому что это стандартный формат отчётов о тестировании в Gitlab CI. Внутри пайплайнов можно увидеть, сколько и какие тесты прошли, а какие нет, информацию по ним, — для этого необходим отчёт junit. .xcresult, который в себе содержит намного больше информации, включая code coverage.\r\n\r\nСама настройка Regex находится в настройках проекта Settings -> CI/CD -> General pipelines, в графе Test coverage parsing. Подробнее про Regex можно почитать в этой статье. Там же есть ссылка на сайты, в которых можно протестировать работу формулы (например, тут).\r\n\r\nFirebase deploy\r\nТеперь устанавливаем Firebase CLI, — это управление сборками в Firebase из командной строки. В обычном режиме разработчик идёт на сам сайт Firebase, закидывает туда сборки и управляет проектом, но это можно сделать с помощью командной строки. Для этого нам и нужен Firebase.\r\n\r\nМы используем бесплатный Firebase App Distribution (в Firebase есть другие платные фичи, которые не относятся к CI/CD).\r\n\r\nКак настроить Google Firebase: документация\r\n\r\nВот краткий план:\r\n\r\n1. Устанавливаем плагин к Fastlane — Firebase.\r\n\r\n2. Устанавливаем Firebase CLI.\r\n\r\n3. Получаем токен учётной записи, у которой есть доступ в проект, куда мы будем отправлять наши сборки.\r\n\r\n4. Вот lane, который будет отправлен в Firebase.\r\n\r\n\r\nФункция умеет собирать сборку для публикации в AppStore, для тестировщиков, для общего пользования. Они отличаются кастомными параметрами в ExportOptions. При указании export method: “development” ExportOptions генерируется автоматически. Для production ExportOptions надо описывать вручную. Можно приложить ссылки для production- и development-опций экспорта.\r\n\r\n\r\nДальше можно объединить это в один lane или сделать отдельный для каждого действия, чтобы CI мог дёргать эти функции в каком угодно порядке. У нас это разделено.\r\n\r\n\r\nВсё, что мы написали на Fastlane, нужно проверять с помощью консольных команд. Например, для публикации в Firebase можно выполнить две команды подряд:\r\n\r\nfastlane archive_project scheme:“Dev” filename:“dev_1.2.3”\r\n\r\nfastlane distribute_to_firebase filename:“dev_1.2.3” scheme:“Dev”\r\n\r\nЭти же строки можно объединить в одну для удобства, поставив между ними “;”\r\n\r\nfastlane archive_project scheme:“Dev” filename:“dev_1.2.3”; fastlane distribute_to_firebase filename:“dev_1.2.3” scheme:“Dev”\r\n\r\nДля публикации используются git tags. Например, если мы для коммита запушим тег dev_1.72.44.TASK-123, то в Firebase отправится сборка с номером 1.72.44.TASK-123. Сами вызовы с указанием версии идут из gitlab-ci.yml. Если что-то пойдёт не так, джоба зафейлится и разработчику придёт уведомление об этом. Посмотрев на логи джобы, он увидит причину: например, проект удалили или что-то ещё серьёзное случилось. Firebase позволяет публиковать приложения с одинаковой версией.\r\n\r\nTestflight deploy для itunesconnect и отправки в AppStore\r\nTestflight — это система обработки сборок от Apple. В ней можно делать сборки для тестировщиков, а также релизить протестированные сборки. По схеме CI/CD она будет на уровне с Firebase, т. к. они взаимозаменяемы, только Firebase более удобен для дистрибуции тестовых сборок. А Testflight мы используем для релиза итоговых сборок для пользователей.\r\n\r\nFirebase — для теста, потому что удобнее и быстрее. Testflight — для production, потому что релизить можно только через неё.\r\n\r\nМы загружаем наш артефакт в ItunesConnect, и сама система предоставляет нам возможность отправить его сразу в Testflight. Testflight даёт возможность скачивать приложения, над которыми работаем, прямо на айфон.\r\n\r\nОсновные этапы публикации в AppStore те же. Нам нужно собрать архив и отправить его, только теперь отправляем в AppStore. Тестировщик скачает Testflight и получит доступ к тому, что мы задеплоили.\r\n\r\nСледующий этап — изменение версии сборки, чтобы мы могли разные сборки публиковать для тестировщиков. Например, разные команды делают сборки под себя и будут отличать их билд-версиями. Так вот, AppStore не позволит загрузить сборки с одинаковыми версиями, поэтому нужно автоматизировать изменение версии проекта.\r\n\r\nЕсть небольшой lane для изменения версии и номера билда с помощью Fastlane.\r\n\r\n\r\nТут описаны два lane: один валидирует версию, чтобы она подходила для публикации в AppStore, второй может подставить в версию что угодно (ну или почти что угодно). Первый мы используем только для Testflight, а второй — для Firebase, т. к. Firebase позволяет писать буквы в версию и не придирчив к повторам.\r\n\r\nЕщё нам понадобится сам lane публикации в AppStore: \r\n\r\n\r\nLane несложный, поэтому тут нечего дополнять, просто передаём нужные параметры в плагин Fastlane. Порядок вызова lane для публикации в AppStore прост:\r\n\r\nfastlane update_version version:“$right_version”\r\n\r\nfastlane archive_beta scheme:${scheme} filename:${filename}\r\n\r\nfastlane distribute_to_testflight\r\n\r\nitunes_username:”${ITUNES_USERNAME}” filename:${filename}\r\n\r\nЗдесь $right_version — это желательно валидный номер версии. Если он будет невалидным, то lane провалится и на этом путь публикации закончится. ${ITUNES_USERNAME} — это email юзера, от имени которого мы будем публиковать архив в Testflight.\r\n\r\n[Gitlab CI].gitlab-ci.yml\r\nТеперь нужно описать правила, по которым у нас будут происходить взаимодействия ивентов в Gitlab и написанных скриптов. И имя ему  —  gitlab-ci.yml. Этот файл задаёт стандарт сборки и проверки приложения.\r\n\r\nЭто тот самый файл, который запускает все lane, считает нужные параметры, управляет артефактами. Один из его минусов(а может, и плюсов) — скрипты запускаются на bash. Поэтому переиспользование тут не совсем обычное. Об этом расскажу позже, но сначала ознакомимся с простыми примерами файла:\r\n\r\n\r\nЕсли мы запушим в репозиторий файл .gitlab-ci.yml с таким содержимым, то у нас будут на каждый ивент гитлаба создаваться джобы, которые будут запускать скрипт echo “Hello world”.\r\n\r\n\r\nСам по себе пайплайн прост:\r\n\r\n\r\nИсполняемый код может находиться в трёх стадиях, они указаны по порядку:\r\n\r\nbefore_script\r\n\r\nscript\r\n\r\nafter_script\r\n\r\nЗдесь мы и будем писать вызовы скриптов Fastlane, Swift и что душе угодно.\r\n\r\nЭксперименты с .gitlab-ci.yml\r\n\r\nПриведу немного примеров из личного опыта, чтобы объяснить, как мы настраиваем пайплайны под свои запросы.\r\n\r\nПопробуем посмотреть, что будет с таким файлом CI, в котором 5 стадий и 8 джоб, и разберём, как это будет работать.\r\n\r\n\r\nТут есть несколько правил:\r\n\r\nПайплайны (pipeline) состоят из стадий (stage), а они в свою очередь — из джоб (job)\r\n\r\nКаждая джоба может состоять только в одной стадии\r\n\r\nКаждая стадия может содержать нескольких джоб, которые запускаются последовательно и параллельно. Значит, если у вас есть несколько раннеров, то test_job1 и test_job2 стартанули бы почти одновременно, не ожидая завершения друг друга\r\n\r\n Стадии идут только последовательно, каждая перед стартом ожидает завершения всех джоб из предыдущей стадии\r\n\r\nЕсли при выполнении джобы вызвалась команда exit с ненулевой ошибкой, то джоба фейлится: exit 0 означает, что джоба успешно завершилась; любая другая цифра будет обозначать какую-то ошибку\r\n\r\nЕсли в стадии одна из джоб зафейлилась без флага allow_failure: true, то следующая стадия не стартует. Для test_job3 этот флаг включёен, а для test_job5 нет\r\n\r\nЕсли в стадии несколько джоб и одна из них зафейлилась, то другие джобы стадии продолжают выполнение\r\n\r\nВ разных джобах можно писать coverage. Например, в джобе 1 мы написали coverage 0%, в джобе 2 получили 10%, и в джобе 4 написали 100%. Тогда общий coverage пайплайна будет считаться как среднее среди всех джоб (0 + 10 + 100) / 3. Это можно использовать, например, для мультимодульности. Создать стадию тестов и на этой стадии — по одной джобе на каждый фреймворк. Но можно сделать, как мы в компании, на уровне Xcode. У нас есть выделенная схема для юнит-тестов всех фреймворков, в которую добавлены все тестовые таргеты. Результатом тестирования этой схемы являются   прогнанные тесты в этих таргетах и средний coverage по ним\r\n\r\nCoverage учитывается, даже если джоба зафейлилась\r\n\r\nВ джобе 8 выставлен флаг when: on_failure, — это значит, что джоба выполнится только в том случае, если пайплайн зафейлился. В случае если пайплайн прошёл без проблем, эта джоба не запустится. Такой флаг полезно ставить, например, в джобы, которые оповещают о зафейленном пайплайне\r\n\r\nПорядок стадий в пайплайне зависит от их порядка в файле CI в фазе stages: первыми будут выполняться те, что находятся выше по порядку. Джобы — так же: чем выше вы их описали в файле, тем раньше они выполнятся в пайплайне\r\n\r\nВ файле CI есть подобие наследования — так называемые extends:. Мы создаем шаблонную джобу, которую будем расширять нужными нам свойствами.\r\n\r\nВажное замечание: если мы в шаблоне указали какой-то параметр, например script или tags, а не в джобе, которая расширяет этот шаблон, то если мы в джобе напишем собственный script, то исполнятся будет только тот, что написан в джобе. Переопределение полностью отменяет свойство шаблона. Например, мы хотим в конце каждой джобы выполнять какое-то действие, тогда можем это прописать в before_script шаблона, а в самих джобах исполняемые команды писать в фазу script.\r\n\r\nА теперь реальный пример того, как мы гоняем тесты и считаем coverage. Рассмотрим .gitlab-ci.yml такого вида — сверху вниз по каждому пункту.\r\n\r\nVariables\r\nВ файле .gitlab-ci.yml есть раздел с переменными, где мы можем задать кастомные свойства для всего файла. Также стоит учитывать, что помимо параметров, которые укажете в самом файле, вам будет доступен целый набор Predefined CI/CD variables и набор кастомных параметров, указанных в настройках проекта (Settings ⃗⃗→ CI/CD → Variables). Все три категории свойств будут доступны во всех ваших описываемых джобах внутри .gitlab-ci.yml.\r\n\r\nStages\r\nЗдесь мы указываем набор стадий для пайплайнов, пока что они просто обозначают, как джобы будут группироваться внутри пайплайнов.\r\n\r\nJobs\r\nРасскажу подробнее про структуру джоб:\r\n\r\nextends — нужно, чтобы переиспользовать базовые вещи;\r\n\r\nstage — указываем, в какой стадии участвует джоба. Внутри одной стадии они выполняются параллельно;\r\n\r\nbefore script, script, after script — набор команд Shell в том порядке, в котором исполняются;\r\n\r\nonly/except — описывают, под какие правила попадает / точно не попадает джоба;\r\n\r\ntags — теги, которыми мы пометили раннер, когда регистрировали его;\r\n\r\nallow failure — свойство, которое разрешает / не разрешает зафейленную джобу, здесь можно указывать допустимые exit codes;\r\n\r\nartifacts — будем использовать для хранения артефактов джобы.\r\n\r\nКак дебажить\r\nGitlab-runner предоставляет возможность запускать локально ваши джобы для их тестирования перед пушем в репозиторий, что упрощает жизнь. Для этого нужно выполнить команду\r\n\r\ngitlab-runner exec shell exec shell test_job1\r\n\r\nКоманда выполнялась для такого gitlab-ci.yml.\r\n\r\n\r\nУ такого дебаггинга есть минус:  вам не будут доступны реальные глобальные переменные по типу CI_JOB_ID, CI_PIPELINE_ID, т. к. эти параметры передаются Gitlab на раннер. Но такой дебаггинг вполне сгодится для проверки работоспособности локальных скриптов. Вот ещё пример вывода глобальной переменной\r\n\r\n\r\nИтого\r\nМы научились настраивать Gitlab-runner на машине\r\n\r\nРазобрались, как работает Fastlane\r\n\r\nМожем написать lane, которые помогут: протестировать, собрать информацию о code coverage, собрать архив и отправить его в Firebase или Testflight\r\n\r\nЕщё раз повторим действия в командной строке:\r\n\r\nУстанавливаем gitlab-runner\r\n\r\nbrew install gitlab-runner\r\n\r\nДелаем mac раннером для CI\r\n\r\ngitlab-runner register\r\n\r\nЗапускаем раннер\r\n\r\ngitlab-runner install\r\n\r\ngitlab-runner start\r\n\r\nУстанавливаем Fastlane\r\n\r\nbrew install fastlane\r\n\r\nПапка Fastlane с нужными файлами\r\n\r\nfastlane init\r\n\r\nПроверим работоспособность lane\r\n\r\nfastlane unit_test scheme:CoreTests\r\n\r\nПубликуем в Firebase\r\n\r\nfastlane archive_project scheme:“Dev” filename:“dev_1.2.3”\r\n\r\nfastlane distribute_to_firebase filename:“dev_1.2.3” scheme:“Dev”\r\n\r\nВызов lane для публикации в AppStore\r\n\r\nfastlane update_version version:“$right_version”\r\n\r\nfastlane archive_beta scheme:${scheme} filename:${filename}\r\n\r\nfastlane distribute_to_testflight\r\n\r\nitunes_username:”${ITUNES_USERNAME}” filename:${filename}\r\n\r\nЛокально запустим джобы, чтобы тестировать их перед пушем в репозиторий\r\n\r\ngitlab-runner exec shell exec shell test_job1\r\n\r\nИспользование Gitlab CI + Fastlane + Firebase + Testflight обходится недорого. Можно иметь 2–3 машины и настроить работу.\r\n\r\nРабота команды выглядит так:\r\n\r\nРазработчик сделал задачу, написал на неё тесты и отправил МР на код-ревью.  \r\n\r\nВнутри МР CI/CD считает, не слишком ли низкий code coverage, и проверяет, собирается ли проект.                      \r\n\r\nОтправив MP на ревью, разработчик ставит тег на последний коммит, например dev_1.33.22.TASK-123 cicd         .            \r\n\r\nОн готовит сборку и отправляет ее в Firebase.                      \r\n\r\nИз Firebase тестировщик скачивает сборку. Проверяет, получает ревью и   нужные апрувы.            \r\n\r\nМы готовы мержить: держим код в master и на ней запускается пайплайн обновления значения code coverage, чтобы уже другие MP не попадали в master с понижением.\r\n\r\nКак видите, большую часть работы делает за нас Gitlab CI, а нам главное — расставить триггеры в правильных местах и настроить наш процесс сборки.\r\n\r\nДокументируйте настроенный CI/CD, научите всех пользоваться им, предлагайте идеи по автоматизации процессов и спрашивайте ваших коллег о болях. Возможно, пара скриптов, встроенных в CI/CD, сэкономят деньги для бизнеса или нервы ваших коллег.\r\n\r\nЗадавайте свои вопросы в комментариях!",
            "tag": "iOS",
            "hub": 2,
            "author": 1,
            "add_datetime": "2021-10-11T19:37:51.106Z",
            "is_active": true
        }
    },
    {
        "model": "mainapp.comment",
        "pk": 1,
        "fields": {
            "text": "Это комментарий для теста",
            "image": "",
            "article": 14,
            "author": 1,
            "add_datetime": "2021-10-11T19:37:51.106Z",
            "is_active": true
        }
    },
    {
        "model": "mainapp.comment",
        "pk": 2,
        "fields": {
            "text": "А это еще один комментарий для теста",
            "image": "",
            "article": 14,
            "author": 1,
            "add_datetime": "2021-10-11T19:37:51.106Z",
            "is_active": true
        }
    },
    {
        "model": "mainapp.comment",
        "pk": 3,
        "fields": {
            "text": "Для статьи какой то там комментарий",
            "image": "",
            "article": 15,
            "author": 1,
            "add_datetime": "2021-10-11T19:37:51.106Z",
            "is_active": true
        }
    },
    {
        "model": "authapp.intergalacticuser",
        "pk": 1,
        "fields": {
            "password": "pbkdf2_sha256$260000$xhJFItWWzoZLvsZcigZyhx$Y3v3f96qSFMXi8zMNKA/0bmiqlTzxGRcmkRN9mYSkpM=",
            "last_login": "2021-10-14T23:12:54.994Z",
            "is_superuser": true,
            "username": "admin",
            "first_name": "Админ",
            "last_name": "",
            "email": "var@mail.ru",
            "is_staff": true,
            "is_active": true,
            "date_joined": "2021-10-10T19:33:15.056Z",
            "avatar": "avatars/gift_birthday.jpg",
            "age": 25,
            "sex": "not selected",
            "send_messages": true,
            "groups": [],
            "user_permissions": []
        }
    }
]